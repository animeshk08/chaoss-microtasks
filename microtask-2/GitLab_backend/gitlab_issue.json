{
  "backend_name": "GitLab",
  "backend_version": "0.12.0",
  "perceval_version": "0.12.24",
  "timestamp": 1584463910.059577,
  "origin": "https://gitlab.com/nsnam/ns-3-dev",
  "uuid": "9dfc34ae8d7759996f454560411746c1cbaa9129",
  "updated_on": 1583845576.352,
  "classified_fields_filtered": null,
  "category": "issue",
  "search_fields": {
    "item_id": "29872612",
    "owner": "nsnam",
    "iid": 131,
    "project": "ns-3-dev",
    "groups": null
  },
  "tag": "https://gitlab.com/nsnam/ns-3-dev",
  "data": {
    "id": 29872612,
    "iid": 131,
    "project_id": 7128405,
    "title": "utils/check-style.py still referring to mercurial",
    "description": "An often ignored script: `utils/check-style.py` is still referring to mercurial in two parts:\n```\nUsage: check-style.py [options]\n\nOptions:\n  -h, --help            show this help message and exit\n  --debug               Output some debugging information\n  -l LEVEL, --level=LEVEL\n                        Level of style conformance: higher levels include all\n                        lower levels. level=0: re-indent only. level=1: add\n                        extra spaces. level=2: insert extra newlines and extra\n                        braces around single-line statements. level=3: remove\n                        all trailing spaces\n  --check-hg-hook       Get the list of files to check from mercurial's list\n                        of modified and added files and assume that the script\n                        runs as a pretxncommit mercurial hook\n  --check-hg            Get the list of files to check from mercurial's list\n                        of modified and added files\n  -f FILE, --check-file=FILE\n                        Check a single file\n  --diff                Generate a diff on stdout of the indented files\n  -i, --in-place        Indent the input files in-place\n```\n\nBoth `--check-hg` and `--check-hg-hook` should be converted to the appropriate git options.\n\nFor what concerns `--check-hg` (i.e., to find the list of changed files), it should be a simple matter of checking `git status`, with the caveat that only the files already in git should be checked (the user might have a lot of untracked files in their directory).\n\nAbout git hooks, I guess the changes will be a little bit more difficult (no idea for real). Git hooks are documented here:\n[https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks](https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks)",
    "state": "closed",
    "created_at": "2020-01-23T07:49:18.359Z",
    "updated_at": "2020-03-10T13:06:16.352Z",
    "closed_at": "2020-03-10T13:06:16.267Z",
    "closed_by": {
      "id": 2511295,
      "name": "Mohit P. Tahiliani",
      "username": "mohittahiliani",
      "state": "active",
      "avatar_url": "https://assets.gitlab-static.net/uploads/-/system/user/avatar/2511295/avatar.png",
      "web_url": "https://gitlab.com/mohittahiliani"
    },
    "labels": [],
    "milestone": null,
    "assignees": [
      {
        "id": 2511295,
        "name": "Mohit P. Tahiliani",
        "username": "mohittahiliani",
        "state": "active",
        "avatar_url": "https://assets.gitlab-static.net/uploads/-/system/user/avatar/2511295/avatar.png",
        "web_url": "https://gitlab.com/mohittahiliani"
      }
    ],
    "author": {
      "id": 3252122,
      "name": "Tommaso Pecorella",
      "username": "tommypec",
      "state": "active",
      "avatar_url": "https://secure.gravatar.com/avatar/96371c68958a0b5f2c056bf45a7ba86c?s=80&d=identicon",
      "web_url": "https://gitlab.com/tommypec"
    },
    "assignee": {
      "id": 2511295,
      "name": "Mohit P. Tahiliani",
      "username": "mohittahiliani",
      "state": "active",
      "avatar_url": "https://assets.gitlab-static.net/uploads/-/system/user/avatar/2511295/avatar.png",
      "web_url": "https://gitlab.com/mohittahiliani"
    },
    "user_notes_count": 3,
    "merge_requests_count": 1,
    "upvotes": 0,
    "downvotes": 0,
    "due_date": null,
    "confidential": false,
    "discussion_locked": null,
    "web_url": "https://gitlab.com/nsnam/ns-3-dev/-/issues/131",
    "time_stats": {
      "time_estimate": 0,
      "total_time_spent": 0,
      "human_time_estimate": null,
      "human_total_time_spent": null
    },
    "task_completion_status": {
      "count": 0,
      "completed_count": 0
    },
    "weight": null,
    "has_tasks": false,
    "_links": {
      "self": "https://gitlab.com/api/v4/projects/7128405/issues/131",
      "notes": "https://gitlab.com/api/v4/projects/7128405/issues/131/notes",
      "award_emoji": "https://gitlab.com/api/v4/projects/7128405/issues/131/award_emoji",
      "project": "https://gitlab.com/api/v4/projects/7128405"
    },
    "references": {
      "short": "#131",
      "relative": "#131",
      "full": "nsnam/ns-3-dev#131"
    },
    "moved_to_id": null,
    "epic_iid": null,
    "epic": null,
    "notes_data": [
      {
        "id": 275741565,
        "type": null,
        "body": "It seems that there's a patch lingering somewhere from past year's Google Code-in...",
        "attachment": null,
        "author": {
          "id": 3252122,
          "name": "Tommaso Pecorella",
          "username": "tommypec",
          "state": "active",
          "avatar_url": "https://secure.gravatar.com/avatar/96371c68958a0b5f2c056bf45a7ba86c?s=80&d=identicon",
          "web_url": "https://gitlab.com/tommypec"
        },
        "created_at": "2020-01-23T08:23:34.350Z",
        "updated_at": "2020-01-23T08:23:34.350Z",
        "system": false,
        "noteable_id": 29872612,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 131,
        "award_emoji_data": []
      },
      {
        "id": 275742065,
        "type": null,
        "body": "assigned to @tommypec",
        "attachment": null,
        "author": {
          "id": 3252122,
          "name": "Tommaso Pecorella",
          "username": "tommypec",
          "state": "active",
          "avatar_url": "https://secure.gravatar.com/avatar/96371c68958a0b5f2c056bf45a7ba86c?s=80&d=identicon",
          "web_url": "https://gitlab.com/tommypec"
        },
        "created_at": "2020-01-23T08:24:43.804Z",
        "updated_at": "2020-01-23T08:24:43.808Z",
        "system": true,
        "noteable_id": 29872612,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 131,
        "award_emoji_data": []
      },
      {
        "id": 275742209,
        "type": null,
        "body": "unassigned @tommypec",
        "attachment": null,
        "author": {
          "id": 3252122,
          "name": "Tommaso Pecorella",
          "username": "tommypec",
          "state": "active",
          "avatar_url": "https://secure.gravatar.com/avatar/96371c68958a0b5f2c056bf45a7ba86c?s=80&d=identicon",
          "web_url": "https://gitlab.com/tommypec"
        },
        "created_at": "2020-01-23T08:24:59.821Z",
        "updated_at": "2020-01-23T08:24:59.824Z",
        "system": true,
        "noteable_id": 29872612,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 131,
        "award_emoji_data": []
      },
      {
        "id": 275990237,
        "type": null,
        "body": "Should we just remove the hook part for now?",
        "attachment": null,
        "author": {
          "id": 2480280,
          "name": "Tom Henderson",
          "username": "tomhenderson",
          "state": "active",
          "avatar_url": "https://secure.gravatar.com/avatar/5f2e81000565ed63707a582858ff0964?s=80&d=identicon",
          "web_url": "https://gitlab.com/tomhenderson"
        },
        "created_at": "2020-01-23T14:30:40.038Z",
        "updated_at": "2020-01-23T14:30:40.038Z",
        "system": false,
        "noteable_id": 29872612,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 131,
        "award_emoji_data": []
      },
      {
        "id": 276851818,
        "type": null,
        "body": "assigned to @mohittahiliani",
        "attachment": null,
        "author": {
          "id": 3252122,
          "name": "Tommaso Pecorella",
          "username": "tommypec",
          "state": "active",
          "avatar_url": "https://secure.gravatar.com/avatar/96371c68958a0b5f2c056bf45a7ba86c?s=80&d=identicon",
          "web_url": "https://gitlab.com/tommypec"
        },
        "created_at": "2020-01-25T13:45:48.160Z",
        "updated_at": "2020-01-25T13:45:48.162Z",
        "system": true,
        "noteable_id": 29872612,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 131,
        "award_emoji_data": []
      },
      {
        "id": 276851978,
        "type": null,
        "body": "I think so, unless @mohittahiliani can give us the updated code before 3.31.",
        "attachment": null,
        "author": {
          "id": 3252122,
          "name": "Tommaso Pecorella",
          "username": "tommypec",
          "state": "active",
          "avatar_url": "https://secure.gravatar.com/avatar/96371c68958a0b5f2c056bf45a7ba86c?s=80&d=identicon",
          "web_url": "https://gitlab.com/tommypec"
        },
        "created_at": "2020-01-25T13:46:32.859Z",
        "updated_at": "2020-01-25T13:46:32.859Z",
        "system": false,
        "noteable_id": 29872612,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 131,
        "award_emoji_data": []
      },
      {
        "id": 299955897,
        "type": null,
        "body": "mentioned in merge request !206",
        "attachment": null,
        "author": {
          "id": 2511295,
          "name": "Mohit P. Tahiliani",
          "username": "mohittahiliani",
          "state": "active",
          "avatar_url": "https://assets.gitlab-static.net/uploads/-/system/user/avatar/2511295/avatar.png",
          "web_url": "https://gitlab.com/mohittahiliani"
        },
        "created_at": "2020-03-05T18:06:22.003Z",
        "updated_at": "2020-03-05T18:06:22.006Z",
        "system": true,
        "noteable_id": 29872612,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 131,
        "award_emoji_data": []
      },
      {
        "id": 302453452,
        "type": null,
        "body": "closed via merge request !206",
        "attachment": null,
        "author": {
          "id": 2511295,
          "name": "Mohit P. Tahiliani",
          "username": "mohittahiliani",
          "state": "active",
          "avatar_url": "https://assets.gitlab-static.net/uploads/-/system/user/avatar/2511295/avatar.png",
          "web_url": "https://gitlab.com/mohittahiliani"
        },
        "created_at": "2020-03-10T13:06:16.421Z",
        "updated_at": "2020-03-10T13:06:16.424Z",
        "system": true,
        "noteable_id": 29872612,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 131,
        "award_emoji_data": []
      }
    ],
    "award_emoji_data": []
  }
}{
  "backend_name": "GitLab",
  "backend_version": "0.12.0",
  "perceval_version": "0.12.24",
  "timestamp": 1584463911.446127,
  "origin": "https://gitlab.com/nsnam/ns-3-dev",
  "uuid": "a1f001570f006c0fcff8d4028504fa7226ac0fa4",
  "updated_on": 1583864157.215,
  "classified_fields_filtered": null,
  "category": "issue",
  "search_fields": {
    "item_id": "31843577",
    "owner": "nsnam",
    "iid": 161,
    "project": "ns-3-dev",
    "groups": null
  },
  "tag": "https://gitlab.com/nsnam/ns-3-dev",
  "data": {
    "id": 31843577,
    "iid": 161,
    "project_id": 7128405,
    "title": "core:  rename EventId::IsRunning to IsPending",
    "description": "",
    "state": "opened",
    "created_at": "2020-03-10T18:15:57.215Z",
    "updated_at": "2020-03-10T18:15:57.215Z",
    "closed_at": null,
    "closed_by": null,
    "labels": [],
    "milestone": null,
    "assignees": [],
    "author": {
      "id": 1138790,
      "name": "Peter Barnes",
      "username": "pdbj",
      "state": "active",
      "avatar_url": "https://secure.gravatar.com/avatar/0c66458167197aab9685021d93b141b9?s=80&d=identicon",
      "web_url": "https://gitlab.com/pdbj"
    },
    "assignee": null,
    "user_notes_count": 0,
    "merge_requests_count": 0,
    "upvotes": 1,
    "downvotes": 0,
    "due_date": null,
    "confidential": false,
    "discussion_locked": null,
    "web_url": "https://gitlab.com/nsnam/ns-3-dev/-/issues/161",
    "time_stats": {
      "time_estimate": 0,
      "total_time_spent": 0,
      "human_time_estimate": null,
      "human_total_time_spent": null
    },
    "task_completion_status": {
      "count": 0,
      "completed_count": 0
    },
    "weight": null,
    "has_tasks": false,
    "_links": {
      "self": "https://gitlab.com/api/v4/projects/7128405/issues/161",
      "notes": "https://gitlab.com/api/v4/projects/7128405/issues/161/notes",
      "award_emoji": "https://gitlab.com/api/v4/projects/7128405/issues/161/award_emoji",
      "project": "https://gitlab.com/api/v4/projects/7128405"
    },
    "references": {
      "short": "#161",
      "relative": "#161",
      "full": "nsnam/ns-3-dev#161"
    },
    "moved_to_id": null,
    "epic_iid": null,
    "epic": null,
    "notes_data": [],
    "award_emoji_data": [
      {
        "id": 3756280,
        "name": "thumbsup",
        "user": {
          "id": 3252122,
          "name": "Tommaso Pecorella",
          "username": "tommypec",
          "state": "active",
          "avatar_url": "https://secure.gravatar.com/avatar/96371c68958a0b5f2c056bf45a7ba86c?s=80&d=identicon",
          "web_url": "https://gitlab.com/tommypec"
        },
        "created_at": "2020-03-10T21:52:35.976Z",
        "updated_at": "2020-03-10T21:52:35.976Z",
        "awardable_id": 31843577,
        "awardable_type": "Issue"
      }
    ]
  }
}{
  "backend_name": "GitLab",
  "backend_version": "0.12.0",
  "perceval_version": "0.12.24",
  "timestamp": 1584463974.981615,
  "origin": "https://gitlab.com/nsnam/ns-3-dev",
  "uuid": "c571fa7a8d4b7124c2249d4aac3c97080d8015be",
  "updated_on": 1583917872.471,
  "classified_fields_filtered": null,
  "category": "issue",
  "search_fields": {
    "item_id": "30048780",
    "owner": "nsnam",
    "iid": 136,
    "project": "ns-3-dev",
    "groups": null
  },
  "tag": "https://gitlab.com/nsnam/ns-3-dev",
  "data": {
    "id": 30048780,
    "iid": 136,
    "project_id": 7128405,
    "title": "performance of EventId::Cancel in TCP models",
    "description": "See issue posted by Eitan Zahavi <zahavi.eitan@gmail.com> on ns-developers, and attached patch.[ns-3.memory_bloat_due_to_event_cancel_not_remove__1_.patch](/uploads/a7193c066e897e2a1dc4f22f056b79c8/ns-3.memory_bloat_due_to_event_cancel_not_remove__1_.patch)\n\nhttps://mailman.isi.edu/pipermail/ns-developers/2020-January/014951.html",
    "state": "opened",
    "created_at": "2020-01-28T22:33:40.882Z",
    "updated_at": "2020-03-11T09:11:12.471Z",
    "closed_at": null,
    "closed_by": null,
    "labels": [
      "module:internet:tcp"
    ],
    "milestone": null,
    "assignees": [],
    "author": {
      "id": 2480280,
      "name": "Tom Henderson",
      "username": "tomhenderson",
      "state": "active",
      "avatar_url": "https://secure.gravatar.com/avatar/5f2e81000565ed63707a582858ff0964?s=80&d=identicon",
      "web_url": "https://gitlab.com/tomhenderson"
    },
    "assignee": null,
    "user_notes_count": 76,
    "merge_requests_count": 0,
    "upvotes": 0,
    "downvotes": 0,
    "due_date": null,
    "confidential": false,
    "discussion_locked": null,
    "web_url": "https://gitlab.com/nsnam/ns-3-dev/-/issues/136",
    "time_stats": {
      "time_estimate": 0,
      "total_time_spent": 0,
      "human_time_estimate": null,
      "human_total_time_spent": null
    },
    "task_completion_status": {
      "count": 0,
      "completed_count": 0
    },
    "weight": null,
    "has_tasks": false,
    "_links": {
      "self": "https://gitlab.com/api/v4/projects/7128405/issues/136",
      "notes": "https://gitlab.com/api/v4/projects/7128405/issues/136/notes",
      "award_emoji": "https://gitlab.com/api/v4/projects/7128405/issues/136/award_emoji",
      "project": "https://gitlab.com/api/v4/projects/7128405"
    },
    "references": {
      "short": "#136",
      "relative": "#136",
      "full": "nsnam/ns-3-dev#136"
    },
    "moved_to_id": null,
    "epic_iid": null,
    "epic": null,
    "notes_data": [
      {
        "id": 278429144,
        "type": null,
        "body": "changed title from **performance of {-Simulator-}::Cancel in TCP models** to **performance of {+EventId+}::Cancel in TCP models**",
        "attachment": null,
        "author": {
          "id": 2480280,
          "name": "Tom Henderson",
          "username": "tomhenderson",
          "state": "active",
          "avatar_url": "https://secure.gravatar.com/avatar/5f2e81000565ed63707a582858ff0964?s=80&d=identicon",
          "web_url": "https://gitlab.com/tomhenderson"
        },
        "created_at": "2020-01-28T22:56:55.020Z",
        "updated_at": "2020-01-28T22:56:55.023Z",
        "system": true,
        "noteable_id": 30048780,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 136,
        "award_emoji_data": []
      },
      {
        "id": 278454682,
        "type": null,
        "body": "Actually, there is a related [Bugzilla issue 2503](https://www.nsnam.org/bugzilla/show_bug.cgi?id=2503), with proposed patch\n\nAlexander proposed a new Scheduler based on `std::priority_queue`.  He also suggested removing the Remove API, and replacing all calls with Cancel.  In his testing this was never slower, and often faster.\n\nI pointed out they have different memory tradeoffs, so I preferred to keep the Remove API.  I\u2019m ok with replacing Remove calls with Cancel.\n\nIt seems Eitan has found a case which is already using Cancel, and shouldn\u2019t, for memory performance reasons.\n\nI went so far as to split this in to two GCI tasks:  \n\n*  [Implement the priority queue](https://codein.withgoogle.com/dashboard/tasks/5316319029755904/preview/), but add a Remove function, since that\u2019s part of the Scheduler API.  (`std::priority_queue` doesn't support a remove, so one has to do a little more work than Alexander's patch.)\n*  [Replace calls to Remove with calls to Cancel](https://codein.withgoogle.com/dashboard/tasks/6024577289814016/preview/)\n\nWe received one submission to the first task, and several to the second.  I\u2019ll be reviewing and merging these submissions over the coming weeks.\n\nIn the mean time, I would suggest amending Eitan\u2019s patch:\n\n1.  In the corresponding headers comment on each EventId member variable that they should be Removed, not Cancelled, when necessary, for performance.\n2.  Remove the corresponding comments from the .cc files (just adds cruft, IMO)\n3.  Update logging statements \u201cCancelled\u2026\u201d\n4.  Rename CancelAllTimers() to RemoveAllTimerEvents?",
        "attachment": null,
        "author": {
          "id": 1138790,
          "name": "Peter Barnes",
          "username": "pdbj",
          "state": "active",
          "avatar_url": "https://secure.gravatar.com/avatar/0c66458167197aab9685021d93b141b9?s=80&d=identicon",
          "web_url": "https://gitlab.com/pdbj"
        },
        "created_at": "2020-01-29T00:01:04.694Z",
        "updated_at": "2020-01-29T00:01:04.694Z",
        "system": false,
        "noteable_id": 30048780,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 136,
        "award_emoji_data": []
      },
      {
        "id": 278607307,
        "type": null,
        "body": "I am working on extending tcp-bulk-send a little and collecting time, VmPeak and massif before and after.\n\nRegarding your last email Peter. I am not sure why you suggest replacing all Removes with Cancels. My example actually show that there are some (rare) cases when user actually wanted not Cancel or Remove by Delay (move the event to later). Is the new priority_queue support O(log(n)) re-prioritization?\n\nAlso depending on the implementation, it may be possible for priority_queue to be completely agnostic to number of future events (elements in the queue) when inserting new events. But if it is O(log(n)) it is very possible that having millions of cancelled events actually slows it down.\n\nRegarding the patch amendment: yes you are perfectly right. I will attach here an updated patch.",
        "attachment": null,
        "author": {
          "id": 5339759,
          "name": "Eitan Zahavi",
          "username": "zahavi.eitan",
          "state": "active",
          "avatar_url": "https://assets.gitlab-static.net/uploads/-/system/user/avatar/5339759/avatar.png",
          "web_url": "https://gitlab.com/zahavi.eitan"
        },
        "created_at": "2020-01-29T09:22:31.678Z",
        "updated_at": "2020-01-29T09:23:56.578Z",
        "system": false,
        "noteable_id": 30048780,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 136,
        "award_emoji_data": []
      },
      {
        "id": 278715897,
        "type": null,
        "body": "Patch for allowing configuring stop time, data rate and latency on examples/tcp/tcp-bulk-send enables demonstrating the issue and fix. Patch attached.\n[ns-git.tcp-bulk-send.patch](/uploads/8c1cf88d31c28e16c8165d3597cab68b/ns-git.tcp-bulk-send.patch)\n\nRun: time ./build/examples/tcp/ns3.30.1-tcp-bulk-send-optimized \\\n            -stop=1 --latency=1us --dataRate=400Gbps --maxBytes=10000000000000\n\nResults:\n\n| Code | Runtime  | VmPeak [KB] |\n|------|----------|-------------|\n| old  | 1601.05s | 6,217,592   |\n| new  | 1292.77s | 23,476      |\n\n\nThe fixed patch also attached:\n[ns-git.avoid-scheuler-bloat.patch](/uploads/f08c5496e960ed102fc9450721af9475/ns-git.avoid-scheuler-bloat.patch)\n\nEitan",
        "attachment": null,
        "author": {
          "id": 5339759,
          "name": "Eitan Zahavi",
          "username": "zahavi.eitan",
          "state": "active",
          "avatar_url": "https://assets.gitlab-static.net/uploads/-/system/user/avatar/5339759/avatar.png",
          "web_url": "https://gitlab.com/zahavi.eitan"
        },
        "created_at": "2020-01-29T12:05:49.146Z",
        "updated_at": "2020-01-29T12:06:53.414Z",
        "system": false,
        "noteable_id": 30048780,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 136,
        "award_emoji_data": []
      },
      {
        "id": 278859460,
        "type": null,
        "body": "I think that Eitan's behaviour is related to how large is the Event queue.\n\nScheduling an event is not \"for free\", even inserting an element in the map scheduler has a cost - if I'm right, for the MapScheduler it's a logarithmic cost).\nIf the events are *really* a lot, perhaps it's more convenient to delete them rather than canceling and simply skip them later.\nMoreover, even \"skipping\" the canceled events has a cost, as it's a Peek, check if it's still valid, remove.\n\nThere should be a tradeoff somewhere... and of course the \"best\" option would be to switch from Cancel to Remove if that tradeoff is hit.\nStill, let's not overcomplicate the approach. I'll try to run Eitan's script under various configurations and see if where's the balance.",
        "attachment": null,
        "author": {
          "id": 3252122,
          "name": "Tommaso Pecorella",
          "username": "tommypec",
          "state": "active",
          "avatar_url": "https://secure.gravatar.com/avatar/96371c68958a0b5f2c056bf45a7ba86c?s=80&d=identicon",
          "web_url": "https://gitlab.com/tommypec"
        },
        "created_at": "2020-01-29T15:09:28.759Z",
        "updated_at": "2020-01-29T15:09:28.759Z",
        "system": false,
        "noteable_id": 30048780,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 136,
        "award_emoji_data": []
      },
      {
        "id": 279028892,
        "type": null,
        "body": "There *is* a tradeoff, unfortunately it (usually) depends on the specifics of the model being run.  Even the \"same\" model can behave somewhat differently, depending on the configuration.  In this case the significance of Cancel vs. Remove in TCP depends in part on the size of the scenario and the offered load.\n\nThat's why there so many scheduler types in the literature (and in ns-3): what works best for one model or scenario might work terribly in another.  I'd be cautious about trying to pre-determine the \"best\" option; it likely won't be best in all cases.",
        "attachment": null,
        "author": {
          "id": 1138790,
          "name": "Peter Barnes",
          "username": "pdbj",
          "state": "active",
          "avatar_url": "https://secure.gravatar.com/avatar/0c66458167197aab9685021d93b141b9?s=80&d=identicon",
          "web_url": "https://gitlab.com/pdbj"
        },
        "created_at": "2020-01-29T19:26:25.705Z",
        "updated_at": "2020-01-29T19:26:25.705Z",
        "system": false,
        "noteable_id": 30048780,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 136,
        "award_emoji_data": []
      },
      {
        "id": 279946655,
        "type": null,
        "body": "I made some data crunching using Eitan's simulation, and the results are mixed.\n\nThere are cases where removing the evens does, indeed, have a tremendous impact on the memory / speed of the simulation but... there's a catch, and a big one: *I wouldn't personally classify these scenarios as \"good\" simulations.*\n\nLet's use, for example, the parameters suggested by Eitan: `--stop=1 --latency=1us --dataRate=400Gbps --maxBytes=10000000000000`\nOn my machine, the results are:\n\n| | Execution time | Memory |\n| ------ | ------ | ------ |\n| Optimized | 2389.07 | 33780 |\n| Original | 4906.4 | 6283352 |\n\n\nThe problem arises when we look at another index: the number of packets successfully received: 0.49%.\n\nMeaning that the system is fully saturated - the simulation didn't had enough time to send the intended number of packets.\n\nIf we reduce the number of bytes sent, we can still see an improvement, but only for some scenarios, and the improvement is only on the memory footprint, *not* on the execution speed. Note that the speed improvement happens when the simulation hits a memory footprint larger than some GigaBytes...\nThis means that \n\nThe good news is that, no matter what, Eitan's patch doesn't seems to *increase* the execution time in normal conditions. There are differences but they are below statistical significance.\nOn other terms, Eitan's patch is (at best) doing nothing bad.\n\nOf course mileage may vary...\n\nSaid so, my proposal is to apply Eitan's patch ****but**** to use an attribute or something, so the user can select the appropriate behaviour if in need.\n\nAnother approach would be to enable a sort of \"memory garbage collector\", i.e., if the event queue in the scheduler goes above a given threshold, run through it and remove the canceled events.\n\nThis second approach would have the pro of not having to change anything in the code (and to have a broader scope w.r.t. Eitan's changes) but a *big* cons: it could add unpredictable delays in the simulation - i.e., I wouldn't suggest it for a real-time scheduler. Still, for the \"normal\" situation, I think it would be the best approach.\n\nRemoving elements from a map or a list is heavy - if you have to find the specific element and remove it - but I'm quite sure that removing a bunch of them is more efficient.",
        "attachment": null,
        "author": {
          "id": 3252122,
          "name": "Tommaso Pecorella",
          "username": "tommypec",
          "state": "active",
          "avatar_url": "https://secure.gravatar.com/avatar/96371c68958a0b5f2c056bf45a7ba86c?s=80&d=identicon",
          "web_url": "https://gitlab.com/tommypec"
        },
        "created_at": "2020-01-31T08:17:19.856Z",
        "updated_at": "2020-01-31T08:17:19.856Z",
        "system": false,
        "noteable_id": 30048780,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 136,
        "award_emoji_data": []
      },
      {
        "id": 279949498,
        "type": null,
        "body": "How about @natale-p approach of storing no more than one event (cancelled or not cancelled) per timer?\n\nhttps://mailman.isi.edu/pipermail/ns-developers/2015-September/012997.html\n\nAre there any disadvantages compared to other approaches (Remove, garbage collector, ...)?",
        "attachment": null,
        "author": {
          "id": 1262351,
          "name": "Alexander Krotov",
          "username": "link2xt",
          "state": "active",
          "avatar_url": "https://assets.gitlab-static.net/uploads/-/system/user/avatar/1262351/avatar.png",
          "web_url": "https://gitlab.com/link2xt"
        },
        "created_at": "2020-01-31T08:24:11.636Z",
        "updated_at": "2020-01-31T08:24:11.636Z",
        "system": false,
        "noteable_id": 30048780,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 136,
        "award_emoji_data": []
      },
      {
        "id": 279960597,
        "type": "DiscussionNote",
        "body": "It seems that 2015 algorithm is broken; I'd like to update it with what I wrote here:\n\nhttps://mailman.isi.edu/pipermail/ns-developers/2020-January/014958.html\n\nI don't have my original patch anymore, but it's straightforward to make a new patch based on my pseudocode.\n\n> Removing elements from a map or a list is heavy - if you have to find the specific element and remove it - but I'm quite sure that removing a bunch of them is more efficient.\n\nPlease note that the events in TCP are inserted/removed one by one. So, if removal is O(log n), you'll have to pay that cost each time you call remove, unless there is some data structure which has an amortized removal time of O(1).",
        "attachment": null,
        "author": {
          "id": 2478411,
          "name": "N.",
          "username": "natale-p",
          "state": "active",
          "avatar_url": "https://secure.gravatar.com/avatar/e33019e1a35ee6c6f38175dc0f4d3cb1?s=80&d=identicon",
          "web_url": "https://gitlab.com/natale-p"
        },
        "created_at": "2020-01-31T08:48:24.511Z",
        "updated_at": "2020-01-31T23:13:12.962Z",
        "system": false,
        "noteable_id": 30048780,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 136,
        "award_emoji_data": []
      },
      {
        "id": 280399876,
        "type": "DiscussionNote",
        "body": "[erase_if](https://en.cppreference.com/w/cpp/container/map/erase_if) is linear...\n\nThe trick is that `erase(const key_type& k)` is O(log n), while `erase(iterator pos)` is O(1). Hence, by using erase_if (which is effectively an iteration over the whole map) you have a complexity of O(n).\n\nIt might seems illogical, but let's suppose that the Events are 100000 and 95% of them are canceled.\nIf we remove them one by one we'll need 95000*O(log 100000), while if we do it once with erase_if, we'll need O(100000), which is more or less 4.75 times faster.",
        "attachment": null,
        "author": {
          "id": 3252122,
          "name": "Tommaso Pecorella",
          "username": "tommypec",
          "state": "active",
          "avatar_url": "https://secure.gravatar.com/avatar/96371c68958a0b5f2c056bf45a7ba86c?s=80&d=identicon",
          "web_url": "https://gitlab.com/tommypec"
        },
        "created_at": "2020-01-31T23:13:12.887Z",
        "updated_at": "2020-01-31T23:14:17.236Z",
        "system": false,
        "noteable_id": 30048780,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 136,
        "award_emoji_data": []
      },
      {
        "id": 281013951,
        "type": "DiscussionNote",
        "body": "If we want to cleanly fix this we should have add a DelayToTime(time)\nmethod to every EventId or maybe just a sub-class of those.\nThat sub-class would then add another member m_expire_time which will be\nchecked on Invoke to see if indeed it is about time to really Invoke.\nIf not than it will schedule itself in the future at  m_expire_time -\ncurrent_time.\n\nMy problem is that while original fix was simple and I could suggest it in\nno time, the current approach involves a much deeper dive to see if code\nactually have ability to allocate events that are sub-classes on EventImp,\netc etc. Maybe it is not that expensive to add a flag m_is_delayed and\nm_expire_time to every event?\n\nEitan",
        "attachment": null,
        "author": {
          "id": 5339759,
          "name": "Eitan Zahavi",
          "username": "zahavi.eitan",
          "state": "active",
          "avatar_url": "https://assets.gitlab-static.net/uploads/-/system/user/avatar/5339759/avatar.png",
          "web_url": "https://gitlab.com/zahavi.eitan"
        },
        "created_at": "2020-02-02T15:02:54.187Z",
        "updated_at": "2020-02-02T15:02:54.187Z",
        "system": false,
        "noteable_id": 30048780,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 136,
        "award_emoji_data": []
      },
      {
        "id": 281026505,
        "type": "DiscussionNote",
        "body": "Wait a second, perhaps this is more \"disruptive\" than I initially thought.\n\nI did check your patch, and I *though* that you targeted these events because they're frequent but now you're pointing our at a slightly different (but equally important, if not more) kind of events: the ones rescheduled for another moment, i.e., the ones that are *supposed* to be fired at T, but then are delayed to T+x.\n\nAt the moment moving an event in the future is not possible, and the only solution is to cancel it and create another one, which might lead to the problems you've experienced.\n\nAbout moving the Event, the computational complexity is dire, see [map::extract](https://en.cppreference.com/w/cpp/container/map/extract) - similar to a Remove, but perhaps less than a remove / insert.\nFor the ListScheduler the complexity will be lower, because you don't have to scan the whole EventId list twice, re-inserting the event is helped by the fact that you know that it's in the future w.r.t. its actual position.\n\nI still think that a \"garbage Events collector\" would be more general and simpler to implement - but I'll leave the decision to @tomhenderson and @pdbj",
        "attachment": null,
        "author": {
          "id": 3252122,
          "name": "Tommaso Pecorella",
          "username": "tommypec",
          "state": "active",
          "avatar_url": "https://secure.gravatar.com/avatar/96371c68958a0b5f2c056bf45a7ba86c?s=80&d=identicon",
          "web_url": "https://gitlab.com/tommypec"
        },
        "created_at": "2020-02-02T16:07:17.108Z",
        "updated_at": "2020-02-02T16:07:17.108Z",
        "system": false,
        "noteable_id": 30048780,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 136,
        "award_emoji_data": []
      },
      {
        "id": 281027380,
        "type": "DiscussionNote",
        "body": "Forgot...\n\nAdding a `DelayToTime(time)` (I'd call it `DelayBy (time)`) could be also an option - we should only make are that multiple calls won't mess things up.\nIt shouldn't even be too hard...\n\nAbout the issue of touching the ns-3 core... we try to never do it, but if it's for a good reason, we'll do it.",
        "attachment": null,
        "author": {
          "id": 3252122,
          "name": "Tommaso Pecorella",
          "username": "tommypec",
          "state": "active",
          "avatar_url": "https://secure.gravatar.com/avatar/96371c68958a0b5f2c056bf45a7ba86c?s=80&d=identicon",
          "web_url": "https://gitlab.com/tommypec"
        },
        "created_at": "2020-02-02T16:10:56.876Z",
        "updated_at": "2020-02-02T16:20:27.351Z",
        "system": false,
        "noteable_id": 30048780,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 136,
        "award_emoji_data": []
      },
      {
        "id": 281215786,
        "type": "DiscussionNote",
        "body": "I would suggest the following approach:\n1. First I provide a patch that uses local member to track next expiration\nof the DelayACK and RTO and use that to re-schedule the events once expired.\n2. A longer term work on enabling DelayBy(time) on regular events should be\nadded to the backlog.\nMy main concern is how do we catch more cases of code segments actually\nCancel and Schedule instead of DelayBy\n\nIf I hear positive feedback I will do 1 aiming for inclusion on the next\nrelease.\n\nEitan",
        "attachment": null,
        "author": {
          "id": 5339759,
          "name": "Eitan Zahavi",
          "username": "zahavi.eitan",
          "state": "active",
          "avatar_url": "https://assets.gitlab-static.net/uploads/-/system/user/avatar/5339759/avatar.png",
          "web_url": "https://gitlab.com/zahavi.eitan"
        },
        "created_at": "2020-02-03T07:06:31.150Z",
        "updated_at": "2020-02-03T07:06:31.150Z",
        "system": false,
        "noteable_id": 30048780,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 136,
        "award_emoji_data": []
      },
      {
        "id": 281681106,
        "type": "DiscussionNote",
        "body": "I think there is already a feature which handles delaying events: the [Watchdog](https://www.nsnam.org/doxygen/classns3_1_1_watchdog.html) timer.  When the timer expires normally it invokes the stored `EventImpl`.  If you delay the expiration by `Watchdog::Ping(Time delay)`, when the original event time expires the `EventImpl` *is not* invoked; instead a new expiration event is scheduled.  Consequently only a single event is ever in the Scheduler, as desired in the discussion above.",
        "attachment": null,
        "author": {
          "id": 1138790,
          "name": "Peter Barnes",
          "username": "pdbj",
          "state": "active",
          "avatar_url": "https://secure.gravatar.com/avatar/0c66458167197aab9685021d93b141b9?s=80&d=identicon",
          "web_url": "https://gitlab.com/pdbj"
        },
        "created_at": "2020-02-03T18:42:59.367Z",
        "updated_at": "2020-02-03T18:42:59.367Z",
        "system": false,
        "noteable_id": 30048780,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 136,
        "award_emoji_data": []
      },
      {
        "id": 281689266,
        "type": "DiscussionNote",
        "body": "Hi Peter,\n\nAs you probably guess this is not exactly what we want.\nWe use many events in TCP simulation.\nBut some of them require being delayed per many times.\nWe the Watchdog trick will not work for us.\nWe need delay added to specific event.\n\nThanks\nEitan",
        "attachment": null,
        "author": {
          "id": 5339759,
          "name": "Eitan Zahavi",
          "username": "zahavi.eitan",
          "state": "active",
          "avatar_url": "https://assets.gitlab-static.net/uploads/-/system/user/avatar/5339759/avatar.png",
          "web_url": "https://gitlab.com/zahavi.eitan"
        },
        "created_at": "2020-02-03T19:03:51.887Z",
        "updated_at": "2020-02-03T19:03:51.887Z",
        "system": false,
        "noteable_id": 30048780,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 136,
        "award_emoji_data": []
      },
      {
        "id": 281690300,
        "type": null,
        "body": "I think this discussion highlights that we should document the time and space complexity of the main Scheduler functions, to facilitate users making wise choices.  I'v added\n#139 for that.",
        "attachment": null,
        "author": {
          "id": 1138790,
          "name": "Peter Barnes",
          "username": "pdbj",
          "state": "active",
          "avatar_url": "https://secure.gravatar.com/avatar/0c66458167197aab9685021d93b141b9?s=80&d=identicon",
          "web_url": "https://gitlab.com/pdbj"
        },
        "created_at": "2020-02-03T19:06:39.861Z",
        "updated_at": "2020-02-03T19:06:39.861Z",
        "system": false,
        "noteable_id": 30048780,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 136,
        "award_emoji_data": []
      },
      {
        "id": 281718286,
        "type": "DiscussionNote",
        "body": "You make a Watchdog for each event. This already implements Natale's idea from 2015 (albeit in a different way).",
        "attachment": null,
        "author": {
          "id": 1138790,
          "name": "Peter Barnes",
          "username": "pdbj",
          "state": "active",
          "avatar_url": "https://secure.gravatar.com/avatar/0c66458167197aab9685021d93b141b9?s=80&d=identicon",
          "web_url": "https://gitlab.com/pdbj"
        },
        "created_at": "2020-02-03T20:04:50.088Z",
        "updated_at": "2020-02-03T20:04:50.088Z",
        "system": false,
        "noteable_id": 30048780,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 136,
        "award_emoji_data": []
      },
      {
        "id": 281757361,
        "type": "DiscussionNote",
        "body": "@pdbj Watchdogs... fudge! I missed those.\n\n@zahavi.eitan...\n\n ![giphy](/uploads/d819f76f5931a4ebbbd51f61e2a35f96/giphy.gif)",
        "attachment": null,
        "author": {
          "id": 3252122,
          "name": "Tommaso Pecorella",
          "username": "tommypec",
          "state": "active",
          "avatar_url": "https://secure.gravatar.com/avatar/96371c68958a0b5f2c056bf45a7ba86c?s=80&d=identicon",
          "web_url": "https://gitlab.com/tommypec"
        },
        "created_at": "2020-02-03T21:27:15.160Z",
        "updated_at": "2020-02-03T21:27:15.160Z",
        "system": false,
        "noteable_id": 30048780,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 136,
        "award_emoji_data": []
      },
      {
        "id": 281767431,
        "type": "DiscussionNote",
        "body": "@pdbj One thing... Watchdogs are missing an important thing... the cancel.\n\nOnce you create a Watchdog you can delay it indefinitely (nice), but you can not destroy it. Let's go in order...\n\nWatchdog cancellation: easy - we can add a `Watchdog::Cancel()` function, setting a flag so that when the expiration is over, nothing is called.\n\nWatchdog deletion - this is more tricky.\nIf you delete a watchdog (it's a \"normal\" class, mind), the Simulator will go crazy, because there's an Event pointing at it, and... boom, segmentation fault (if we're lucky).\n\nSo, let's say that I'll use a Watchdog inside a class object (IP fragments are a perfect example), and later I delete that object... boom.\nUnless (perhaps) if adding this to `Watchdog::~Watchdog ()` will be enough:\n```diff\nWatchdog::~Watchdog ()\n{\n  NS_LOG_FUNCTION (this);\n+  m_event.Cancel ();\n  delete m_impl;\n}\n```\n\nWhat do you think ?",
        "attachment": null,
        "author": {
          "id": 3252122,
          "name": "Tommaso Pecorella",
          "username": "tommypec",
          "state": "active",
          "avatar_url": "https://secure.gravatar.com/avatar/96371c68958a0b5f2c056bf45a7ba86c?s=80&d=identicon",
          "web_url": "https://gitlab.com/tommypec"
        },
        "created_at": "2020-02-03T21:47:48.289Z",
        "updated_at": "2020-02-03T21:47:48.289Z",
        "system": false,
        "noteable_id": 30048780,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 136,
        "award_emoji_data": []
      },
      {
        "id": 281789844,
        "type": "DiscussionNote",
        "body": "Yes I agree.  Now if I could only figure out why Cancel is in SimulatorImpl, not in the Scheduler.",
        "attachment": null,
        "author": {
          "id": 1138790,
          "name": "Peter Barnes",
          "username": "pdbj",
          "state": "active",
          "avatar_url": "https://secure.gravatar.com/avatar/0c66458167197aab9685021d93b141b9?s=80&d=identicon",
          "web_url": "https://gitlab.com/pdbj"
        },
        "created_at": "2020-02-03T23:04:53.886Z",
        "updated_at": "2020-02-03T23:04:53.886Z",
        "system": false,
        "noteable_id": 30048780,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 136,
        "award_emoji_data": []
      },
      {
        "id": 289016517,
        "type": "DiscussionNote",
        "body": "Hi All, \n\nI would like to get in front of you further details on the issue - I found when I try to move to using Watchdog instead of Event. It seems that the problem is not just caused by the need to \"delay\" an event, but also due to a large number of events to simply \"Expire\" without the ability to merge them into a single Delayed event. \n\nSo I am reaching out to you to figure out what is the chance to get my original patch or any other fix to the memory bloat into next release? Or what can I do to expedite the process.\n\nThanks\nEitan\n\nI have found and fixed memory bloat for TCP tests running high bandwidth for a long time. \nThe fixes applied to the following objects:\n\n1. Ipv4L3Protocol::m_fragmentsTimers[pair<uint64_t src_dst_ips, uint32_t ip_hdr_id_and_proto>]\nWhenever a new IP packet is sent via IPv4, a new event is generated and stored in m_fragmentsTimers.\nThe timeout used is m_fragmentExpirationTimeout which is a parameter of the IP layer. When the timeout expires, an ICMP probe may be sent (if enough of original packet was kept) and all the packet fragments will be removed from memory.\n\nSee: .AddAttribute (\"FragmentExpirationTimeout\", \"When this timeout expires, the fragments will be cleared from the buffer.\", TimeValue (Seconds (30)),\n\nThe timeout (per each packet) is Cancel() when the last fragment of the packet is processed. \n\nThere is a problem to \"merge\" all these timeouts into a single event since there is no guarantee fragments will be sent via LocalDeliver is ascending order. So without loss of accuracy we cannot collapse all the timeouts into a small set of events. \n\nNumber of such events equals number of packets sent within 30sec window of the timer !!!\n\n2. TcpSocketBase::m_retxEvent \nThis is a single timeout event per each TCP socket. \nIt seems like this could be a potential candidate to using a Watchdog per socket. \nOr I can implement logic to track the last expiration time and avoid cancelling it if the community see \nany performance degradation caused by the Simulator::Remove(event) compared to event.Cancel().\n\nCurrent implementation is cautious in most cases on not scheduling new such events when they are not expired. \nBut on NewAck there is Cancel() and immediate Schedule(...) of new time. \n\nWhen expired the ReTxTimeout procedure is invoked, responsible for cleanup and congestion control.\n\n3. TcoSocketBase::m_delAckEvent\nThis event represent the timeout by which Delayed Acks are being generated.\nConsequently, there is one such event per tcp socket. \n\nIt is cancelled on sending a PureACK (not delayed) or sending packet with ACK set or when sending DelACK.\nIt is started when sending a packet with no ACK with delay m_delAckTimeout.\nWhen expired it calls the routine to send a PureACK.\n\nI can implement logic to track the last expiration time and avoid Removing it if the community see \nany performance degradation caused by the Simulator::Remove(event) compared to event.Cancel().",
        "attachment": null,
        "author": {
          "id": 5339759,
          "name": "Eitan Zahavi",
          "username": "zahavi.eitan",
          "state": "active",
          "avatar_url": "https://assets.gitlab-static.net/uploads/-/system/user/avatar/5339759/avatar.png",
          "web_url": "https://gitlab.com/zahavi.eitan"
        },
        "created_at": "2020-02-16T13:50:46.909Z",
        "updated_at": "2020-02-16T13:50:46.909Z",
        "system": false,
        "noteable_id": 30048780,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 136,
        "award_emoji_data": []
      },
      {
        "id": 289079965,
        "type": null,
        "body": "I simply added the `m_event.Cancel ();` line to the Watchdog destructor, and I made the attached test script.\n[watchdogTest.cc](/uploads/31a23b1ad965ef68c00b4c2a720524f2/watchdogTest.cc)\n\nThe scheduler does NOT explode - I didn't test it with valgrind but I don't see why it should have any troubles with it.\n\nThe point is: we **CAN** destroy Watchdogs.\n\nNow... if Eitan could (please) test using Watchdogs in the functions he found to be troublesome, it would be great.",
        "attachment": null,
        "author": {
          "id": 3252122,
          "name": "Tommaso Pecorella",
          "username": "tommypec",
          "state": "active",
          "avatar_url": "https://secure.gravatar.com/avatar/96371c68958a0b5f2c056bf45a7ba86c?s=80&d=identicon",
          "web_url": "https://gitlab.com/tommypec"
        },
        "created_at": "2020-02-16T22:27:26.761Z",
        "updated_at": "2020-02-16T22:27:26.761Z",
        "system": false,
        "noteable_id": 30048780,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 136,
        "award_emoji_data": []
      },
      {
        "id": 289184372,
        "type": null,
        "body": "Sorry I missed this before.\nI will test. \nWill update soon.",
        "attachment": null,
        "author": {
          "id": 5339759,
          "name": "Eitan Zahavi",
          "username": "zahavi.eitan",
          "state": "active",
          "avatar_url": "https://assets.gitlab-static.net/uploads/-/system/user/avatar/5339759/avatar.png",
          "web_url": "https://gitlab.com/zahavi.eitan"
        },
        "created_at": "2020-02-17T07:48:21.534Z",
        "updated_at": "2020-02-17T07:48:21.534Z",
        "system": false,
        "noteable_id": 30048780,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 136,
        "award_emoji_data": []
      },
      {
        "id": 289426804,
        "type": null,
        "body": "Progress report on patch based on Watchdog. Does it really worth it?\n\nAs shown in my longer analysis above, the IP fragment case is not solved by Watchdogs.\nThere are too many independent Events created and they will remain (cancelled) on the Scheduler...\n\nAs far as the other 2 cases in TcpSocketBase:\nThe conversion to Watchdog is not trivial. \nThe code is re-using the same Watchdog for two different cases. So the callback function needs to be re-assigned.\nIt also cancels and re-start the watchdog several times. So leaving the cancelled events on the schedule.\n\nAlso, Watchdog is missing several APIs required by current algorithm:\nWatchdog::Cancel() - to abort the watchdog without destructing it \nWatchdog::IsExpired() - to see if it has expired\nWatchdog::GetExpiration() - to get the current m_end\n\nI am still chasing test failure in: tcp-rto-test. Something in my Watchdog based patch does not work right...\n\nI wonder if the need for the extra Watchdog APIs and semantics don't point that it is better to stay with Event and Remove them when it makes sense.",
        "attachment": null,
        "author": {
          "id": 5339759,
          "name": "Eitan Zahavi",
          "username": "zahavi.eitan",
          "state": "active",
          "avatar_url": "https://assets.gitlab-static.net/uploads/-/system/user/avatar/5339759/avatar.png",
          "web_url": "https://gitlab.com/zahavi.eitan"
        },
        "created_at": "2020-02-17T13:34:07.650Z",
        "updated_at": "2020-02-17T13:34:07.650Z",
        "system": false,
        "noteable_id": 30048780,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 136,
        "award_emoji_data": []
      },
      {
        "id": 290182665,
        "type": "DiscussionNote",
        "body": "> First I provide a patch that uses local member to track next expiration of the DelayACK and RTO and use that to re-schedule the events once expired.\n\nDid you try this method? Where is the patch? I am curious to see how it performs...\n\nthanks",
        "attachment": null,
        "author": {
          "id": 2478411,
          "name": "N.",
          "username": "natale-p",
          "state": "active",
          "avatar_url": "https://secure.gravatar.com/avatar/e33019e1a35ee6c6f38175dc0f4d3cb1?s=80&d=identicon",
          "web_url": "https://gitlab.com/natale-p"
        },
        "created_at": "2020-02-18T13:08:12.251Z",
        "updated_at": "2020-02-18T13:08:12.251Z",
        "system": false,
        "noteable_id": 30048780,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 136,
        "award_emoji_data": []
      },
      {
        "id": 290901114,
        "type": null,
        "body": "Hi All,\n\nAttached a working patch. [ns-3-git.mem_bloat_watchogs.patch](/uploads/ce35b9cd9d6a3463e9f5d1a412c6dd39/ns-3-git.mem_bloat_watchogs.patch)\nIt passes all tests.\n\nThe performance compared to previous implementation:\n\n| Mode| Execution time | Memory |\n|---------------|---------|--------|\n| Remove(event) | 2389.07 | 33780 |\n| Cancel(event) | 4906.4 | 6283352 |\n| Watchdog      | 2173.98| 6284952 |\n\nSo the memory increased probably due to extra memory in the Watchdogs... \nApparently number of delays within existing wait periods = 1 which is where number of cancelled Watchdog events == number of original cancelled events. I think the difference in runtime is caused by running Watchdogs optimized and previous runs debug. I can dig into it when I have more time.\n\nMy conclusion is simple: For this case of TCP when many events are generated and canceled it is better to to Remove events rather than Cancel them. The watchdog option could help if there were many delays of an event within same wait period - but this is not the case.\n\nEitan",
        "attachment": null,
        "author": {
          "id": 5339759,
          "name": "Eitan Zahavi",
          "username": "zahavi.eitan",
          "state": "active",
          "avatar_url": "https://assets.gitlab-static.net/uploads/-/system/user/avatar/5339759/avatar.png",
          "web_url": "https://gitlab.com/zahavi.eitan"
        },
        "created_at": "2020-02-19T11:55:25.881Z",
        "updated_at": "2020-02-19T11:58:22.206Z",
        "system": false,
        "noteable_id": 30048780,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 136,
        "award_emoji_data": []
      },
      {
        "id": 290971525,
        "type": null,
        "body": "Hi Eitan,\n\nthanks for the table; however, I am missing one point (theoretical one):\nif Remove() costs O(log (n)), where n is the number of events already in\nthe simulator, and Cancel() costs O(1), how can Remove() running in half\ntime wrt Cancel()?\n\nThanks",
        "attachment": null,
        "author": {
          "id": 2478411,
          "name": "N.",
          "username": "natale-p",
          "state": "active",
          "avatar_url": "https://secure.gravatar.com/avatar/e33019e1a35ee6c6f38175dc0f4d3cb1?s=80&d=identicon",
          "web_url": "https://gitlab.com/natale-p"
        },
        "created_at": "2020-02-19T13:38:06.759Z",
        "updated_at": "2020-02-19T13:38:06.759Z",
        "system": false,
        "noteable_id": 30048780,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 136,
        "award_emoji_data": []
      },
      {
        "id": 290992926,
        "type": null,
        "body": "Very simple. The O(log(n)) is where n is number of events in the\nscheduler...\nIf we keep scheduler very small than it does not take much time.\nWhen the scheduler queue is huge, you pay a lot for skipping the cancelled\nevents and cache pollution can be much worse than the O(log(n)) cleanup\ntime.\\\nAs I have posted my patches you are welcome to try too.\nEitan",
        "attachment": null,
        "author": {
          "id": 5339759,
          "name": "Eitan Zahavi",
          "username": "zahavi.eitan",
          "state": "active",
          "avatar_url": "https://assets.gitlab-static.net/uploads/-/system/user/avatar/5339759/avatar.png",
          "web_url": "https://gitlab.com/zahavi.eitan"
        },
        "created_at": "2020-02-19T14:05:17.083Z",
        "updated_at": "2020-02-19T14:05:17.083Z",
        "system": false,
        "noteable_id": 30048780,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 136,
        "award_emoji_data": []
      },
      {
        "id": 291100991,
        "type": null,
        "body": "I understand, thanks;\n\nI wonder, what happens if the number of users (and of TCP stacks)\nincreases? But I recognize my hack would work only inside TCP. For other\nparts of the code, we have to see if it can be applied or not.\n\nNat",
        "attachment": null,
        "author": {
          "id": 2478411,
          "name": "N.",
          "username": "natale-p",
          "state": "active",
          "avatar_url": "https://secure.gravatar.com/avatar/e33019e1a35ee6c6f38175dc0f4d3cb1?s=80&d=identicon",
          "web_url": "https://gitlab.com/natale-p"
        },
        "created_at": "2020-02-19T16:20:19.420Z",
        "updated_at": "2020-02-19T16:20:19.420Z",
        "system": false,
        "noteable_id": 30048780,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 136,
        "award_emoji_data": []
      },
      {
        "id": 291508440,
        "type": null,
        "body": "So I guess next step is merging my original patch from Jan 29th?\n[ns-git.avoid-scheuler-bloat.patch](/uploads/f08c5496e960ed102fc9450721af9475/ns-git.avoid-scheuler-bloat.patch)",
        "attachment": null,
        "author": {
          "id": 5339759,
          "name": "Eitan Zahavi",
          "username": "zahavi.eitan",
          "state": "active",
          "avatar_url": "https://assets.gitlab-static.net/uploads/-/system/user/avatar/5339759/avatar.png",
          "web_url": "https://gitlab.com/zahavi.eitan"
        },
        "created_at": "2020-02-20T09:49:06.139Z",
        "updated_at": "2020-02-20T09:49:06.139Z",
        "system": false,
        "noteable_id": 30048780,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 136,
        "award_emoji_data": []
      },
      {
        "id": 291531309,
        "type": null,
        "body": "I would still like to see what are the performances using Watchdogs",
        "attachment": null,
        "author": {
          "id": 3252122,
          "name": "Tommaso Pecorella",
          "username": "tommypec",
          "state": "active",
          "avatar_url": "https://secure.gravatar.com/avatar/96371c68958a0b5f2c056bf45a7ba86c?s=80&d=identicon",
          "web_url": "https://gitlab.com/tommypec"
        },
        "created_at": "2020-02-20T10:19:28.189Z",
        "updated_at": "2020-02-20T10:19:28.189Z",
        "system": false,
        "noteable_id": 30048780,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 136,
        "award_emoji_data": []
      },
      {
        "id": 291594630,
        "type": null,
        "body": "Hi Tommaso,\n\nI downloaded commit 81db931bdcb514e31d3b57a4d8203cc280eec5f3 and refer to it as Base below.\nI applied the patch for extending the tcp-bulk-send with extra parameters (patch above).\nI rerun all 3 options: Base, Patch1 (Remove), and Patch2 - Watchdogs. \nCompilation is optimized with dynamic linking.\n\nI run: time ./build/examples/tcp/ns3-dev-tcp-bulk-send-optimized --stop=1 --latency=1us --dataRate=400Gbps --maxBytes=10000000000000\n\n| Code    | Mode          | time [s] | Memory [B]|\n|---------|---------------|---------|-----------|\n| Base    | Cancel(event) | 2084.09 | 6,218,552 |\n| Patch1  | Remove(event) | 1959.44 | 47,420    |\n| Patch2  | Watchdog      | 2173.98 | 6,284,952 |\n\nPatch1: [ns-git.avoid-scheuler-bloat.patch](/uploads/f08c5496e960ed102fc9450721af9475/ns-git.avoid-scheuler-bloat.patch)\n\nPatch2: [ns-3-git.mem_bloat_watchogs.patch](/uploads/ce35b9cd9d6a3463e9f5d1a412c6dd39/ns-3-git.mem_bloat_watchogs.patch)\n\nEitan",
        "attachment": null,
        "author": {
          "id": 5339759,
          "name": "Eitan Zahavi",
          "username": "zahavi.eitan",
          "state": "active",
          "avatar_url": "https://assets.gitlab-static.net/uploads/-/system/user/avatar/5339759/avatar.png",
          "web_url": "https://gitlab.com/zahavi.eitan"
        },
        "created_at": "2020-02-20T11:36:32.821Z",
        "updated_at": "2020-02-20T13:23:05.631Z",
        "system": false,
        "noteable_id": 30048780,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 136,
        "award_emoji_data": []
      },
      {
        "id": 291693971,
        "type": null,
        "body": "I'll take a look at the Watchdog patch, I'm suspecting that there's a better way to use them.\nRight now you're using them as \"classical\" events, while they're not.\nPerhaps the code have to be re-arranged to use Watchdogs *and* run efficiently, simply converting events into watchdogs isn't going to give us any real advantage.",
        "attachment": null,
        "author": {
          "id": 3252122,
          "name": "Tommaso Pecorella",
          "username": "tommypec",
          "state": "active",
          "avatar_url": "https://secure.gravatar.com/avatar/96371c68958a0b5f2c056bf45a7ba86c?s=80&d=identicon",
          "web_url": "https://gitlab.com/tommypec"
        },
        "created_at": "2020-02-20T14:00:39.311Z",
        "updated_at": "2020-02-20T14:00:39.311Z",
        "system": false,
        "noteable_id": 30048780,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 136,
        "award_emoji_data": []
      },
      {
        "id": 291749154,
        "type": null,
        "body": "You are right about how I used them. But I was looking for an opportunity to use them better.\nApparently both events for RTO and delay ACK are not really doing a Watchdog function i.e. stay active and only being delayed from time to time.\nThe RTO is used for two types of delays and when I try to avoid the Cancel it actually failed the tcp-rto-test since m_end had to be REDUCED on the Ping... (Watchdog only let you increase the m_end, unless you cancel first).\nThe DelayAck is being cancelled whenever the ACK is actually sent which is either time or packet count driven.\nSo the Watchdog benefit was not there in the first place. Sorry I described it this way (like it is only a push...).\nI spent significant time reading and analyzing that code.\n\nEitan",
        "attachment": null,
        "author": {
          "id": 5339759,
          "name": "Eitan Zahavi",
          "username": "zahavi.eitan",
          "state": "active",
          "avatar_url": "https://assets.gitlab-static.net/uploads/-/system/user/avatar/5339759/avatar.png",
          "web_url": "https://gitlab.com/zahavi.eitan"
        },
        "created_at": "2020-02-20T15:02:13.568Z",
        "updated_at": "2020-02-20T15:02:13.568Z",
        "system": false,
        "noteable_id": 30048780,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 136,
        "award_emoji_data": []
      },
      {
        "id": 292877375,
        "type": null,
        "body": "I tried \"tweaking\" Watchdogs to be more efficient - without success. Not only the total time increased, the simulations fail miserably.\n\nThis is probably due to what's been pointed by Eitan in his last post: **\"m_end had to be REDUCED on the Ping\"**\n\nThe Watchdog approach works if and only if a Ping will *increase* or *do nothing* to the actual watchdog expiration. If we need to reduce the expiration, then Watchdogs are not the answer.\n\nActually, if a previous scheduled event needs to be be fired sooner, the only option is to make a new event and invalidate the old one, there aren't many alternatives (and none will be super efficient).\n\nSaid so, I see three possible actions:\n1.  Apply Eitan's patch,\n2.  Try [Natale's suggestion](https://gitlab.com/nsnam/ns-3-dev/issues/136#note_279960597),\n3.  Create a new (more efficient on Cancel and Remove) Scheduler.\n\nAbout 1): @zahavi.eitan I'm sorry if I'm *that* picky on your patch, I know it does its job but it's \"dangerous\", i.e., it's working on your case but it could have serious side-effects on other cases.\n\nAbout 3): great idea, I wouldn't know where to start from. I mean, I know how to make a scheduler but I have no idea on how to make one more efficient than the actual ones.\n\nI'd go for number 2... perhaps it's the \"cleanest\" solution.",
        "attachment": null,
        "author": {
          "id": 3252122,
          "name": "Tommaso Pecorella",
          "username": "tommypec",
          "state": "active",
          "avatar_url": "https://secure.gravatar.com/avatar/96371c68958a0b5f2c056bf45a7ba86c?s=80&d=identicon",
          "web_url": "https://gitlab.com/tommypec"
        },
        "created_at": "2020-02-23T10:24:41.986Z",
        "updated_at": "2020-02-23T10:24:41.986Z",
        "system": false,
        "noteable_id": 30048780,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 136,
        "award_emoji_data": []
      },
      {
        "id": 292881911,
        "type": null,
        "body": "mentioned in issue #153",
        "attachment": null,
        "author": {
          "id": 3252122,
          "name": "Tommaso Pecorella",
          "username": "tommypec",
          "state": "active",
          "avatar_url": "https://secure.gravatar.com/avatar/96371c68958a0b5f2c056bf45a7ba86c?s=80&d=identicon",
          "web_url": "https://gitlab.com/tommypec"
        },
        "created_at": "2020-02-23T11:09:21.940Z",
        "updated_at": "2020-02-23T11:09:21.942Z",
        "system": true,
        "noteable_id": 30048780,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 136,
        "award_emoji_data": []
      },
      {
        "id": 292878410,
        "type": null,
        "body": "As a side note, for IP fragments watchdogs *would be* appropriate... but for real:\n*  There is only one timer for each fragment, it doesn't change over time,\n*  Fragments should be avoided - if there's a problem with the fragments timers, then there's a problem elsewhere (in the simulation setup).\n\nI might be wrong but I don't feel that changing the IP fragments will have a dramatic effect on the scheduler bloat. \n\nAs a side note, if there are a LOT of fragments, the solution isn't to change from Cancel to Remove, it's to have an \"internal\" scheduler to process the Fragments timeouts. Since each new fragment schedules a *fixed* timeout event, we could reduce the overall number of events by saving the expiration time in a list and have a single event running.\n\n#153 is tracking this.",
        "attachment": null,
        "author": {
          "id": 3252122,
          "name": "Tommaso Pecorella",
          "username": "tommypec",
          "state": "active",
          "avatar_url": "https://secure.gravatar.com/avatar/96371c68958a0b5f2c056bf45a7ba86c?s=80&d=identicon",
          "web_url": "https://gitlab.com/tommypec"
        },
        "created_at": "2020-02-23T10:35:40.178Z",
        "updated_at": "2020-02-23T11:09:45.990Z",
        "system": false,
        "noteable_id": 30048780,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 136,
        "award_emoji_data": []
      },
      {
        "id": 292892079,
        "type": null,
        "body": "@zahavi.eitan \n\nI tried a breakdown on the influence of the 2 Events in TCP. My numbers are these:\n\n| | change delAckEvent | change retxEvent |\n| ------ | ------ | ------ |\n| time | 2528s | 2438s |\n| memory | 5.243.776k | 1.077.272k |\n\n\nCould you please try in your system too ?\nAs is - what happens if we selectively apply your patches to Fragments only, retxEvent only, and delAckEvent only.\n\nIt's to understand if Natale's approach could have a serious effect on your case. From my test, it seems that working specifically on the retxEvent would have the most benefits.\n\nThanks,\n\nT.",
        "attachment": null,
        "author": {
          "id": 3252122,
          "name": "Tommaso Pecorella",
          "username": "tommypec",
          "state": "active",
          "avatar_url": "https://secure.gravatar.com/avatar/96371c68958a0b5f2c056bf45a7ba86c?s=80&d=identicon",
          "web_url": "https://gitlab.com/tommypec"
        },
        "created_at": "2020-02-23T12:47:14.087Z",
        "updated_at": "2020-02-23T12:47:49.192Z",
        "system": false,
        "noteable_id": 30048780,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 136,
        "award_emoji_data": []
      },
      {
        "id": 293001045,
        "type": "DiscussionNote",
        "body": "As pointed out previously, Remove does not have a linear complexity.\nEven though it is beneficial in your case, it is not at all guaranteed to provide beneficial effects when the number of events generated by TCP are the minority. On the contrary, the performance might suffer in this case.\n\nThat's why I'm so cautious about it, and that's why, even if we will opt for using Remove, I'd consider it as a temporary solutions, where the real one involves a deeper code refactoring in order to avoid unnecessary events. And that's why I asked if you could break down the performance gains between `retxEvent` and `delAckEvent` - to see which one is to be refactored first.\n\nFragments: they *could* use Watchdogs - but you'd see no performance gain at all since each packet will have its own watchdog. In the case of fragments the number of events is proportional to the number of fragmented packets, and watchdogs will not help. As I said, fragments need a completely different approach. As a side note, and I'll repeat it, tcp-bulk does not generate fragments. If your own simulation has fragments going on, then you need to reduce the TCP segment size. Dynamic segment size is something we are planning.",
        "attachment": null,
        "author": {
          "id": 3252122,
          "name": "Tommaso Pecorella",
          "username": "tommypec",
          "state": "active",
          "avatar_url": "https://secure.gravatar.com/avatar/96371c68958a0b5f2c056bf45a7ba86c?s=80&d=identicon",
          "web_url": "https://gitlab.com/tommypec"
        },
        "created_at": "2020-02-23T21:02:46.619Z",
        "updated_at": "2020-02-23T21:02:46.619Z",
        "system": false,
        "noteable_id": 30048780,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 136,
        "award_emoji_data": []
      },
      {
        "id": 292898515,
        "type": "DiscussionNote",
        "body": "Hi\n\nWhich of my patches do you refer to?\n\nMy original patch using Remove is the direction that is safe. It works in\nall  cases, it is less intrusive and was not shown to degrade performance\nin any condition reported.\n\nThe use of Watchdogs is dangerous. Their semantics are complex. E.g. there\nis no going back in time.\n\nAFAIK, and I tried, Fragments cannot be mapped to Watchdog. Read my post\nexplaining this on the thread.\n\nI don't understand why you prefer a complex dangerous change over 1 to 1\nreplacement with no indication of any degradation in performance.\n\nEitan",
        "attachment": null,
        "author": {
          "id": 5339759,
          "name": "Eitan Zahavi",
          "username": "zahavi.eitan",
          "state": "active",
          "avatar_url": "https://assets.gitlab-static.net/uploads/-/system/user/avatar/5339759/avatar.png",
          "web_url": "https://gitlab.com/zahavi.eitan"
        },
        "created_at": "2020-02-23T13:36:01.846Z",
        "updated_at": "2020-02-23T21:02:46.710Z",
        "system": false,
        "noteable_id": 30048780,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 136,
        "award_emoji_data": []
      },
      {
        "id": 293038821,
        "type": "DiscussionNote",
        "body": "Thanks Tommaso,\nI really doubt any impact will be seen on TCP using Remove. Is there any\nevidence that show it?\n\nWe agree on fragments.\nI will work to figure out why I see fragments. Is it possible the event is\ngenerated for a single fragment too?\n\nEitan",
        "attachment": null,
        "author": {
          "id": 5339759,
          "name": "Eitan Zahavi",
          "username": "zahavi.eitan",
          "state": "active",
          "avatar_url": "https://assets.gitlab-static.net/uploads/-/system/user/avatar/5339759/avatar.png",
          "web_url": "https://gitlab.com/zahavi.eitan"
        },
        "created_at": "2020-02-24T03:10:45.929Z",
        "updated_at": "2020-02-24T03:10:45.929Z",
        "system": false,
        "noteable_id": 30048780,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 136,
        "award_emoji_data": []
      },
      {
        "id": 293266243,
        "type": "DiscussionNote",
        "body": "Fragments timers work like this.\n\nWhen the IP layer sees a fragment (any fragment), it generates a \"signature\" of the packet (IPv4 and IPv6 do it in a slightly different way, but the concept is the same) based on the IP source, IP destination, and the fragment id.\n\nThen it checks in the IP fragments cache.\n*  If the signature is new, then it's a new fragment. A new buffer is created, *and the fragment timeout event is created*.\n*  If there's a matching signature, then the fragment is part of a packet that is being rebuilt. The fragment is added to the cache, and then it's processed to see if the whole packet has been received.\n\nIf the packet has been fully received, *the fragment timeout event is canceled*, the packet is rebuilt, and sent the upper layers.\n\nIf the fragment timeout fires, then the fragment cache is deleted, and an ICMP packet is sent back to notice of the error.\n\nPractically speaking, for each fragmented packet (no matter in how many fragments) only one event is generated.\n\nUsing a Watchdog is not useful (you'd have one watchdog per fragmented packet). However, if you look at the event sequences (in the figure), you can notice that we SHOULD be able to remove the events selectively, but they're never moved.\n\n[Events.pdf](/uploads/0709be7e0aa2881850245c7415378567/Events.pdf)\n\nHence, it should be possible to memorize the timeouts in a std::map<Time, Ptr<Fragments> >.\n\nWhen you create a new fragment cache for a packet, you enter a new element in the map, and you memorize its *iterator*. If the timer have to be removed, `map::erase (iterator position)` has amortized content complexity, and doesn't invalidate the other iterators.\n\nThe class holding that map, should do the following:\n\n**Map is empty, and a new element is inserted:**\n* Schedule an event for the time of the new element.\n* Add the new element\n\n**Map is not empty, and a new element is inserted:**\n* Add the new element\n\n**Event is fired**\n* Check the map. If the first element has the same time as now, then erase the fragment (and the entry in the map). If the first element has a different time, reschedule itself for that time.\n\nThis will limit the number of events to one per IP stack.",
        "attachment": null,
        "author": {
          "id": 3252122,
          "name": "Tommaso Pecorella",
          "username": "tommypec",
          "state": "active",
          "avatar_url": "https://secure.gravatar.com/avatar/96371c68958a0b5f2c056bf45a7ba86c?s=80&d=identicon",
          "web_url": "https://gitlab.com/tommypec"
        },
        "created_at": "2020-02-24T11:34:55.104Z",
        "updated_at": "2020-02-24T11:34:55.104Z",
        "system": false,
        "noteable_id": 30048780,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 136,
        "award_emoji_data": []
      },
      {
        "id": 293279334,
        "type": "DiscussionNote",
        "body": "> Hence, it should be possible to memorize the timeouts in a std::map<Time, Ptr >.\n\nPlease consider that\n\n1. In std::map, the key have to be unique (one Ptr for one specific time)\n2. Insert/find/removal are O(log n), so the complexity is still there\n\nGiving the above, is it still the best possible data structure?",
        "attachment": null,
        "author": {
          "id": 2478411,
          "name": "N.",
          "username": "natale-p",
          "state": "active",
          "avatar_url": "https://secure.gravatar.com/avatar/e33019e1a35ee6c6f38175dc0f4d3cb1?s=80&d=identicon",
          "web_url": "https://gitlab.com/natale-p"
        },
        "created_at": "2020-02-24T11:55:07.405Z",
        "updated_at": "2020-02-24T11:55:07.405Z",
        "system": false,
        "noteable_id": 30048780,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 136,
        "award_emoji_data": []
      },
      {
        "id": 293508020,
        "type": "DiscussionNote",
        "body": "1: Good point.\n\nAt first one could say that it's impossible to receive two (fragments) of two packets at the very same time. However... it *could* be possible if the packets are aggregated into some super-structure. I'll use something more unique (e.g., Time+FragmentId)\n\n2: Insert/find/removal are O(log n), *but* erase isn't (necessarily) O(log n).\n\nSee http://www.cplusplus.com/reference/map/map/erase/\n*  **Complexity:** For the first version (erase(position)), amortized constant.\n*  **Iterator validity:**  Iterators, pointers and references referring to elements removed by the function are invalidated. All other iterators, pointers and references keep their validity.\n\nShortly put: removing an element from a map *by key* is O(log n) but if you know its position, then it's O(1).",
        "attachment": null,
        "author": {
          "id": 3252122,
          "name": "Tommaso Pecorella",
          "username": "tommypec",
          "state": "active",
          "avatar_url": "https://secure.gravatar.com/avatar/96371c68958a0b5f2c056bf45a7ba86c?s=80&d=identicon",
          "web_url": "https://gitlab.com/tommypec"
        },
        "created_at": "2020-02-24T17:38:04.985Z",
        "updated_at": "2020-02-24T17:38:04.985Z",
        "system": false,
        "noteable_id": 30048780,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 136,
        "award_emoji_data": []
      },
      {
        "id": 293512571,
        "type": "DiscussionNote",
        "body": "As a side note, to insert a new element we can use `map::emplace_hint`, because any new element will be for sure inserted at the \"end\" of the map.\n\nStill... also a list could do. I'll work on the concept.",
        "attachment": null,
        "author": {
          "id": 3252122,
          "name": "Tommaso Pecorella",
          "username": "tommypec",
          "state": "active",
          "avatar_url": "https://secure.gravatar.com/avatar/96371c68958a0b5f2c056bf45a7ba86c?s=80&d=identicon",
          "web_url": "https://gitlab.com/tommypec"
        },
        "created_at": "2020-02-24T17:46:04.243Z",
        "updated_at": "2020-02-24T17:46:04.243Z",
        "system": false,
        "noteable_id": 30048780,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 136,
        "award_emoji_data": []
      },
      {
        "id": 293534100,
        "type": "DiscussionNote",
        "body": "You assume all delays are the same. This not necessarily true.",
        "attachment": null,
        "author": {
          "id": 5339759,
          "name": "Eitan Zahavi",
          "username": "zahavi.eitan",
          "state": "active",
          "avatar_url": "https://assets.gitlab-static.net/uploads/-/system/user/avatar/5339759/avatar.png",
          "web_url": "https://gitlab.com/zahavi.eitan"
        },
        "created_at": "2020-02-24T18:30:40.300Z",
        "updated_at": "2020-02-24T18:30:40.300Z",
        "system": false,
        "noteable_id": 30048780,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 136,
        "award_emoji_data": []
      },
      {
        "id": 293602336,
        "type": null,
        "body": "I'd be cautious of assuming too much knowledge of the complexity of insert, cancel, remove.  These will be dependent on the Scheduler implementation used.  A given model (TCP in this case), shouldn't normally be conditioned on those details.",
        "attachment": null,
        "author": {
          "id": 1138790,
          "name": "Peter Barnes",
          "username": "pdbj",
          "state": "active",
          "avatar_url": "https://secure.gravatar.com/avatar/0c66458167197aab9685021d93b141b9?s=80&d=identicon",
          "web_url": "https://gitlab.com/pdbj"
        },
        "created_at": "2020-02-24T20:56:00.603Z",
        "updated_at": "2020-02-24T20:56:00.603Z",
        "system": false,
        "noteable_id": 30048780,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 136,
        "award_emoji_data": []
      },
      {
        "id": 293618009,
        "type": "DiscussionNote",
        "body": "For fragments it is. The timer is node-dependent and it's the same for each and every fragmented packet.",
        "attachment": null,
        "author": {
          "id": 3252122,
          "name": "Tommaso Pecorella",
          "username": "tommypec",
          "state": "active",
          "avatar_url": "https://secure.gravatar.com/avatar/96371c68958a0b5f2c056bf45a7ba86c?s=80&d=identicon",
          "web_url": "https://gitlab.com/tommypec"
        },
        "created_at": "2020-02-24T21:47:48.161Z",
        "updated_at": "2020-02-24T21:47:48.161Z",
        "system": false,
        "noteable_id": 30048780,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 136,
        "award_emoji_data": []
      },
      {
        "id": 294472557,
        "type": null,
        "body": "mentioned in merge request !200",
        "attachment": null,
        "author": {
          "id": 3252122,
          "name": "Tommaso Pecorella",
          "username": "tommypec",
          "state": "active",
          "avatar_url": "https://secure.gravatar.com/avatar/96371c68958a0b5f2c056bf45a7ba86c?s=80&d=identicon",
          "web_url": "https://gitlab.com/tommypec"
        },
        "created_at": "2020-02-26T09:28:39.510Z",
        "updated_at": "2020-02-26T09:28:39.512Z",
        "system": true,
        "noteable_id": 30048780,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 136,
        "award_emoji_data": []
      },
      {
        "id": 294603111,
        "type": "DiscussionNote",
        "body": "The patch is complete for IPv4, IPv6, and SixLoWPAN.\nAll tests are green, including Valgrind.",
        "attachment": null,
        "author": {
          "id": 3252122,
          "name": "Tommaso Pecorella",
          "username": "tommypec",
          "state": "active",
          "avatar_url": "https://secure.gravatar.com/avatar/96371c68958a0b5f2c056bf45a7ba86c?s=80&d=identicon",
          "web_url": "https://gitlab.com/tommypec"
        },
        "created_at": "2020-02-26T12:33:49.498Z",
        "updated_at": "2020-02-26T12:33:49.498Z",
        "system": false,
        "noteable_id": 30048780,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 136,
        "award_emoji_data": []
      },
      {
        "id": 293653364,
        "type": "DiscussionNote",
        "body": "I made a new repo to work on fragments event optimization: https://gitlab.com/tommypec/ns-3-dev/-/tree/FragmentOptimization\n\nSo far I optimized IPv6, and it seems to work as intended. As a side note, I used lists, since they're more failsafe than maps for concurrent events.",
        "attachment": null,
        "author": {
          "id": 3252122,
          "name": "Tommaso Pecorella",
          "username": "tommypec",
          "state": "active",
          "avatar_url": "https://secure.gravatar.com/avatar/96371c68958a0b5f2c056bf45a7ba86c?s=80&d=identicon",
          "web_url": "https://gitlab.com/tommypec"
        },
        "created_at": "2020-02-25T00:13:50.460Z",
        "updated_at": "2020-02-26T12:33:49.623Z",
        "system": false,
        "noteable_id": 30048780,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 136,
        "award_emoji_data": []
      },
      {
        "id": 300444008,
        "type": "DiscussionNote",
        "body": "The patch does not apply to \"recent\" ns-3. Attached it's an updated version.\n[NatTcpOptimization.diff](/uploads/3847ce56b60e7b41677cfa9842d80670/NatTcpOptimization.diff)",
        "attachment": null,
        "author": {
          "id": 3252122,
          "name": "Tommaso Pecorella",
          "username": "tommypec",
          "state": "active",
          "avatar_url": "https://secure.gravatar.com/avatar/96371c68958a0b5f2c056bf45a7ba86c?s=80&d=identicon",
          "web_url": "https://gitlab.com/tommypec"
        },
        "created_at": "2020-03-06T12:59:42.456Z",
        "updated_at": "2020-03-06T12:59:42.456Z",
        "system": false,
        "noteable_id": 30048780,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 136,
        "award_emoji_data": []
      },
      {
        "id": 293177840,
        "type": "DiscussionNote",
        "body": "[event_saving-v2.patch](/uploads/97ee516df65c9b96e6ebceaa099f3669/event_saving-v2.patch)\n\nCan someone try this patch? It is only for RTOs (it must be adapted for delay acks)\n\nthanks",
        "attachment": null,
        "author": {
          "id": 2478411,
          "name": "N.",
          "username": "natale-p",
          "state": "active",
          "avatar_url": "https://secure.gravatar.com/avatar/e33019e1a35ee6c6f38175dc0f4d3cb1?s=80&d=identicon",
          "web_url": "https://gitlab.com/natale-p"
        },
        "created_at": "2020-02-24T09:27:14.973Z",
        "updated_at": "2020-03-06T12:59:42.566Z",
        "system": false,
        "noteable_id": 30048780,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 136,
        "award_emoji_data": []
      },
      {
        "id": 300498597,
        "type": "DiscussionNote",
        "body": "@zahavi.eitan Could you please check that NatTcpOptimization.diff resolves your performance issue?  If so, any objections to pushing it?  I would only suggest that a comment be added to the patch such as:\n```\n// Lazy scheduling of timeout events, for performance (see issue #136)\n```",
        "attachment": null,
        "author": {
          "id": 2480280,
          "name": "Tom Henderson",
          "username": "tomhenderson",
          "state": "active",
          "avatar_url": "https://secure.gravatar.com/avatar/5f2e81000565ed63707a582858ff0964?s=80&d=identicon",
          "web_url": "https://gitlab.com/tomhenderson"
        },
        "created_at": "2020-03-06T14:04:14.744Z",
        "updated_at": "2020-03-06T14:04:14.744Z",
        "system": false,
        "noteable_id": 30048780,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 136,
        "award_emoji_data": []
      },
      {
        "id": 300498937,
        "type": "DiscussionNote",
        "body": "Do you mind rebasing that branch of yours?",
        "attachment": null,
        "author": {
          "id": 2480280,
          "name": "Tom Henderson",
          "username": "tomhenderson",
          "state": "active",
          "avatar_url": "https://secure.gravatar.com/avatar/5f2e81000565ed63707a582858ff0964?s=80&d=identicon",
          "web_url": "https://gitlab.com/tomhenderson"
        },
        "created_at": "2020-03-06T14:04:45.261Z",
        "updated_at": "2020-03-06T14:04:45.261Z",
        "system": false,
        "noteable_id": 30048780,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 136,
        "award_emoji_data": []
      },
      {
        "id": 300501493,
        "type": "DiscussionNote",
        "body": "The result of my test are:\n\n| | Old | New | Difference |\n| ------ | ------ | ------ | ------ |\n| time | 43:23.80 | 42:04.56 | 3.04% decrease |\n| memory | 6285616k | 1077300k | 82.86% decrease |\n\nThe time is not really much less, perhaps because my computer have enough RAM to not have swap issues.",
        "attachment": null,
        "author": {
          "id": 3252122,
          "name": "Tommaso Pecorella",
          "username": "tommypec",
          "state": "active",
          "avatar_url": "https://secure.gravatar.com/avatar/96371c68958a0b5f2c056bf45a7ba86c?s=80&d=identicon",
          "web_url": "https://gitlab.com/tommypec"
        },
        "created_at": "2020-03-06T14:08:25.433Z",
        "updated_at": "2020-03-06T14:08:25.433Z",
        "system": false,
        "noteable_id": 30048780,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 136,
        "award_emoji_data": []
      },
      {
        "id": 300505950,
        "type": "DiscussionNote",
        "body": "It's updated to the very latest ns-3-dev",
        "attachment": null,
        "author": {
          "id": 3252122,
          "name": "Tommaso Pecorella",
          "username": "tommypec",
          "state": "active",
          "avatar_url": "https://secure.gravatar.com/avatar/96371c68958a0b5f2c056bf45a7ba86c?s=80&d=identicon",
          "web_url": "https://gitlab.com/tommypec"
        },
        "created_at": "2020-03-06T14:14:36.207Z",
        "updated_at": "2020-03-06T14:14:36.207Z",
        "system": false,
        "noteable_id": 30048780,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 136,
        "award_emoji_data": []
      },
      {
        "id": 300502990,
        "type": "DiscussionNote",
        "body": "As a side note, with this patch some tests are either failing or crashing:\n```\nList of FAILed tests:\n    tcp-rto-test\nList of CRASHed tests:\n    tcp-fast-retr-test\n```\n\nI think they're the tests directly checking the status of the changed timers.",
        "attachment": null,
        "author": {
          "id": 3252122,
          "name": "Tommaso Pecorella",
          "username": "tommypec",
          "state": "active",
          "avatar_url": "https://secure.gravatar.com/avatar/96371c68958a0b5f2c056bf45a7ba86c?s=80&d=identicon",
          "web_url": "https://gitlab.com/tommypec"
        },
        "created_at": "2020-03-06T14:10:32.216Z",
        "updated_at": "2020-03-06T14:15:17.047Z",
        "system": false,
        "noteable_id": 30048780,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 136,
        "award_emoji_data": []
      },
      {
        "id": 300604228,
        "type": "DiscussionNote",
        "body": "Will check on Sun.",
        "attachment": null,
        "author": {
          "id": 5339759,
          "name": "Eitan Zahavi",
          "username": "zahavi.eitan",
          "state": "active",
          "avatar_url": "https://assets.gitlab-static.net/uploads/-/system/user/avatar/5339759/avatar.png",
          "web_url": "https://gitlab.com/zahavi.eitan"
        },
        "created_at": "2020-03-06T16:33:26.924Z",
        "updated_at": "2020-03-06T16:33:26.924Z",
        "system": false,
        "noteable_id": 30048780,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 136,
        "award_emoji_data": []
      },
      {
        "id": 301202910,
        "type": null,
        "body": "I started working on this. Used the patch NatTcpOptimization.diff from above.\n2 tests indeed crash and fail.\nThey indeed were false failures. I changed the callback to return if \"IsTrue\" event. \nThen the tests to take that into account (don't run post RTO event if not real). \nNow they pass.\n\nI don't have your patch for the fragment fix. \nFor NatTcpOptimization.diff without it I get the last line:\n\n| Code    | Mode          | time [s] | Memory [B]|\n|---------|---------------|---------|-----------|\n| Base    | Cancel(event) | 2084.09 | 6,218,552 |\n| Patch1  | Remove(event) | 1959.44 | 47,420    |\n| Patch2  | Watchdog      | 2173.98 | 6,284,952 |\n| NatTcpOpt| Delay reTxTimer| 2196.97 | 6,234,924 | \n\nIf you send me the patch of fragmentation timer fix I will re-run with it.\n\nEitan",
        "attachment": null,
        "author": {
          "id": 5339759,
          "name": "Eitan Zahavi",
          "username": "zahavi.eitan",
          "state": "active",
          "avatar_url": "https://assets.gitlab-static.net/uploads/-/system/user/avatar/5339759/avatar.png",
          "web_url": "https://gitlab.com/zahavi.eitan"
        },
        "created_at": "2020-03-07T16:51:29.428Z",
        "updated_at": "2020-03-07T16:51:29.428Z",
        "system": false,
        "noteable_id": 30048780,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 136,
        "award_emoji_data": []
      },
      {
        "id": 301304647,
        "type": null,
        "body": "Your tests are not in line with what I got. I did run your test program and my results are in an earlier post. What is strange to me is that \"NatTcpOpt\" should be better than the \"Base\". Please double check. \n\nThe fragmentation patch is in a merge request: !200",
        "attachment": null,
        "author": {
          "id": 3252122,
          "name": "Tommaso Pecorella",
          "username": "tommypec",
          "state": "active",
          "avatar_url": "https://secure.gravatar.com/avatar/96371c68958a0b5f2c056bf45a7ba86c?s=80&d=identicon",
          "web_url": "https://gitlab.com/tommypec"
        },
        "created_at": "2020-03-08T01:41:15.177Z",
        "updated_at": "2020-03-08T01:44:34.498Z",
        "system": false,
        "noteable_id": 30048780,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 136,
        "award_emoji_data": []
      },
      {
        "id": 301350419,
        "type": null,
        "body": "I downloaded your branch and applied the application patch and the NetTcpOptimize patch. \nI re-run optimized compile of \n\n| Code    | Mode          | time [s] | Memory [B]| Run by | \n|---------|---------------|---------|-----------|---------|\n| Base    | Cancel(event) | 2084.09 | 6,218,552 | Eitan |\n| Patch1  | Remove(event) | 1959.44 | 47,420    | Eitan |\n| Patch2  | Watchdog      | 2173.98 | 6,284,952 | Eitan |\n| NatTcpOpt| Delay reTxTimer| 2196.97 | 6,234,924 | Eitan |\n| Frag branch| Fragmentation 1 timer | 2524.56 | 1,077,300 | Tommaso |\n| Frag branch + NetTcpOpt| Fragmentation 1Timer + Delay reTxTimer | 2035.67 | 1,089,036 |  Eitan |\n\nClearly Patch1 is much better than the rest of them.\n\nEitan",
        "attachment": null,
        "author": {
          "id": 5339759,
          "name": "Eitan Zahavi",
          "username": "zahavi.eitan",
          "state": "active",
          "avatar_url": "https://assets.gitlab-static.net/uploads/-/system/user/avatar/5339759/avatar.png",
          "web_url": "https://gitlab.com/zahavi.eitan"
        },
        "created_at": "2020-03-08T09:42:03.705Z",
        "updated_at": "2020-03-08T09:43:08.966Z",
        "system": false,
        "noteable_id": 30048780,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 136,
        "award_emoji_data": []
      },
      {
        "id": 301381884,
        "type": null,
        "body": "Dear Eitan,\n\nno matter how much you push, and no matter how much *your* test performs, we did point out multiple times that your test is a very edge case.\n\nWe did point out multiple times that using Remove does have drawbacks, and that we can *not* apply a patch to ns-3 that might be beneficial to one case but have heavy drawbacks for all the other cases.\n\nAs a consequence, please don't try to keep pushing toward the use of Remove because, unless we can prove that it's not affecting all the other use cases, it's not going to happen. Point.\n\nTry to run the perforce tests (check the manual) and see what happens in these cases.",
        "attachment": null,
        "author": {
          "id": 3252122,
          "name": "Tommaso Pecorella",
          "username": "tommypec",
          "state": "active",
          "avatar_url": "https://secure.gravatar.com/avatar/96371c68958a0b5f2c056bf45a7ba86c?s=80&d=identicon",
          "web_url": "https://gitlab.com/tommypec"
        },
        "created_at": "2020-03-08T13:58:25.683Z",
        "updated_at": "2020-03-08T13:58:25.683Z",
        "system": false,
        "noteable_id": 30048780,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 136,
        "award_emoji_data": []
      },
      {
        "id": 301399623,
        "type": null,
        "body": "Hi Tommaso,\nI have no intention to degrade NS3 in any way. Sorry if it seemed that way.\nI am using NS3 for many smaller scale tests where the last thing I want is\nto degrade it.\n\nI am sorry but can' t find \"perforce tests\".\nDo you mean test.py --kind performance? I will run those on your\nfragmentation !200 candidate and on the main truck with patch1 .\n\nIf there are other tests you would like me to do - please let me know.\n\nThanks\nEitan",
        "attachment": null,
        "author": {
          "id": 5339759,
          "name": "Eitan Zahavi",
          "username": "zahavi.eitan",
          "state": "active",
          "avatar_url": "https://assets.gitlab-static.net/uploads/-/system/user/avatar/5339759/avatar.png",
          "web_url": "https://gitlab.com/zahavi.eitan"
        },
        "created_at": "2020-03-08T15:15:57.126Z",
        "updated_at": "2020-03-08T15:15:57.126Z",
        "system": false,
        "noteable_id": 30048780,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 136,
        "award_emoji_data": []
      },
      {
        "id": 301510458,
        "type": null,
        "body": "Eitan, we do have a performance test category (yes, --kind performance), but I am not aware of any such tests that would be useful in this regard.  There are very few such tests.\n\nSince the impact you show is so large, it seems to me that the onus is perhaps now on us to find cases that would highlight that Remove() is a bad idea here.  I will try to look into this further (I confess to not tracking this thread closely so far).",
        "attachment": null,
        "author": {
          "id": 2480280,
          "name": "Tom Henderson",
          "username": "tomhenderson",
          "state": "active",
          "avatar_url": "https://secure.gravatar.com/avatar/5f2e81000565ed63707a582858ff0964?s=80&d=identicon",
          "web_url": "https://gitlab.com/tomhenderson"
        },
        "created_at": "2020-03-09T05:01:29.389Z",
        "updated_at": "2020-03-09T05:01:29.389Z",
        "system": false,
        "noteable_id": 30048780,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 136,
        "award_emoji_data": []
      },
      {
        "id": 301396682,
        "type": "DiscussionNote",
        "body": "Hi Tommaso,\n\nSure I will run whatever set of tests you find interesting. Will let you\nknow my results.\n\nEitan",
        "attachment": null,
        "author": {
          "id": 5339759,
          "name": "Eitan Zahavi",
          "username": "zahavi.eitan",
          "state": "active",
          "avatar_url": "https://assets.gitlab-static.net/uploads/-/system/user/avatar/5339759/avatar.png",
          "web_url": "https://gitlab.com/zahavi.eitan"
        },
        "created_at": "2020-03-08T14:56:07.041Z",
        "updated_at": "2020-03-09T07:43:57.314Z",
        "system": false,
        "noteable_id": 30048780,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 136,
        "award_emoji_data": []
      },
      {
        "id": 301574406,
        "type": "DiscussionNote",
        "body": "I fixed a horrible mistake I made in the Fragmentation patch. Please run it again, it now should reduce the execution time (and perhaps also the memory).\n\nIf the tests are positive (i.e., execution time reduced), I'll push it.\n\nIf you don't mind please run these 3 tests:\n1.  Normal run\n2.  Just fragments-related Cancel changed to Remove\n3.  My patch\n\nIf I'm right, my patch should be better than the other options - simply because fragments, when they do happen, go in bursts, i.e., you have always at least one fragment timer going on.\n\nWith my patch, every fragmentTimeout (30 or 60 seconds) there is a \"real\" event firing and cleaning its own stuff. In the best case this event will just reschedule itself for somewhere in the future. At this point the frequency of this cleanup event will be extremely close - but this is something you can't possibly avoid (unless you avoid fragments, which is something you should always try to).",
        "attachment": null,
        "author": {
          "id": 3252122,
          "name": "Tommaso Pecorella",
          "username": "tommypec",
          "state": "active",
          "avatar_url": "https://secure.gravatar.com/avatar/96371c68958a0b5f2c056bf45a7ba86c?s=80&d=identicon",
          "web_url": "https://gitlab.com/tommypec"
        },
        "created_at": "2020-03-09T07:43:57.212Z",
        "updated_at": "2020-03-09T08:00:37.892Z",
        "system": false,
        "noteable_id": 30048780,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 136,
        "award_emoji_data": []
      },
      {
        "id": 301755400,
        "type": "DiscussionNote",
        "body": "Hi Tommaso, I want to make sure I indeed use the correct code version.\nI cloned https://gitlab.com/tommypec/ns-3-dev and see version: 9e2d989eb9ccdb672b5f2866834d98b9c45e0449\nthen I checkout your branch. \nWhen running I see some small improvement on runtime compared to ns-3-dev repo.\nBut memory is still pretty bad.\nIs that the version you wanted me to look at?\nEitan",
        "attachment": null,
        "author": {
          "id": 5339759,
          "name": "Eitan Zahavi",
          "username": "zahavi.eitan",
          "state": "active",
          "avatar_url": "https://assets.gitlab-static.net/uploads/-/system/user/avatar/5339759/avatar.png",
          "web_url": "https://gitlab.com/zahavi.eitan"
        },
        "created_at": "2020-03-09T12:44:28.895Z",
        "updated_at": "2020-03-09T12:44:28.895Z",
        "system": false,
        "noteable_id": 30048780,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 136,
        "award_emoji_data": []
      },
      {
        "id": 301828028,
        "type": "DiscussionNote",
        "body": "Hi Tommaso,\nI have performed the tests you were asking for. Apparently, most of memory bloat happens in tcp-socket-base.cc which you requested to keep unchanged.\n\n| Test | Line speed |  Line Latency | Command |\n|-----|---|----|----|\n| Test 1 | 400Gbps|1usec |./build/examples/tcp/ns3-dev-tcp-bulk-send-optimized --stop=1 --latency=1us --dataRate=400Gbps --maxBytes=10000000000000 |\n| Test 2 | 10Kbps| 5msec | ./build/examples/tcp/ns3-dev-tcp-bulk-send-optimized --stop=10000000 --maxBytes=10000000000000 |\n\nHere are the results:\n\n| git repo                                 | branch               | code rev                                          | runtime sec | max vmem KB | test                                                                                                                     |\n|------------------------------------------|----------------------|---------------------------------------------------|-------------|-------------|--------------------------------------------------------------------------------------------------------------------------|\n| https://gitlab.com/nsnam/ns-3-dev        | master               | b08bb7898a6e2f2149d7699a3bccdd6cbf279aa1          | 2086.97     | 6201920     | Test 1 |\n| https://gitlab.com/tommypec/ns-3-dev.git | FragmentOptimization | 9e2d989eb9ccdb672b5f2866834d98b9c45e0449          | 2047.05     | 6297096     | Test 1 |\n| https://gitlab.com/nsnam/ns-3-dev        | master               | Replace Cancel with Remove in ipv4-l3-protocol.cc | 2106.14     | 6297092     | Test 1 |\n| https://gitlab.com/nsnam/ns-3-dev        | master               | b08bb7898a6e2f2149d7699a3bccdd6cbf279aa1          | 607.73      | 48008       | Test 2 |\n| https://gitlab.com/tommypec/ns-3-dev.git | FragmentOptimization | 9e2d989eb9ccdb672b5f2866834d98b9c45e0449          | 652.66      | 47900   | Test 2 |\n| https://gitlab.com/nsnam/ns-3-dev        | master               | Replace Cancel with Remove in ipv4-l3-protocol.cc | 603.45      | 48008       | Test 2 |",
        "attachment": null,
        "author": {
          "id": 5339759,
          "name": "Eitan Zahavi",
          "username": "zahavi.eitan",
          "state": "active",
          "avatar_url": "https://assets.gitlab-static.net/uploads/-/system/user/avatar/5339759/avatar.png",
          "web_url": "https://gitlab.com/zahavi.eitan"
        },
        "created_at": "2020-03-09T14:27:07.333Z",
        "updated_at": "2020-03-09T14:36:14.439Z",
        "system": false,
        "noteable_id": 30048780,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 136,
        "award_emoji_data": []
      },
      {
        "id": 302063983,
        "type": "DiscussionNote",
        "body": "Could you please number the code versions, for ease of discussion?  I've lost track of which is which.  Several of the lines refer to the same repo and branch, but don't give a hash or other stable reference.\n\nCould you please remind me what the two tests are?",
        "attachment": null,
        "author": {
          "id": 1138790,
          "name": "Peter Barnes",
          "username": "pdbj",
          "state": "active",
          "avatar_url": "https://secure.gravatar.com/avatar/0c66458167197aab9685021d93b141b9?s=80&d=identicon",
          "web_url": "https://gitlab.com/pdbj"
        },
        "created_at": "2020-03-09T20:24:10.001Z",
        "updated_at": "2020-03-09T20:24:10.001Z",
        "system": false,
        "noteable_id": 30048780,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 136,
        "award_emoji_data": []
      },
      {
        "id": 302090044,
        "type": "DiscussionNote",
        "body": "For Test 1 the two low memory versions differ by only about 4.5% in time.\n\nFor Test 2, those same two differ by 0.6% in time, and 0.05% in memory.\n\nSo purely on performance for these two tests I can't see strong reason to favor one over the other.",
        "attachment": null,
        "author": {
          "id": 1138790,
          "name": "Peter Barnes",
          "username": "pdbj",
          "state": "active",
          "avatar_url": "https://secure.gravatar.com/avatar/0c66458167197aab9685021d93b141b9?s=80&d=identicon",
          "web_url": "https://gitlab.com/pdbj"
        },
        "created_at": "2020-03-09T21:09:48.871Z",
        "updated_at": "2020-03-09T21:09:48.871Z",
        "system": false,
        "noteable_id": 30048780,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 136,
        "award_emoji_data": []
      },
      {
        "id": 302210773,
        "type": null,
        "body": "Hi,\n\nI have posted as a reply to the previous exchange the longer list of test as Tommaso requested.\nTo get some feeling for what is the performance difference for much lower wire speed and larger latency I added Test 2.\nNote that these tests are of a single TCP connection/flow. The larger the number of flows, the higher the number of cancelled events will be.\n\nFor Test 1: 400Gbps / 1us both FragmentsOptimization branch and patch1 on top of master have similar memory footprint. Runtime wise FragmentsOptimization branch is 2,175 vs. patch1 2,079 = 4.4%.\n\nFor Test 2: 10Kbps / 5ms there is no memory bloat problem and runtime difference of above options is 595 vs. 588 = 1.1%\n\nIf there is any specific test you would like me to run and to validate patch1 is not \"risky\" in other scenarios, I will do it.\n\nEitan",
        "attachment": null,
        "author": {
          "id": 5339759,
          "name": "Eitan Zahavi",
          "username": "zahavi.eitan",
          "state": "active",
          "avatar_url": "https://assets.gitlab-static.net/uploads/-/system/user/avatar/5339759/avatar.png",
          "web_url": "https://gitlab.com/zahavi.eitan"
        },
        "created_at": "2020-03-10T06:33:14.664Z",
        "updated_at": "2020-03-10T06:33:14.664Z",
        "system": false,
        "noteable_id": 30048780,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 136,
        "award_emoji_data": []
      },
      {
        "id": 302270698,
        "type": null,
        "body": "Hi Eitan,\nplease share the tests script you're using. In particular for Test 2 I see strange numbers. What is puzzling is the between the \"base\" ns-3 and my FragmentOptimization patch, the execution time should actually decrease (in your test is increasing).\n\nAbout the whole patch ordeal, I'd like to stress that FragmentOptimization and TCP are really two orthogonal and not related patches. (and I'd like to not mix them).\n\nThanks.",
        "attachment": null,
        "author": {
          "id": 3252122,
          "name": "Tommaso Pecorella",
          "username": "tommypec",
          "state": "active",
          "avatar_url": "https://secure.gravatar.com/avatar/96371c68958a0b5f2c056bf45a7ba86c?s=80&d=identicon",
          "web_url": "https://gitlab.com/tommypec"
        },
        "created_at": "2020-03-10T08:50:55.287Z",
        "updated_at": "2020-03-10T08:50:55.287Z",
        "system": false,
        "noteable_id": 30048780,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 136,
        "award_emoji_data": []
      },
      {
        "id": 302570143,
        "type": "DiscussionNote",
        "body": "Hi Peter,\nCode versions are included. For master b08bb789 and the patch is [ns-git.avoid-scheuler-bloat.patch](/uploads/f08c5496e960ed102fc9450721af9475/ns-git.avoid-scheuler-bloat.patch) on top of it.\nFor FragmentOptimization the revision is: 9e2d989e. Then I applied just the tcp-socket-base.cc of same patch.\n\nI answered below about the tests. It is the example examples/tcp/tcp-bulk-send.cc.\nFor Test 1: 400Gbps / 1us \nFor Test 2: 10Kbps / 5ms \n\nEitan",
        "attachment": null,
        "author": {
          "id": 5339759,
          "name": "Eitan Zahavi",
          "username": "zahavi.eitan",
          "state": "active",
          "avatar_url": "https://assets.gitlab-static.net/uploads/-/system/user/avatar/5339759/avatar.png",
          "web_url": "https://gitlab.com/zahavi.eitan"
        },
        "created_at": "2020-03-10T15:10:28.828Z",
        "updated_at": "2020-03-10T15:10:28.828Z",
        "system": false,
        "noteable_id": 30048780,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 136,
        "award_emoji_data": []
      },
      {
        "id": 302056973,
        "type": "DiscussionNote",
        "body": "An update. I have added the patch for tcp-socket-base. Both to the FragmentOptimization branch and master.\nAs you can see the original Patch1 is better in both high bandwidth and low bandwidth cases.\n\nEitan\n\n| git repo                                 | branch               | code rev                                             |  runtime sec  |  max vmem KB  | Test |\n|------------------------------------------|----------------------|------------------------------------------------------|---------------|---------------|----|\n| https://gitlab.com/nsnam/ns-3-dev        | master               | b08bb7898a6e2f2149d7699a3bccdd6cbf279aa1             |  2,087        |  6,201,920    | Test 1 |\n| https://gitlab.com/nsnam/ns-3-dev        | master               | b08bb7898a6e2f2149d7699a3bccdd6cbf279aa1 + Replace Cancel with Remove in ipv4-l3-protocol.cc    |  2,106        |  6,297,092    |  Test 1 |\n| https://gitlab.com/nsnam/ns-3-dev        | master               | b08bb7898a6e2f2149d7699a3bccdd6cbf279aa1 + Remove in ipv4-l3-protocol.cc and tcp-socket-base.cc |  2,079        |  47,420       | Test 1 |\n| https://gitlab.com/tommypec/ns-3-dev.git | FragmentOptimization | 9e2d989eb9ccdb672b5f2866834d98b9c45e0449             |  2,047        |  6,297,096    | Test 1 |\n| https://gitlab.com/tommypec/ns-3-dev.git | FragmentOptimization | 9e2d989eb9ccdb672b5f2866834d98b9c45e0449 + Remove() of tcp-socket-base.cc            |  2,175        |  47,424       | Test 1 |\n| https://gitlab.com/nsnam/ns-3-dev        | master               | b08bb7898a6e2f2149d7699a3bccdd6cbf279aa1             |  608          |  48,008       |Test 2|\n| https://gitlab.com/nsnam/ns-3-dev        | master               | b08bb7898a6e2f2149d7699a3bccdd6cbf279aa1 + Replace Cancel with Remove in ipv4-l3-protocol.cc    |  603          |  48,008       |Test 2|\n| https://gitlab.com/nsnam/ns-3-dev        | master               | b08bb7898a6e2f2149d7699a3bccdd6cbf279aa1 + Remove in ipv4-l3-protocol.cc and tcp-socket-base.cc |  588          |  48,056       |Test 2|\n| https://gitlab.com/tommypec/ns-3-dev.git | FragmentOptimization | 9e2d989eb9ccdb672b5f2866834d98b9c45e0449             |  653          |  47,900       |Test 2|\n| https://gitlab.com/tommypec/ns-3-dev.git | FragmentOptimization | 9e2d989eb9ccdb672b5f2866834d98b9c45e0449 + Remove() of tcp-socket-base.cc            |  595          |  48,008       |Test 2|",
        "attachment": null,
        "author": {
          "id": 5339759,
          "name": "Eitan Zahavi",
          "username": "zahavi.eitan",
          "state": "active",
          "avatar_url": "https://assets.gitlab-static.net/uploads/-/system/user/avatar/5339759/avatar.png",
          "web_url": "https://gitlab.com/zahavi.eitan"
        },
        "created_at": "2020-03-09T20:06:55.038Z",
        "updated_at": "2020-03-10T15:20:19.244Z",
        "system": false,
        "noteable_id": 30048780,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 136,
        "award_emoji_data": []
      },
      {
        "id": 302800805,
        "type": "DiscussionNote",
        "body": "Please attach a script, not a patch. Moreover, what's the difference between \"Test 1\" and \"Test 2\" ?",
        "attachment": null,
        "author": {
          "id": 3252122,
          "name": "Tommaso Pecorella",
          "username": "tommypec",
          "state": "active",
          "avatar_url": "https://secure.gravatar.com/avatar/96371c68958a0b5f2c056bf45a7ba86c?s=80&d=identicon",
          "web_url": "https://gitlab.com/tommypec"
        },
        "created_at": "2020-03-10T21:56:11.767Z",
        "updated_at": "2020-03-10T21:56:11.767Z",
        "system": false,
        "noteable_id": 30048780,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 136,
        "award_emoji_data": []
      },
      {
        "id": 302301044,
        "type": "DiscussionNote",
        "body": "Hi Tommaso, \n\nI agree we are talking about two layers that do not have to be improved in one patch.\n\nYou are welcome to reproduce my runs. I only run that once. But I used same machine and setup.\nAttached is the patch I did to the pre-existing example: examples/tcp/tcp-bulk-send.cc\n[ns-3-git.tcp-bulk-send-example.diff](/uploads/33ebe6dbc97183903c7586b0190dd6fe/ns-3-git.tcp-bulk-send-example.diff)\n\nThe example opens up a socket and send a long message. The patch allows control over wire speed, latency and runtime.\n\nEitan",
        "attachment": null,
        "author": {
          "id": 5339759,
          "name": "Eitan Zahavi",
          "username": "zahavi.eitan",
          "state": "active",
          "avatar_url": "https://assets.gitlab-static.net/uploads/-/system/user/avatar/5339759/avatar.png",
          "web_url": "https://gitlab.com/zahavi.eitan"
        },
        "created_at": "2020-03-10T09:37:02.668Z",
        "updated_at": "2020-03-10T21:56:11.866Z",
        "system": false,
        "noteable_id": 30048780,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 136,
        "award_emoji_data": []
      },
      {
        "id": 303011132,
        "type": "DiscussionNote",
        "body": "Hi Tommaso,\n\nI have no \"script\" to run the example code tcp-bulk-send that is available after compilation with --enable-examples under ./build/examples/tcp/ns3-dev-tcp-bulk-send-optimized.\n\nThis example simply setup a two nodes system with the bandwidth and wire latency provided. Then send a single message of the given size (described in the attached example code):\n[tcp-bulk-send.cc](/uploads/c0700875a37846e5ea449507b8bc575e/tcp-bulk-send.cc)\n\n\nThe tests parameters and how to run them is described in some email above above (?)\n\n| Test | Line speed |  Line Latency | Command run from top of NS3 dir|\n|-----|---|----|----|\n| Test 1 | 400Gbps|1usec |./build/examples/tcp/ns3-dev-tcp-bulk-send-optimized --stop=1 --latency=1us --dataRate=400Gbps --maxBytes=10000000000000 |\n| Test 2 | 10Kbps| 5msec | ./build/examples/tcp/ns3-dev-tcp-bulk-send-optimized --stop=10000000 --maxBytes=10000000000000 |\n\nTo collect the virtual memory used, I have a script that given program name and output file name will find the PID and then poke the /proc/PID/status for the memory used. Attached: [mem-tracker-by-prog-name](/uploads/910935e92b18b8f30f1fe2e0585e54ad/mem-tracker-by-prog-name)\nTo use it for these tests I simply run:\n./mem-tracker-by-prog-name ns3-dev-tcp-b ~/mem.log &\nI run the tests one at a time! not in parallel.\n\nEitan",
        "attachment": null,
        "author": {
          "id": 5339759,
          "name": "Eitan Zahavi",
          "username": "zahavi.eitan",
          "state": "active",
          "avatar_url": "https://assets.gitlab-static.net/uploads/-/system/user/avatar/5339759/avatar.png",
          "web_url": "https://gitlab.com/zahavi.eitan"
        },
        "created_at": "2020-03-11T09:07:03.233Z",
        "updated_at": "2020-03-11T09:11:12.424Z",
        "system": false,
        "noteable_id": 30048780,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 136,
        "award_emoji_data": []
      }
    ],
    "award_emoji_data": []
  }
}{
  "backend_name": "GitLab",
  "backend_version": "0.12.0",
  "perceval_version": "0.12.24",
  "timestamp": 1584463977.438618,
  "origin": "https://gitlab.com/nsnam/ns-3-dev",
  "uuid": "31c00c532fefec9c3da25c103e31939197a3e427",
  "updated_on": 1584018427.381,
  "classified_fields_filtered": null,
  "category": "issue",
  "search_fields": {
    "item_id": "31840102",
    "owner": "nsnam",
    "iid": 160,
    "project": "ns-3-dev",
    "groups": null
  },
  "tag": "https://gitlab.com/nsnam/ns-3-dev",
  "data": {
    "id": 31840102,
    "iid": 160,
    "project_id": 7128405,
    "title": "CI/CD doesn't test clang-11",
    "description": "clang-11, a.k.a. Xcode for MacOS.\n\n```\ngcc --version\nConfigured with: --prefix=/Applications/Xcode.app/Contents/Developer/usr --with-gxx-include-dir=/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/c++/4.2.1\nApple clang version 11.0.0 (clang-1100.0.33.17)\nTarget: x86_64-apple-darwin19.3.0\nThread model: posix\nInstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin\n```",
    "state": "closed",
    "created_at": "2020-03-10T16:43:48.184Z",
    "updated_at": "2020-03-12T13:07:07.381Z",
    "closed_at": "2020-03-12T13:07:07.318Z",
    "closed_by": {
      "id": 2478411,
      "name": "N.",
      "username": "natale-p",
      "state": "active",
      "avatar_url": "https://secure.gravatar.com/avatar/e33019e1a35ee6c6f38175dc0f4d3cb1?s=80&d=identicon",
      "web_url": "https://gitlab.com/natale-p"
    },
    "labels": [],
    "milestone": null,
    "assignees": [
      {
        "id": 2478411,
        "name": "N.",
        "username": "natale-p",
        "state": "active",
        "avatar_url": "https://secure.gravatar.com/avatar/e33019e1a35ee6c6f38175dc0f4d3cb1?s=80&d=identicon",
        "web_url": "https://gitlab.com/natale-p"
      }
    ],
    "author": {
      "id": 3252122,
      "name": "Tommaso Pecorella",
      "username": "tommypec",
      "state": "active",
      "avatar_url": "https://secure.gravatar.com/avatar/96371c68958a0b5f2c056bf45a7ba86c?s=80&d=identicon",
      "web_url": "https://gitlab.com/tommypec"
    },
    "assignee": {
      "id": 2478411,
      "name": "N.",
      "username": "natale-p",
      "state": "active",
      "avatar_url": "https://secure.gravatar.com/avatar/e33019e1a35ee6c6f38175dc0f4d3cb1?s=80&d=identicon",
      "web_url": "https://gitlab.com/natale-p"
    },
    "user_notes_count": 1,
    "merge_requests_count": 0,
    "upvotes": 0,
    "downvotes": 0,
    "due_date": null,
    "confidential": false,
    "discussion_locked": null,
    "web_url": "https://gitlab.com/nsnam/ns-3-dev/-/issues/160",
    "time_stats": {
      "time_estimate": 0,
      "total_time_spent": 0,
      "human_time_estimate": null,
      "human_total_time_spent": null
    },
    "task_completion_status": {
      "count": 0,
      "completed_count": 0
    },
    "weight": null,
    "has_tasks": false,
    "_links": {
      "self": "https://gitlab.com/api/v4/projects/7128405/issues/160",
      "notes": "https://gitlab.com/api/v4/projects/7128405/issues/160/notes",
      "award_emoji": "https://gitlab.com/api/v4/projects/7128405/issues/160/award_emoji",
      "project": "https://gitlab.com/api/v4/projects/7128405"
    },
    "references": {
      "short": "#160",
      "relative": "#160",
      "full": "nsnam/ns-3-dev#160"
    },
    "moved_to_id": null,
    "epic_iid": null,
    "epic": null,
    "notes_data": [
      {
        "id": 303894858,
        "type": null,
        "body": "closed via commit aa714a54c6d763d993e4f1cfe7b5c9110f8981f7",
        "attachment": null,
        "author": {
          "id": 2478411,
          "name": "N.",
          "username": "natale-p",
          "state": "active",
          "avatar_url": "https://secure.gravatar.com/avatar/e33019e1a35ee6c6f38175dc0f4d3cb1?s=80&d=identicon",
          "web_url": "https://gitlab.com/natale-p"
        },
        "created_at": "2020-03-12T13:07:07.431Z",
        "updated_at": "2020-03-12T13:07:07.433Z",
        "system": true,
        "noteable_id": 31840102,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 160,
        "award_emoji_data": []
      },
      {
        "id": 303896366,
        "type": null,
        "body": "I don't know what is CLANG 11. Anyway, we test now up to clang 9, which is the latest available on the clang website... I hope that will be ok",
        "attachment": null,
        "author": {
          "id": 2478411,
          "name": "N.",
          "username": "natale-p",
          "state": "active",
          "avatar_url": "https://secure.gravatar.com/avatar/e33019e1a35ee6c6f38175dc0f4d3cb1?s=80&d=identicon",
          "web_url": "https://gitlab.com/natale-p"
        },
        "created_at": "2020-03-12T13:07:59.762Z",
        "updated_at": "2020-03-12T13:07:59.762Z",
        "system": false,
        "noteable_id": 31840102,
        "noteable_type": "Issue",
        "resolvable": false,
        "noteable_iid": 160,
        "award_emoji_data": []
      }
    ],
    "award_emoji_data": []
  }
}