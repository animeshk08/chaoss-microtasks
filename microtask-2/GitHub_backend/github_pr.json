{
  "backend_name": "GitHub",
  "backend_version": "0.25.1",
  "perceval_version": "0.12.24",
  "timestamp": 1584463761.78421,
  "origin": "https://github.com/chaoss/grimoirelab-perceval",
  "uuid": "36898497b4d4416a755abff70f3880ae305eb5b6",
  "updated_on": 1583685860.0,
  "classified_fields_filtered": null,
  "category": "pull_request",
  "search_fields": {
    "item_id": "385252868",
    "owner": "chaoss",
    "repo": "grimoirelab-perceval"
  },
  "tag": "https://github.com/chaoss/grimoirelab-perceval",
  "data": {
    "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/623",
    "id": 385252868,
    "node_id": "MDExOlB1bGxSZXF1ZXN0Mzg1MjUyODY4",
    "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/623",
    "diff_url": "https://github.com/chaoss/grimoirelab-perceval/pull/623.diff",
    "patch_url": "https://github.com/chaoss/grimoirelab-perceval/pull/623.patch",
    "issue_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/issues/623",
    "number": 623,
    "state": "closed",
    "locked": false,
    "title": "[perceval] Update license and copyright information",
    "user": {
      "login": "vchrombie",
      "id": 25265451,
      "node_id": "MDQ6VXNlcjI1MjY1NDUx",
      "avatar_url": "https://avatars2.githubusercontent.com/u/25265451?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vchrombie",
      "html_url": "https://github.com/vchrombie",
      "followers_url": "https://api.github.com/users/vchrombie/followers",
      "following_url": "https://api.github.com/users/vchrombie/following{/other_user}",
      "gists_url": "https://api.github.com/users/vchrombie/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vchrombie/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vchrombie/subscriptions",
      "organizations_url": "https://api.github.com/users/vchrombie/orgs",
      "repos_url": "https://api.github.com/users/vchrombie/repos",
      "events_url": "https://api.github.com/users/vchrombie/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vchrombie/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This PR updates license information for every source code file in Perceval.\r\n\r\nI tried updating this using the tool, [vchrombie/grimoirelab-scripts](https://github.com/vchrombie/grimoirelab-scripts).",
    "created_at": "2020-03-08T10:52:51Z",
    "updated_at": "2020-03-08T16:44:20Z",
    "closed_at": "2020-03-08T15:29:51Z",
    "merged_at": "2020-03-08T15:29:51Z",
    "merge_commit_sha": "d273525c6609ab9bcb8f06a2cb0d78b4c70fa11c",
    "assignee": null,
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "labels": [],
    "milestone": null,
    "draft": false,
    "commits_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/623/commits",
    "review_comments_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/623/comments",
    "review_comment_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments{/number}",
    "comments_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/issues/623/comments",
    "statuses_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/statuses/168b57709bb0d1e7fe9b63e691f6784f8b35ada3",
    "head": {
      "label": "vchrombie:test-copyright-script",
      "ref": "test-copyright-script",
      "sha": "168b57709bb0d1e7fe9b63e691f6784f8b35ada3",
      "user": {
        "login": "vchrombie",
        "id": 25265451,
        "node_id": "MDQ6VXNlcjI1MjY1NDUx",
        "avatar_url": "https://avatars2.githubusercontent.com/u/25265451?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vchrombie",
        "html_url": "https://github.com/vchrombie",
        "followers_url": "https://api.github.com/users/vchrombie/followers",
        "following_url": "https://api.github.com/users/vchrombie/following{/other_user}",
        "gists_url": "https://api.github.com/users/vchrombie/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/vchrombie/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/vchrombie/subscriptions",
        "organizations_url": "https://api.github.com/users/vchrombie/orgs",
        "repos_url": "https://api.github.com/users/vchrombie/repos",
        "events_url": "https://api.github.com/users/vchrombie/events{/privacy}",
        "received_events_url": "https://api.github.com/users/vchrombie/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 173245733,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNzMyNDU3MzM=",
        "name": "grimoirelab-perceval",
        "full_name": "vchrombie/grimoirelab-perceval",
        "private": false,
        "owner": {
          "login": "vchrombie",
          "id": 25265451,
          "node_id": "MDQ6VXNlcjI1MjY1NDUx",
          "avatar_url": "https://avatars2.githubusercontent.com/u/25265451?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/vchrombie",
          "html_url": "https://github.com/vchrombie",
          "followers_url": "https://api.github.com/users/vchrombie/followers",
          "following_url": "https://api.github.com/users/vchrombie/following{/other_user}",
          "gists_url": "https://api.github.com/users/vchrombie/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/vchrombie/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/vchrombie/subscriptions",
          "organizations_url": "https://api.github.com/users/vchrombie/orgs",
          "repos_url": "https://api.github.com/users/vchrombie/repos",
          "events_url": "https://api.github.com/users/vchrombie/events{/privacy}",
          "received_events_url": "https://api.github.com/users/vchrombie/received_events",
          "type": "User",
          "site_admin": false
        },
        "html_url": "https://github.com/vchrombie/grimoirelab-perceval",
        "description": "Send Sir Perceval on a quest to retrieve and gather data from software repositories.",
        "fork": true,
        "url": "https://api.github.com/repos/vchrombie/grimoirelab-perceval",
        "forks_url": "https://api.github.com/repos/vchrombie/grimoirelab-perceval/forks",
        "keys_url": "https://api.github.com/repos/vchrombie/grimoirelab-perceval/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/vchrombie/grimoirelab-perceval/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/vchrombie/grimoirelab-perceval/teams",
        "hooks_url": "https://api.github.com/repos/vchrombie/grimoirelab-perceval/hooks",
        "issue_events_url": "https://api.github.com/repos/vchrombie/grimoirelab-perceval/issues/events{/number}",
        "events_url": "https://api.github.com/repos/vchrombie/grimoirelab-perceval/events",
        "assignees_url": "https://api.github.com/repos/vchrombie/grimoirelab-perceval/assignees{/user}",
        "branches_url": "https://api.github.com/repos/vchrombie/grimoirelab-perceval/branches{/branch}",
        "tags_url": "https://api.github.com/repos/vchrombie/grimoirelab-perceval/tags",
        "blobs_url": "https://api.github.com/repos/vchrombie/grimoirelab-perceval/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/vchrombie/grimoirelab-perceval/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/vchrombie/grimoirelab-perceval/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/vchrombie/grimoirelab-perceval/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/vchrombie/grimoirelab-perceval/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/vchrombie/grimoirelab-perceval/languages",
        "stargazers_url": "https://api.github.com/repos/vchrombie/grimoirelab-perceval/stargazers",
        "contributors_url": "https://api.github.com/repos/vchrombie/grimoirelab-perceval/contributors",
        "subscribers_url": "https://api.github.com/repos/vchrombie/grimoirelab-perceval/subscribers",
        "subscription_url": "https://api.github.com/repos/vchrombie/grimoirelab-perceval/subscription",
        "commits_url": "https://api.github.com/repos/vchrombie/grimoirelab-perceval/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/vchrombie/grimoirelab-perceval/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/vchrombie/grimoirelab-perceval/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/vchrombie/grimoirelab-perceval/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/vchrombie/grimoirelab-perceval/contents/{+path}",
        "compare_url": "https://api.github.com/repos/vchrombie/grimoirelab-perceval/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/vchrombie/grimoirelab-perceval/merges",
        "archive_url": "https://api.github.com/repos/vchrombie/grimoirelab-perceval/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/vchrombie/grimoirelab-perceval/downloads",
        "issues_url": "https://api.github.com/repos/vchrombie/grimoirelab-perceval/issues{/number}",
        "pulls_url": "https://api.github.com/repos/vchrombie/grimoirelab-perceval/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/vchrombie/grimoirelab-perceval/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/vchrombie/grimoirelab-perceval/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/vchrombie/grimoirelab-perceval/labels{/name}",
        "releases_url": "https://api.github.com/repos/vchrombie/grimoirelab-perceval/releases{/id}",
        "deployments_url": "https://api.github.com/repos/vchrombie/grimoirelab-perceval/deployments",
        "created_at": "2019-03-01T06:14:28Z",
        "updated_at": "2020-03-13T12:49:25Z",
        "pushed_at": "2020-03-13T12:49:23Z",
        "git_url": "git://github.com/vchrombie/grimoirelab-perceval.git",
        "ssh_url": "git@github.com:vchrombie/grimoirelab-perceval.git",
        "clone_url": "https://github.com/vchrombie/grimoirelab-perceval.git",
        "svn_url": "https://github.com/vchrombie/grimoirelab-perceval",
        "homepage": "",
        "size": 3160,
        "stargazers_count": 0,
        "watchers_count": 0,
        "language": "Python",
        "has_issues": false,
        "has_projects": true,
        "has_downloads": true,
        "has_wiki": true,
        "has_pages": false,
        "forks_count": 0,
        "mirror_url": null,
        "archived": false,
        "disabled": false,
        "open_issues_count": 0,
        "license": {
          "key": "gpl-3.0",
          "name": "GNU General Public License v3.0",
          "spdx_id": "GPL-3.0",
          "url": "https://api.github.com/licenses/gpl-3.0",
          "node_id": "MDc6TGljZW5zZTk="
        },
        "forks": 0,
        "open_issues": 0,
        "watchers": 0,
        "default_branch": "master"
      }
    },
    "base": {
      "label": "chaoss:master",
      "ref": "master",
      "sha": "917a9e9672876331019988824471c80d47c7aacc",
      "user": {
        "login": "chaoss",
        "id": 29740296,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
        "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/chaoss",
        "html_url": "https://github.com/chaoss",
        "followers_url": "https://api.github.com/users/chaoss/followers",
        "following_url": "https://api.github.com/users/chaoss/following{/other_user}",
        "gists_url": "https://api.github.com/users/chaoss/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/chaoss/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/chaoss/subscriptions",
        "organizations_url": "https://api.github.com/users/chaoss/orgs",
        "repos_url": "https://api.github.com/users/chaoss/repos",
        "events_url": "https://api.github.com/users/chaoss/events{/privacy}",
        "received_events_url": "https://api.github.com/users/chaoss/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 47415120,
        "node_id": "MDEwOlJlcG9zaXRvcnk0NzQxNTEyMA==",
        "name": "grimoirelab-perceval",
        "full_name": "chaoss/grimoirelab-perceval",
        "private": false,
        "owner": {
          "login": "chaoss",
          "id": 29740296,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
          "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/chaoss",
          "html_url": "https://github.com/chaoss",
          "followers_url": "https://api.github.com/users/chaoss/followers",
          "following_url": "https://api.github.com/users/chaoss/following{/other_user}",
          "gists_url": "https://api.github.com/users/chaoss/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/chaoss/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/chaoss/subscriptions",
          "organizations_url": "https://api.github.com/users/chaoss/orgs",
          "repos_url": "https://api.github.com/users/chaoss/repos",
          "events_url": "https://api.github.com/users/chaoss/events{/privacy}",
          "received_events_url": "https://api.github.com/users/chaoss/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "html_url": "https://github.com/chaoss/grimoirelab-perceval",
        "description": "Send Sir Perceval on a quest to retrieve and gather data from software repositories.",
        "fork": false,
        "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval",
        "forks_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/forks",
        "keys_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/teams",
        "hooks_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/hooks",
        "issue_events_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/issues/events{/number}",
        "events_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/events",
        "assignees_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/assignees{/user}",
        "branches_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/branches{/branch}",
        "tags_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/tags",
        "blobs_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/languages",
        "stargazers_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/stargazers",
        "contributors_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/contributors",
        "subscribers_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/subscribers",
        "subscription_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/subscription",
        "commits_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/contents/{+path}",
        "compare_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/merges",
        "archive_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/downloads",
        "issues_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/issues{/number}",
        "pulls_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/labels{/name}",
        "releases_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/releases{/id}",
        "deployments_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/deployments",
        "created_at": "2015-12-04T16:20:11Z",
        "updated_at": "2020-03-13T07:39:12Z",
        "pushed_at": "2020-03-17T15:44:21Z",
        "git_url": "git://github.com/chaoss/grimoirelab-perceval.git",
        "ssh_url": "git@github.com:chaoss/grimoirelab-perceval.git",
        "clone_url": "https://github.com/chaoss/grimoirelab-perceval.git",
        "svn_url": "https://github.com/chaoss/grimoirelab-perceval",
        "homepage": "",
        "size": 3160,
        "stargazers_count": 160,
        "watchers_count": 160,
        "language": "Python",
        "has_issues": true,
        "has_projects": true,
        "has_downloads": true,
        "has_wiki": true,
        "has_pages": false,
        "forks_count": 95,
        "mirror_url": null,
        "archived": false,
        "disabled": false,
        "open_issues_count": 49,
        "license": {
          "key": "gpl-3.0",
          "name": "GNU General Public License v3.0",
          "spdx_id": "GPL-3.0",
          "url": "https://api.github.com/licenses/gpl-3.0",
          "node_id": "MDc6TGljZW5zZTk="
        },
        "forks": 95,
        "open_issues": 49,
        "watchers": 160,
        "default_branch": "master"
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/623"
      },
      "html": {
        "href": "https://github.com/chaoss/grimoirelab-perceval/pull/623"
      },
      "issue": {
        "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/issues/623"
      },
      "comments": {
        "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/issues/623/comments"
      },
      "review_comments": {
        "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/623/comments"
      },
      "review_comment": {
        "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments{/number}"
      },
      "commits": {
        "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/623/commits"
      },
      "statuses": {
        "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/statuses/168b57709bb0d1e7fe9b63e691f6784f8b35ada3"
      }
    },
    "author_association": "CONTRIBUTOR",
    "merged": true,
    "mergeable": null,
    "rebaseable": null,
    "mergeable_state": "unknown",
    "merged_by": {
      "login": "valeriocos",
      "id": 6515067,
      "node_id": "MDQ6VXNlcjY1MTUwNjc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/valeriocos",
      "html_url": "https://github.com/valeriocos",
      "followers_url": "https://api.github.com/users/valeriocos/followers",
      "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
      "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
      "organizations_url": "https://api.github.com/users/valeriocos/orgs",
      "repos_url": "https://api.github.com/users/valeriocos/repos",
      "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/valeriocos/received_events",
      "type": "User",
      "site_admin": false
    },
    "comments": 16,
    "review_comments": 8,
    "maintainer_can_modify": false,
    "commits": 1,
    "additions": 183,
    "deletions": 47,
    "changed_files": 38,
    "user_data": {
      "login": "vchrombie",
      "id": 25265451,
      "node_id": "MDQ6VXNlcjI1MjY1NDUx",
      "avatar_url": "https://avatars2.githubusercontent.com/u/25265451?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vchrombie",
      "html_url": "https://github.com/vchrombie",
      "followers_url": "https://api.github.com/users/vchrombie/followers",
      "following_url": "https://api.github.com/users/vchrombie/following{/other_user}",
      "gists_url": "https://api.github.com/users/vchrombie/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vchrombie/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vchrombie/subscriptions",
      "organizations_url": "https://api.github.com/users/vchrombie/orgs",
      "repos_url": "https://api.github.com/users/vchrombie/repos",
      "events_url": "https://api.github.com/users/vchrombie/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vchrombie/received_events",
      "type": "User",
      "site_admin": false,
      "name": "Venu Vardhan Reddy Tekula",
      "company": "@amfoss",
      "blog": "https://vchrombie.github.io/",
      "location": "Kollam",
      "email": "venuvardhanreddytekula8@gmail.com",
      "hireable": true,
      "bio": "Data Detective :chart_with_upwards_trend:",
      "public_repos": 71,
      "public_gists": 8,
      "followers": 108,
      "following": 118,
      "created_at": "2017-01-21T12:45:08Z",
      "updated_at": "2020-03-17T14:09:18Z",
      "organizations": [
        {
          "login": "amfoss",
          "id": 9362252,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjkzNjIyNTI=",
          "url": "https://api.github.com/orgs/amfoss",
          "repos_url": "https://api.github.com/orgs/amfoss/repos",
          "events_url": "https://api.github.com/orgs/amfoss/events",
          "hooks_url": "https://api.github.com/orgs/amfoss/hooks",
          "issues_url": "https://api.github.com/orgs/amfoss/issues",
          "members_url": "https://api.github.com/orgs/amfoss/members{/member}",
          "public_members_url": "https://api.github.com/orgs/amfoss/public_members{/member}",
          "avatar_url": "https://avatars0.githubusercontent.com/u/9362252?v=4",
          "description": "Student Community of Open Source Enthusiasts. We promote and contribute to FOSS, and mentor students for achieving excellence."
        },
        {
          "login": "hiddencodecademy",
          "id": 30184949,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjMwMTg0OTQ5",
          "url": "https://api.github.com/orgs/hiddencodecademy",
          "repos_url": "https://api.github.com/orgs/hiddencodecademy/repos",
          "events_url": "https://api.github.com/orgs/hiddencodecademy/events",
          "hooks_url": "https://api.github.com/orgs/hiddencodecademy/hooks",
          "issues_url": "https://api.github.com/orgs/hiddencodecademy/issues",
          "members_url": "https://api.github.com/orgs/hiddencodecademy/members{/member}",
          "public_members_url": "https://api.github.com/orgs/hiddencodecademy/public_members{/member}",
          "avatar_url": "https://avatars0.githubusercontent.com/u/30184949?v=4",
          "description": "This is a call to arms for all Codecademy users to find hidden courses, become a member of this org, and post it."
        },
        {
          "login": "scorpion-hut",
          "id": 39411466,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjM5NDExNDY2",
          "url": "https://api.github.com/orgs/scorpion-hut",
          "repos_url": "https://api.github.com/orgs/scorpion-hut/repos",
          "events_url": "https://api.github.com/orgs/scorpion-hut/events",
          "hooks_url": "https://api.github.com/orgs/scorpion-hut/hooks",
          "issues_url": "https://api.github.com/orgs/scorpion-hut/issues",
          "members_url": "https://api.github.com/orgs/scorpion-hut/members{/member}",
          "public_members_url": "https://api.github.com/orgs/scorpion-hut/public_members{/member}",
          "avatar_url": "https://avatars0.githubusercontent.com/u/39411466?v=4",
          "description": ""
        },
        {
          "login": "snitch3s",
          "id": 57801297,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjU3ODAxMjk3",
          "url": "https://api.github.com/orgs/snitch3s",
          "repos_url": "https://api.github.com/orgs/snitch3s/repos",
          "events_url": "https://api.github.com/orgs/snitch3s/events",
          "hooks_url": "https://api.github.com/orgs/snitch3s/hooks",
          "issues_url": "https://api.github.com/orgs/snitch3s/issues",
          "members_url": "https://api.github.com/orgs/snitch3s/members{/member}",
          "public_members_url": "https://api.github.com/orgs/snitch3s/public_members{/member}",
          "avatar_url": "https://avatars0.githubusercontent.com/u/57801297?v=4",
          "description": null
        }
      ]
    },
    "review_comments_data": [
      {
        "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389358580",
        "pull_request_review_id": 370821654,
        "id": 389358580,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM1ODU4MA==",
        "diff_hunk": "@@ -16,10 +16,12 @@\n # along with this program. If not, see <http://www.gnu.org/licenses/>.\n #\n # Authors:\n-#    Santiago Due\u00f1as <sduenas@bitergia.com>\n-#    J. Manrique L\u00f3pez de la Fuente <jsmanrique@bitergia.com>",
        "path": "perceval/backends/core/discourse.py",
        "position": 13,
        "original_position": 13,
        "commit_id": "168b57709bb0d1e7fe9b63e691f6784f8b35ada3",
        "original_commit_id": "9f882787650a6b5d3c9c5b931489f449c4f056cc",
        "user": {
          "login": "vchrombie",
          "id": 25265451,
          "node_id": "MDQ6VXNlcjI1MjY1NDUx",
          "avatar_url": "https://avatars2.githubusercontent.com/u/25265451?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/vchrombie",
          "html_url": "https://github.com/vchrombie",
          "followers_url": "https://api.github.com/users/vchrombie/followers",
          "following_url": "https://api.github.com/users/vchrombie/following{/other_user}",
          "gists_url": "https://api.github.com/users/vchrombie/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/vchrombie/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/vchrombie/subscriptions",
          "organizations_url": "https://api.github.com/users/vchrombie/orgs",
          "repos_url": "https://api.github.com/users/vchrombie/repos",
          "events_url": "https://api.github.com/users/vchrombie/events{/privacy}",
          "received_events_url": "https://api.github.com/users/vchrombie/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "I checked the [commit history of discourse.py](https://github.com/chaoss/grimoirelab-perceval/commits/master/perceval/backends/core/discourse.py), but couldn't find any reference of jsmanrique as an author. \r\n",
        "created_at": "2020-03-08T11:09:20Z",
        "updated_at": "2020-03-08T15:22:07Z",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/623#discussion_r389358580",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/623",
        "author_association": "CONTRIBUTOR",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389358580"
          },
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/623#discussion_r389358580"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/623"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389358580/reactions",
          "total_count": 1,
          "+1": 1,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "user_data": {
          "login": "vchrombie",
          "id": 25265451,
          "node_id": "MDQ6VXNlcjI1MjY1NDUx",
          "avatar_url": "https://avatars2.githubusercontent.com/u/25265451?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/vchrombie",
          "html_url": "https://github.com/vchrombie",
          "followers_url": "https://api.github.com/users/vchrombie/followers",
          "following_url": "https://api.github.com/users/vchrombie/following{/other_user}",
          "gists_url": "https://api.github.com/users/vchrombie/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/vchrombie/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/vchrombie/subscriptions",
          "organizations_url": "https://api.github.com/users/vchrombie/orgs",
          "repos_url": "https://api.github.com/users/vchrombie/repos",
          "events_url": "https://api.github.com/users/vchrombie/events{/privacy}",
          "received_events_url": "https://api.github.com/users/vchrombie/received_events",
          "type": "User",
          "site_admin": false,
          "name": "Venu Vardhan Reddy Tekula",
          "company": "@amfoss",
          "blog": "https://vchrombie.github.io/",
          "location": "Kollam",
          "email": "venuvardhanreddytekula8@gmail.com",
          "hireable": true,
          "bio": "Data Detective :chart_with_upwards_trend:",
          "public_repos": 71,
          "public_gists": 8,
          "followers": 108,
          "following": 118,
          "created_at": "2017-01-21T12:45:08Z",
          "updated_at": "2020-03-17T14:09:18Z",
          "organizations": [
            {
              "login": "amfoss",
              "id": 9362252,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjkzNjIyNTI=",
              "url": "https://api.github.com/orgs/amfoss",
              "repos_url": "https://api.github.com/orgs/amfoss/repos",
              "events_url": "https://api.github.com/orgs/amfoss/events",
              "hooks_url": "https://api.github.com/orgs/amfoss/hooks",
              "issues_url": "https://api.github.com/orgs/amfoss/issues",
              "members_url": "https://api.github.com/orgs/amfoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/amfoss/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/9362252?v=4",
              "description": "Student Community of Open Source Enthusiasts. We promote and contribute to FOSS, and mentor students for achieving excellence."
            },
            {
              "login": "hiddencodecademy",
              "id": 30184949,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjMwMTg0OTQ5",
              "url": "https://api.github.com/orgs/hiddencodecademy",
              "repos_url": "https://api.github.com/orgs/hiddencodecademy/repos",
              "events_url": "https://api.github.com/orgs/hiddencodecademy/events",
              "hooks_url": "https://api.github.com/orgs/hiddencodecademy/hooks",
              "issues_url": "https://api.github.com/orgs/hiddencodecademy/issues",
              "members_url": "https://api.github.com/orgs/hiddencodecademy/members{/member}",
              "public_members_url": "https://api.github.com/orgs/hiddencodecademy/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/30184949?v=4",
              "description": "This is a call to arms for all Codecademy users to find hidden courses, become a member of this org, and post it."
            },
            {
              "login": "scorpion-hut",
              "id": 39411466,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjM5NDExNDY2",
              "url": "https://api.github.com/orgs/scorpion-hut",
              "repos_url": "https://api.github.com/orgs/scorpion-hut/repos",
              "events_url": "https://api.github.com/orgs/scorpion-hut/events",
              "hooks_url": "https://api.github.com/orgs/scorpion-hut/hooks",
              "issues_url": "https://api.github.com/orgs/scorpion-hut/issues",
              "members_url": "https://api.github.com/orgs/scorpion-hut/members{/member}",
              "public_members_url": "https://api.github.com/orgs/scorpion-hut/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/39411466?v=4",
              "description": ""
            },
            {
              "login": "snitch3s",
              "id": 57801297,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjU3ODAxMjk3",
              "url": "https://api.github.com/orgs/snitch3s",
              "repos_url": "https://api.github.com/orgs/snitch3s/repos",
              "events_url": "https://api.github.com/orgs/snitch3s/events",
              "hooks_url": "https://api.github.com/orgs/snitch3s/hooks",
              "issues_url": "https://api.github.com/orgs/snitch3s/issues",
              "members_url": "https://api.github.com/orgs/snitch3s/members{/member}",
              "public_members_url": "https://api.github.com/orgs/snitch3s/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/57801297?v=4",
              "description": null
            }
          ]
        },
        "reactions_data": [
          {
            "id": 64511753,
            "node_id": "MDg6UmVhY3Rpb242NDUxMTc1Mw==",
            "user": {
              "login": "valeriocos",
              "id": 6515067,
              "node_id": "MDQ6VXNlcjY1MTUwNjc=",
              "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/valeriocos",
              "html_url": "https://github.com/valeriocos",
              "followers_url": "https://api.github.com/users/valeriocos/followers",
              "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
              "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
              "organizations_url": "https://api.github.com/users/valeriocos/orgs",
              "repos_url": "https://api.github.com/users/valeriocos/repos",
              "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
              "received_events_url": "https://api.github.com/users/valeriocos/received_events",
              "type": "User",
              "site_admin": false
            },
            "content": "+1",
            "created_at": "2020-03-08T11:17:25Z",
            "user_data": {
              "login": "valeriocos",
              "id": 6515067,
              "node_id": "MDQ6VXNlcjY1MTUwNjc=",
              "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/valeriocos",
              "html_url": "https://github.com/valeriocos",
              "followers_url": "https://api.github.com/users/valeriocos/followers",
              "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
              "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
              "organizations_url": "https://api.github.com/users/valeriocos/orgs",
              "repos_url": "https://api.github.com/users/valeriocos/repos",
              "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
              "received_events_url": "https://api.github.com/users/valeriocos/received_events",
              "type": "User",
              "site_admin": false,
              "name": "valerio",
              "company": "@Bitergia ",
              "blog": "http://valeriocos.github.io/",
              "location": "Madrid, Spain",
              "email": "valcos@bitergia.com",
              "hireable": true,
              "bio": null,
              "public_repos": 57,
              "public_gists": 28,
              "followers": 34,
              "following": 5,
              "created_at": "2014-01-27T14:30:30Z",
              "updated_at": "2020-03-17T10:02:44Z",
              "organizations": [
                {
                  "login": "Bitergia",
                  "id": 1918070,
                  "node_id": "MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=",
                  "url": "https://api.github.com/orgs/Bitergia",
                  "repos_url": "https://api.github.com/orgs/Bitergia/repos",
                  "events_url": "https://api.github.com/orgs/Bitergia/events",
                  "hooks_url": "https://api.github.com/orgs/Bitergia/hooks",
                  "issues_url": "https://api.github.com/orgs/Bitergia/issues",
                  "members_url": "https://api.github.com/orgs/Bitergia/members{/member}",
                  "public_members_url": "https://api.github.com/orgs/Bitergia/public_members{/member}",
                  "avatar_url": "https://avatars3.githubusercontent.com/u/1918070?v=4",
                  "description": null
                },
                {
                  "login": "grimoirelab",
                  "id": 16151805,
                  "node_id": "MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1",
                  "url": "https://api.github.com/orgs/grimoirelab",
                  "repos_url": "https://api.github.com/orgs/grimoirelab/repos",
                  "events_url": "https://api.github.com/orgs/grimoirelab/events",
                  "hooks_url": "https://api.github.com/orgs/grimoirelab/hooks",
                  "issues_url": "https://api.github.com/orgs/grimoirelab/issues",
                  "members_url": "https://api.github.com/orgs/grimoirelab/members{/member}",
                  "public_members_url": "https://api.github.com/orgs/grimoirelab/public_members{/member}",
                  "avatar_url": "https://avatars0.githubusercontent.com/u/16151805?v=4",
                  "description": ""
                },
                {
                  "login": "chaoss",
                  "id": 29740296,
                  "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
                  "url": "https://api.github.com/orgs/chaoss",
                  "repos_url": "https://api.github.com/orgs/chaoss/repos",
                  "events_url": "https://api.github.com/orgs/chaoss/events",
                  "hooks_url": "https://api.github.com/orgs/chaoss/hooks",
                  "issues_url": "https://api.github.com/orgs/chaoss/issues",
                  "members_url": "https://api.github.com/orgs/chaoss/members{/member}",
                  "public_members_url": "https://api.github.com/orgs/chaoss/public_members{/member}",
                  "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
                  "description": ""
                }
              ]
            }
          }
        ]
      },
      {
        "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389359149",
        "pull_request_review_id": 370822071,
        "id": 389359149,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM1OTE0OQ==",
        "diff_hunk": "@@ -16,10 +16,12 @@\n # along with this program. If not, see <http://www.gnu.org/licenses/>.\n #\n # Authors:\n-#    Santiago Due\u00f1as <sduenas@bitergia.com>\n-#    J. Manrique L\u00f3pez de la Fuente <jsmanrique@bitergia.com>",
        "path": "perceval/backends/core/discourse.py",
        "position": 13,
        "original_position": 13,
        "commit_id": "168b57709bb0d1e7fe9b63e691f6784f8b35ada3",
        "original_commit_id": "9f882787650a6b5d3c9c5b931489f449c4f056cc",
        "user": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "I checked the history too and I don't see him. The change that introduced it is https://github.com/chaoss/grimoirelab-perceval/commit/d36293a4ba3cd4e6c95be900c145c09bf57c6f00.\r\n\r\nI would leave the name there, probably he helped in writing the file, but it was committed by someone else.",
        "created_at": "2020-03-08T11:17:21Z",
        "updated_at": "2020-03-08T15:22:07Z",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/623#discussion_r389359149",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/623",
        "author_association": "MEMBER",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389359149"
          },
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/623#discussion_r389359149"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/623"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389359149/reactions",
          "total_count": 1,
          "+1": 1,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "in_reply_to_id": 389358580,
        "user_data": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false,
          "name": "valerio",
          "company": "@Bitergia ",
          "blog": "http://valeriocos.github.io/",
          "location": "Madrid, Spain",
          "email": "valcos@bitergia.com",
          "hireable": true,
          "bio": null,
          "public_repos": 57,
          "public_gists": 28,
          "followers": 34,
          "following": 5,
          "created_at": "2014-01-27T14:30:30Z",
          "updated_at": "2020-03-17T10:02:44Z",
          "organizations": [
            {
              "login": "Bitergia",
              "id": 1918070,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=",
              "url": "https://api.github.com/orgs/Bitergia",
              "repos_url": "https://api.github.com/orgs/Bitergia/repos",
              "events_url": "https://api.github.com/orgs/Bitergia/events",
              "hooks_url": "https://api.github.com/orgs/Bitergia/hooks",
              "issues_url": "https://api.github.com/orgs/Bitergia/issues",
              "members_url": "https://api.github.com/orgs/Bitergia/members{/member}",
              "public_members_url": "https://api.github.com/orgs/Bitergia/public_members{/member}",
              "avatar_url": "https://avatars3.githubusercontent.com/u/1918070?v=4",
              "description": null
            },
            {
              "login": "grimoirelab",
              "id": 16151805,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1",
              "url": "https://api.github.com/orgs/grimoirelab",
              "repos_url": "https://api.github.com/orgs/grimoirelab/repos",
              "events_url": "https://api.github.com/orgs/grimoirelab/events",
              "hooks_url": "https://api.github.com/orgs/grimoirelab/hooks",
              "issues_url": "https://api.github.com/orgs/grimoirelab/issues",
              "members_url": "https://api.github.com/orgs/grimoirelab/members{/member}",
              "public_members_url": "https://api.github.com/orgs/grimoirelab/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/16151805?v=4",
              "description": ""
            },
            {
              "login": "chaoss",
              "id": 29740296,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
              "url": "https://api.github.com/orgs/chaoss",
              "repos_url": "https://api.github.com/orgs/chaoss/repos",
              "events_url": "https://api.github.com/orgs/chaoss/events",
              "hooks_url": "https://api.github.com/orgs/chaoss/hooks",
              "issues_url": "https://api.github.com/orgs/chaoss/issues",
              "members_url": "https://api.github.com/orgs/chaoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/chaoss/public_members{/member}",
              "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
              "description": ""
            }
          ]
        },
        "reactions_data": [
          {
            "id": 64511843,
            "node_id": "MDg6UmVhY3Rpb242NDUxMTg0Mw==",
            "user": {
              "login": "vchrombie",
              "id": 25265451,
              "node_id": "MDQ6VXNlcjI1MjY1NDUx",
              "avatar_url": "https://avatars2.githubusercontent.com/u/25265451?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/vchrombie",
              "html_url": "https://github.com/vchrombie",
              "followers_url": "https://api.github.com/users/vchrombie/followers",
              "following_url": "https://api.github.com/users/vchrombie/following{/other_user}",
              "gists_url": "https://api.github.com/users/vchrombie/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/vchrombie/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/vchrombie/subscriptions",
              "organizations_url": "https://api.github.com/users/vchrombie/orgs",
              "repos_url": "https://api.github.com/users/vchrombie/repos",
              "events_url": "https://api.github.com/users/vchrombie/events{/privacy}",
              "received_events_url": "https://api.github.com/users/vchrombie/received_events",
              "type": "User",
              "site_admin": false
            },
            "content": "+1",
            "created_at": "2020-03-08T11:21:59Z",
            "user_data": {
              "login": "vchrombie",
              "id": 25265451,
              "node_id": "MDQ6VXNlcjI1MjY1NDUx",
              "avatar_url": "https://avatars2.githubusercontent.com/u/25265451?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/vchrombie",
              "html_url": "https://github.com/vchrombie",
              "followers_url": "https://api.github.com/users/vchrombie/followers",
              "following_url": "https://api.github.com/users/vchrombie/following{/other_user}",
              "gists_url": "https://api.github.com/users/vchrombie/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/vchrombie/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/vchrombie/subscriptions",
              "organizations_url": "https://api.github.com/users/vchrombie/orgs",
              "repos_url": "https://api.github.com/users/vchrombie/repos",
              "events_url": "https://api.github.com/users/vchrombie/events{/privacy}",
              "received_events_url": "https://api.github.com/users/vchrombie/received_events",
              "type": "User",
              "site_admin": false,
              "name": "Venu Vardhan Reddy Tekula",
              "company": "@amfoss",
              "blog": "https://vchrombie.github.io/",
              "location": "Kollam",
              "email": "venuvardhanreddytekula8@gmail.com",
              "hireable": true,
              "bio": "Data Detective :chart_with_upwards_trend:",
              "public_repos": 71,
              "public_gists": 8,
              "followers": 108,
              "following": 118,
              "created_at": "2017-01-21T12:45:08Z",
              "updated_at": "2020-03-17T14:09:18Z",
              "organizations": [
                {
                  "login": "amfoss",
                  "id": 9362252,
                  "node_id": "MDEyOk9yZ2FuaXphdGlvbjkzNjIyNTI=",
                  "url": "https://api.github.com/orgs/amfoss",
                  "repos_url": "https://api.github.com/orgs/amfoss/repos",
                  "events_url": "https://api.github.com/orgs/amfoss/events",
                  "hooks_url": "https://api.github.com/orgs/amfoss/hooks",
                  "issues_url": "https://api.github.com/orgs/amfoss/issues",
                  "members_url": "https://api.github.com/orgs/amfoss/members{/member}",
                  "public_members_url": "https://api.github.com/orgs/amfoss/public_members{/member}",
                  "avatar_url": "https://avatars0.githubusercontent.com/u/9362252?v=4",
                  "description": "Student Community of Open Source Enthusiasts. We promote and contribute to FOSS, and mentor students for achieving excellence."
                },
                {
                  "login": "hiddencodecademy",
                  "id": 30184949,
                  "node_id": "MDEyOk9yZ2FuaXphdGlvbjMwMTg0OTQ5",
                  "url": "https://api.github.com/orgs/hiddencodecademy",
                  "repos_url": "https://api.github.com/orgs/hiddencodecademy/repos",
                  "events_url": "https://api.github.com/orgs/hiddencodecademy/events",
                  "hooks_url": "https://api.github.com/orgs/hiddencodecademy/hooks",
                  "issues_url": "https://api.github.com/orgs/hiddencodecademy/issues",
                  "members_url": "https://api.github.com/orgs/hiddencodecademy/members{/member}",
                  "public_members_url": "https://api.github.com/orgs/hiddencodecademy/public_members{/member}",
                  "avatar_url": "https://avatars0.githubusercontent.com/u/30184949?v=4",
                  "description": "This is a call to arms for all Codecademy users to find hidden courses, become a member of this org, and post it."
                },
                {
                  "login": "scorpion-hut",
                  "id": 39411466,
                  "node_id": "MDEyOk9yZ2FuaXphdGlvbjM5NDExNDY2",
                  "url": "https://api.github.com/orgs/scorpion-hut",
                  "repos_url": "https://api.github.com/orgs/scorpion-hut/repos",
                  "events_url": "https://api.github.com/orgs/scorpion-hut/events",
                  "hooks_url": "https://api.github.com/orgs/scorpion-hut/hooks",
                  "issues_url": "https://api.github.com/orgs/scorpion-hut/issues",
                  "members_url": "https://api.github.com/orgs/scorpion-hut/members{/member}",
                  "public_members_url": "https://api.github.com/orgs/scorpion-hut/public_members{/member}",
                  "avatar_url": "https://avatars0.githubusercontent.com/u/39411466?v=4",
                  "description": ""
                },
                {
                  "login": "snitch3s",
                  "id": 57801297,
                  "node_id": "MDEyOk9yZ2FuaXphdGlvbjU3ODAxMjk3",
                  "url": "https://api.github.com/orgs/snitch3s",
                  "repos_url": "https://api.github.com/orgs/snitch3s/repos",
                  "events_url": "https://api.github.com/orgs/snitch3s/events",
                  "hooks_url": "https://api.github.com/orgs/snitch3s/hooks",
                  "issues_url": "https://api.github.com/orgs/snitch3s/issues",
                  "members_url": "https://api.github.com/orgs/snitch3s/members{/member}",
                  "public_members_url": "https://api.github.com/orgs/snitch3s/public_members{/member}",
                  "avatar_url": "https://avatars0.githubusercontent.com/u/57801297?v=4",
                  "description": null
                }
              ]
            }
          }
        ]
      },
      {
        "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389359665",
        "pull_request_review_id": 370822471,
        "id": 389359665,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM1OTY2NQ==",
        "diff_hunk": "@@ -16,10 +16,12 @@\n # along with this program. If not, see <http://www.gnu.org/licenses/>.\n #\n # Authors:\n-#    Santiago Due\u00f1as <sduenas@bitergia.com>\n-#    J. Manrique L\u00f3pez de la Fuente <jsmanrique@bitergia.com>",
        "path": "perceval/backends/core/discourse.py",
        "position": 13,
        "original_position": 13,
        "commit_id": "168b57709bb0d1e7fe9b63e691f6784f8b35ada3",
        "original_commit_id": "9f882787650a6b5d3c9c5b931489f449c4f056cc",
        "user": {
          "login": "vchrombie",
          "id": 25265451,
          "node_id": "MDQ6VXNlcjI1MjY1NDUx",
          "avatar_url": "https://avatars2.githubusercontent.com/u/25265451?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/vchrombie",
          "html_url": "https://github.com/vchrombie",
          "followers_url": "https://api.github.com/users/vchrombie/followers",
          "following_url": "https://api.github.com/users/vchrombie/following{/other_user}",
          "gists_url": "https://api.github.com/users/vchrombie/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/vchrombie/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/vchrombie/subscriptions",
          "organizations_url": "https://api.github.com/users/vchrombie/orgs",
          "repos_url": "https://api.github.com/users/vchrombie/repos",
          "events_url": "https://api.github.com/users/vchrombie/events{/privacy}",
          "received_events_url": "https://api.github.com/users/vchrombie/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "Thanks for the reply. I will revert the changes.",
        "created_at": "2020-03-08T11:24:57Z",
        "updated_at": "2020-03-08T15:22:07Z",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/623#discussion_r389359665",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/623",
        "author_association": "CONTRIBUTOR",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389359665"
          },
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/623#discussion_r389359665"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/623"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389359665/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "in_reply_to_id": 389358580,
        "user_data": {
          "login": "vchrombie",
          "id": 25265451,
          "node_id": "MDQ6VXNlcjI1MjY1NDUx",
          "avatar_url": "https://avatars2.githubusercontent.com/u/25265451?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/vchrombie",
          "html_url": "https://github.com/vchrombie",
          "followers_url": "https://api.github.com/users/vchrombie/followers",
          "following_url": "https://api.github.com/users/vchrombie/following{/other_user}",
          "gists_url": "https://api.github.com/users/vchrombie/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/vchrombie/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/vchrombie/subscriptions",
          "organizations_url": "https://api.github.com/users/vchrombie/orgs",
          "repos_url": "https://api.github.com/users/vchrombie/repos",
          "events_url": "https://api.github.com/users/vchrombie/events{/privacy}",
          "received_events_url": "https://api.github.com/users/vchrombie/received_events",
          "type": "User",
          "site_admin": false,
          "name": "Venu Vardhan Reddy Tekula",
          "company": "@amfoss",
          "blog": "https://vchrombie.github.io/",
          "location": "Kollam",
          "email": "venuvardhanreddytekula8@gmail.com",
          "hireable": true,
          "bio": "Data Detective :chart_with_upwards_trend:",
          "public_repos": 71,
          "public_gists": 8,
          "followers": 108,
          "following": 118,
          "created_at": "2017-01-21T12:45:08Z",
          "updated_at": "2020-03-17T14:09:18Z",
          "organizations": [
            {
              "login": "amfoss",
              "id": 9362252,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjkzNjIyNTI=",
              "url": "https://api.github.com/orgs/amfoss",
              "repos_url": "https://api.github.com/orgs/amfoss/repos",
              "events_url": "https://api.github.com/orgs/amfoss/events",
              "hooks_url": "https://api.github.com/orgs/amfoss/hooks",
              "issues_url": "https://api.github.com/orgs/amfoss/issues",
              "members_url": "https://api.github.com/orgs/amfoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/amfoss/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/9362252?v=4",
              "description": "Student Community of Open Source Enthusiasts. We promote and contribute to FOSS, and mentor students for achieving excellence."
            },
            {
              "login": "hiddencodecademy",
              "id": 30184949,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjMwMTg0OTQ5",
              "url": "https://api.github.com/orgs/hiddencodecademy",
              "repos_url": "https://api.github.com/orgs/hiddencodecademy/repos",
              "events_url": "https://api.github.com/orgs/hiddencodecademy/events",
              "hooks_url": "https://api.github.com/orgs/hiddencodecademy/hooks",
              "issues_url": "https://api.github.com/orgs/hiddencodecademy/issues",
              "members_url": "https://api.github.com/orgs/hiddencodecademy/members{/member}",
              "public_members_url": "https://api.github.com/orgs/hiddencodecademy/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/30184949?v=4",
              "description": "This is a call to arms for all Codecademy users to find hidden courses, become a member of this org, and post it."
            },
            {
              "login": "scorpion-hut",
              "id": 39411466,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjM5NDExNDY2",
              "url": "https://api.github.com/orgs/scorpion-hut",
              "repos_url": "https://api.github.com/orgs/scorpion-hut/repos",
              "events_url": "https://api.github.com/orgs/scorpion-hut/events",
              "hooks_url": "https://api.github.com/orgs/scorpion-hut/hooks",
              "issues_url": "https://api.github.com/orgs/scorpion-hut/issues",
              "members_url": "https://api.github.com/orgs/scorpion-hut/members{/member}",
              "public_members_url": "https://api.github.com/orgs/scorpion-hut/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/39411466?v=4",
              "description": ""
            },
            {
              "login": "snitch3s",
              "id": 57801297,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjU3ODAxMjk3",
              "url": "https://api.github.com/orgs/snitch3s",
              "repos_url": "https://api.github.com/orgs/snitch3s/repos",
              "events_url": "https://api.github.com/orgs/snitch3s/events",
              "hooks_url": "https://api.github.com/orgs/snitch3s/hooks",
              "issues_url": "https://api.github.com/orgs/snitch3s/issues",
              "members_url": "https://api.github.com/orgs/snitch3s/members{/member}",
              "public_members_url": "https://api.github.com/orgs/snitch3s/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/57801297?v=4",
              "description": null
            }
          ]
        },
        "reactions_data": []
      },
      {
        "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389360004",
        "pull_request_review_id": 370822713,
        "id": 389360004,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM2MDAwNA==",
        "diff_hunk": "@@ -16,10 +16,12 @@\n # along with this program. If not, see <http://www.gnu.org/licenses/>.\n #\n # Authors:\n-#    Santiago Due\u00f1as <sduenas@bitergia.com>\n-#    J. Manrique L\u00f3pez de la Fuente <jsmanrique@bitergia.com>",
        "path": "perceval/backends/core/discourse.py",
        "position": 13,
        "original_position": 13,
        "commit_id": "168b57709bb0d1e7fe9b63e691f6784f8b35ada3",
        "original_commit_id": "9f882787650a6b5d3c9c5b931489f449c4f056cc",
        "user": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "thanks! (I hope this isn't too much work)",
        "created_at": "2020-03-08T11:29:01Z",
        "updated_at": "2020-03-08T15:22:07Z",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/623#discussion_r389360004",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/623",
        "author_association": "MEMBER",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389360004"
          },
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/623#discussion_r389360004"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/623"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389360004/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "in_reply_to_id": 389358580,
        "user_data": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false,
          "name": "valerio",
          "company": "@Bitergia ",
          "blog": "http://valeriocos.github.io/",
          "location": "Madrid, Spain",
          "email": "valcos@bitergia.com",
          "hireable": true,
          "bio": null,
          "public_repos": 57,
          "public_gists": 28,
          "followers": 34,
          "following": 5,
          "created_at": "2014-01-27T14:30:30Z",
          "updated_at": "2020-03-17T10:02:44Z",
          "organizations": [
            {
              "login": "Bitergia",
              "id": 1918070,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=",
              "url": "https://api.github.com/orgs/Bitergia",
              "repos_url": "https://api.github.com/orgs/Bitergia/repos",
              "events_url": "https://api.github.com/orgs/Bitergia/events",
              "hooks_url": "https://api.github.com/orgs/Bitergia/hooks",
              "issues_url": "https://api.github.com/orgs/Bitergia/issues",
              "members_url": "https://api.github.com/orgs/Bitergia/members{/member}",
              "public_members_url": "https://api.github.com/orgs/Bitergia/public_members{/member}",
              "avatar_url": "https://avatars3.githubusercontent.com/u/1918070?v=4",
              "description": null
            },
            {
              "login": "grimoirelab",
              "id": 16151805,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1",
              "url": "https://api.github.com/orgs/grimoirelab",
              "repos_url": "https://api.github.com/orgs/grimoirelab/repos",
              "events_url": "https://api.github.com/orgs/grimoirelab/events",
              "hooks_url": "https://api.github.com/orgs/grimoirelab/hooks",
              "issues_url": "https://api.github.com/orgs/grimoirelab/issues",
              "members_url": "https://api.github.com/orgs/grimoirelab/members{/member}",
              "public_members_url": "https://api.github.com/orgs/grimoirelab/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/16151805?v=4",
              "description": ""
            },
            {
              "login": "chaoss",
              "id": 29740296,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
              "url": "https://api.github.com/orgs/chaoss",
              "repos_url": "https://api.github.com/orgs/chaoss/repos",
              "events_url": "https://api.github.com/orgs/chaoss/events",
              "hooks_url": "https://api.github.com/orgs/chaoss/hooks",
              "issues_url": "https://api.github.com/orgs/chaoss/issues",
              "members_url": "https://api.github.com/orgs/chaoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/chaoss/public_members{/member}",
              "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
              "description": ""
            }
          ]
        },
        "reactions_data": []
      },
      {
        "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389360444",
        "pull_request_review_id": 370823066,
        "id": 389360444,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM2MDQ0NA==",
        "diff_hunk": "@@ -16,10 +16,12 @@\n # along with this program. If not, see <http://www.gnu.org/licenses/>.\n #\n # Authors:\n-#    Santiago Due\u00f1as <sduenas@bitergia.com>\n-#    J. Manrique L\u00f3pez de la Fuente <jsmanrique@bitergia.com>",
        "path": "perceval/backends/core/discourse.py",
        "position": 13,
        "original_position": 13,
        "commit_id": "168b57709bb0d1e7fe9b63e691f6784f8b35ada3",
        "original_commit_id": "9f882787650a6b5d3c9c5b931489f449c4f056cc",
        "user": {
          "login": "vchrombie",
          "id": 25265451,
          "node_id": "MDQ6VXNlcjI1MjY1NDUx",
          "avatar_url": "https://avatars2.githubusercontent.com/u/25265451?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/vchrombie",
          "html_url": "https://github.com/vchrombie",
          "followers_url": "https://api.github.com/users/vchrombie/followers",
          "following_url": "https://api.github.com/users/vchrombie/following{/other_user}",
          "gists_url": "https://api.github.com/users/vchrombie/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/vchrombie/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/vchrombie/subscriptions",
          "organizations_url": "https://api.github.com/users/vchrombie/orgs",
          "repos_url": "https://api.github.com/users/vchrombie/repos",
          "events_url": "https://api.github.com/users/vchrombie/events{/privacy}",
          "received_events_url": "https://api.github.com/users/vchrombie/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "> thanks! (I hope this isn't too much work)\r\n\r\nNot really but, I am worried that the script won't work well in such corner cases. ",
        "created_at": "2020-03-08T11:34:32Z",
        "updated_at": "2020-03-08T15:22:07Z",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/623#discussion_r389360444",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/623",
        "author_association": "CONTRIBUTOR",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389360444"
          },
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/623#discussion_r389360444"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/623"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389360444/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "in_reply_to_id": 389358580,
        "user_data": {
          "login": "vchrombie",
          "id": 25265451,
          "node_id": "MDQ6VXNlcjI1MjY1NDUx",
          "avatar_url": "https://avatars2.githubusercontent.com/u/25265451?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/vchrombie",
          "html_url": "https://github.com/vchrombie",
          "followers_url": "https://api.github.com/users/vchrombie/followers",
          "following_url": "https://api.github.com/users/vchrombie/following{/other_user}",
          "gists_url": "https://api.github.com/users/vchrombie/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/vchrombie/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/vchrombie/subscriptions",
          "organizations_url": "https://api.github.com/users/vchrombie/orgs",
          "repos_url": "https://api.github.com/users/vchrombie/repos",
          "events_url": "https://api.github.com/users/vchrombie/events{/privacy}",
          "received_events_url": "https://api.github.com/users/vchrombie/received_events",
          "type": "User",
          "site_admin": false,
          "name": "Venu Vardhan Reddy Tekula",
          "company": "@amfoss",
          "blog": "https://vchrombie.github.io/",
          "location": "Kollam",
          "email": "venuvardhanreddytekula8@gmail.com",
          "hireable": true,
          "bio": "Data Detective :chart_with_upwards_trend:",
          "public_repos": 71,
          "public_gists": 8,
          "followers": 108,
          "following": 118,
          "created_at": "2017-01-21T12:45:08Z",
          "updated_at": "2020-03-17T14:09:18Z",
          "organizations": [
            {
              "login": "amfoss",
              "id": 9362252,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjkzNjIyNTI=",
              "url": "https://api.github.com/orgs/amfoss",
              "repos_url": "https://api.github.com/orgs/amfoss/repos",
              "events_url": "https://api.github.com/orgs/amfoss/events",
              "hooks_url": "https://api.github.com/orgs/amfoss/hooks",
              "issues_url": "https://api.github.com/orgs/amfoss/issues",
              "members_url": "https://api.github.com/orgs/amfoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/amfoss/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/9362252?v=4",
              "description": "Student Community of Open Source Enthusiasts. We promote and contribute to FOSS, and mentor students for achieving excellence."
            },
            {
              "login": "hiddencodecademy",
              "id": 30184949,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjMwMTg0OTQ5",
              "url": "https://api.github.com/orgs/hiddencodecademy",
              "repos_url": "https://api.github.com/orgs/hiddencodecademy/repos",
              "events_url": "https://api.github.com/orgs/hiddencodecademy/events",
              "hooks_url": "https://api.github.com/orgs/hiddencodecademy/hooks",
              "issues_url": "https://api.github.com/orgs/hiddencodecademy/issues",
              "members_url": "https://api.github.com/orgs/hiddencodecademy/members{/member}",
              "public_members_url": "https://api.github.com/orgs/hiddencodecademy/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/30184949?v=4",
              "description": "This is a call to arms for all Codecademy users to find hidden courses, become a member of this org, and post it."
            },
            {
              "login": "scorpion-hut",
              "id": 39411466,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjM5NDExNDY2",
              "url": "https://api.github.com/orgs/scorpion-hut",
              "repos_url": "https://api.github.com/orgs/scorpion-hut/repos",
              "events_url": "https://api.github.com/orgs/scorpion-hut/events",
              "hooks_url": "https://api.github.com/orgs/scorpion-hut/hooks",
              "issues_url": "https://api.github.com/orgs/scorpion-hut/issues",
              "members_url": "https://api.github.com/orgs/scorpion-hut/members{/member}",
              "public_members_url": "https://api.github.com/orgs/scorpion-hut/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/39411466?v=4",
              "description": ""
            },
            {
              "login": "snitch3s",
              "id": 57801297,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjU3ODAxMjk3",
              "url": "https://api.github.com/orgs/snitch3s",
              "repos_url": "https://api.github.com/orgs/snitch3s/repos",
              "events_url": "https://api.github.com/orgs/snitch3s/events",
              "hooks_url": "https://api.github.com/orgs/snitch3s/hooks",
              "issues_url": "https://api.github.com/orgs/snitch3s/issues",
              "members_url": "https://api.github.com/orgs/snitch3s/members{/member}",
              "public_members_url": "https://api.github.com/orgs/snitch3s/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/57801297?v=4",
              "description": null
            }
          ]
        },
        "reactions_data": []
      },
      {
        "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389363105",
        "pull_request_review_id": 370825238,
        "id": 389363105,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM2MzEwNQ==",
        "diff_hunk": "@@ -16,10 +16,12 @@\n # along with this program. If not, see <http://www.gnu.org/licenses/>.\n #\n # Authors:\n-#    Santiago Due\u00f1as <sduenas@bitergia.com>\n-#    J. Manrique L\u00f3pez de la Fuente <jsmanrique@bitergia.com>",
        "path": "perceval/backends/core/discourse.py",
        "position": 13,
        "original_position": 13,
        "commit_id": "168b57709bb0d1e7fe9b63e691f6784f8b35ada3",
        "original_commit_id": "9f882787650a6b5d3c9c5b931489f449c4f056cc",
        "user": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "I see, I'd rely on the script and see how many corner cases pop up.",
        "created_at": "2020-03-08T12:10:13Z",
        "updated_at": "2020-03-08T15:22:07Z",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/623#discussion_r389363105",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/623",
        "author_association": "MEMBER",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389363105"
          },
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/623#discussion_r389363105"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/623"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389363105/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "in_reply_to_id": 389358580,
        "user_data": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false,
          "name": "valerio",
          "company": "@Bitergia ",
          "blog": "http://valeriocos.github.io/",
          "location": "Madrid, Spain",
          "email": "valcos@bitergia.com",
          "hireable": true,
          "bio": null,
          "public_repos": 57,
          "public_gists": 28,
          "followers": 34,
          "following": 5,
          "created_at": "2014-01-27T14:30:30Z",
          "updated_at": "2020-03-17T10:02:44Z",
          "organizations": [
            {
              "login": "Bitergia",
              "id": 1918070,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=",
              "url": "https://api.github.com/orgs/Bitergia",
              "repos_url": "https://api.github.com/orgs/Bitergia/repos",
              "events_url": "https://api.github.com/orgs/Bitergia/events",
              "hooks_url": "https://api.github.com/orgs/Bitergia/hooks",
              "issues_url": "https://api.github.com/orgs/Bitergia/issues",
              "members_url": "https://api.github.com/orgs/Bitergia/members{/member}",
              "public_members_url": "https://api.github.com/orgs/Bitergia/public_members{/member}",
              "avatar_url": "https://avatars3.githubusercontent.com/u/1918070?v=4",
              "description": null
            },
            {
              "login": "grimoirelab",
              "id": 16151805,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1",
              "url": "https://api.github.com/orgs/grimoirelab",
              "repos_url": "https://api.github.com/orgs/grimoirelab/repos",
              "events_url": "https://api.github.com/orgs/grimoirelab/events",
              "hooks_url": "https://api.github.com/orgs/grimoirelab/hooks",
              "issues_url": "https://api.github.com/orgs/grimoirelab/issues",
              "members_url": "https://api.github.com/orgs/grimoirelab/members{/member}",
              "public_members_url": "https://api.github.com/orgs/grimoirelab/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/16151805?v=4",
              "description": ""
            },
            {
              "login": "chaoss",
              "id": 29740296,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
              "url": "https://api.github.com/orgs/chaoss",
              "repos_url": "https://api.github.com/orgs/chaoss/repos",
              "events_url": "https://api.github.com/orgs/chaoss/events",
              "hooks_url": "https://api.github.com/orgs/chaoss/hooks",
              "issues_url": "https://api.github.com/orgs/chaoss/issues",
              "members_url": "https://api.github.com/orgs/chaoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/chaoss/public_members{/member}",
              "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
              "description": ""
            }
          ]
        },
        "reactions_data": []
      },
      {
        "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389371126",
        "pull_request_review_id": 370831512,
        "id": 389371126,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM3MTEyNg==",
        "diff_hunk": "@@ -18,9 +18,14 @@\n # Authors:\n #     Santiago Due\u00f1as <sduenas@bitergia.com>\n #     Germ\u00e1n Poo-Caama\u00f1o <gpoo@gnome.org>\n+#     Stephan Barth <stephan.barth@gmail.com>\n+#     valerio <valerio.cosentino@gmail.com>\n+#     Valerio Cosentino <valcos@bitergia.com>",
        "path": "perceval/backends/core/mbox.py",
        "position": null,
        "original_position": 14,
        "commit_id": "168b57709bb0d1e7fe9b63e691f6784f8b35ada3",
        "original_commit_id": "ab59b0140b09dedb7df2a84e2b1d90f4244536e2",
        "user": {
          "login": "vchrombie",
          "id": 25265451,
          "node_id": "MDQ6VXNlcjI1MjY1NDUx",
          "avatar_url": "https://avatars2.githubusercontent.com/u/25265451?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/vchrombie",
          "html_url": "https://github.com/vchrombie",
          "followers_url": "https://api.github.com/users/vchrombie/followers",
          "following_url": "https://api.github.com/users/vchrombie/following{/other_user}",
          "gists_url": "https://api.github.com/users/vchrombie/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/vchrombie/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/vchrombie/subscriptions",
          "organizations_url": "https://api.github.com/users/vchrombie/orgs",
          "repos_url": "https://api.github.com/users/vchrombie/repos",
          "events_url": "https://api.github.com/users/vchrombie/events{/privacy}",
          "received_events_url": "https://api.github.com/users/vchrombie/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "Hi @valeriocos \r\n\r\nJust a small doubt, do these both belong to you? :sweat_smile: \r\nIf yes, do I need to merge them or leave it like this?\r\n",
        "created_at": "2020-03-08T13:48:31Z",
        "updated_at": "2020-03-08T15:22:07Z",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/623#discussion_r389371126",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/623",
        "author_association": "CONTRIBUTOR",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389371126"
          },
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/623#discussion_r389371126"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/623"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389371126/reactions",
          "total_count": 1,
          "+1": 0,
          "-1": 0,
          "laugh": 1,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "user_data": {
          "login": "vchrombie",
          "id": 25265451,
          "node_id": "MDQ6VXNlcjI1MjY1NDUx",
          "avatar_url": "https://avatars2.githubusercontent.com/u/25265451?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/vchrombie",
          "html_url": "https://github.com/vchrombie",
          "followers_url": "https://api.github.com/users/vchrombie/followers",
          "following_url": "https://api.github.com/users/vchrombie/following{/other_user}",
          "gists_url": "https://api.github.com/users/vchrombie/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/vchrombie/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/vchrombie/subscriptions",
          "organizations_url": "https://api.github.com/users/vchrombie/orgs",
          "repos_url": "https://api.github.com/users/vchrombie/repos",
          "events_url": "https://api.github.com/users/vchrombie/events{/privacy}",
          "received_events_url": "https://api.github.com/users/vchrombie/received_events",
          "type": "User",
          "site_admin": false,
          "name": "Venu Vardhan Reddy Tekula",
          "company": "@amfoss",
          "blog": "https://vchrombie.github.io/",
          "location": "Kollam",
          "email": "venuvardhanreddytekula8@gmail.com",
          "hireable": true,
          "bio": "Data Detective :chart_with_upwards_trend:",
          "public_repos": 71,
          "public_gists": 8,
          "followers": 108,
          "following": 118,
          "created_at": "2017-01-21T12:45:08Z",
          "updated_at": "2020-03-17T14:09:18Z",
          "organizations": [
            {
              "login": "amfoss",
              "id": 9362252,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjkzNjIyNTI=",
              "url": "https://api.github.com/orgs/amfoss",
              "repos_url": "https://api.github.com/orgs/amfoss/repos",
              "events_url": "https://api.github.com/orgs/amfoss/events",
              "hooks_url": "https://api.github.com/orgs/amfoss/hooks",
              "issues_url": "https://api.github.com/orgs/amfoss/issues",
              "members_url": "https://api.github.com/orgs/amfoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/amfoss/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/9362252?v=4",
              "description": "Student Community of Open Source Enthusiasts. We promote and contribute to FOSS, and mentor students for achieving excellence."
            },
            {
              "login": "hiddencodecademy",
              "id": 30184949,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjMwMTg0OTQ5",
              "url": "https://api.github.com/orgs/hiddencodecademy",
              "repos_url": "https://api.github.com/orgs/hiddencodecademy/repos",
              "events_url": "https://api.github.com/orgs/hiddencodecademy/events",
              "hooks_url": "https://api.github.com/orgs/hiddencodecademy/hooks",
              "issues_url": "https://api.github.com/orgs/hiddencodecademy/issues",
              "members_url": "https://api.github.com/orgs/hiddencodecademy/members{/member}",
              "public_members_url": "https://api.github.com/orgs/hiddencodecademy/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/30184949?v=4",
              "description": "This is a call to arms for all Codecademy users to find hidden courses, become a member of this org, and post it."
            },
            {
              "login": "scorpion-hut",
              "id": 39411466,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjM5NDExNDY2",
              "url": "https://api.github.com/orgs/scorpion-hut",
              "repos_url": "https://api.github.com/orgs/scorpion-hut/repos",
              "events_url": "https://api.github.com/orgs/scorpion-hut/events",
              "hooks_url": "https://api.github.com/orgs/scorpion-hut/hooks",
              "issues_url": "https://api.github.com/orgs/scorpion-hut/issues",
              "members_url": "https://api.github.com/orgs/scorpion-hut/members{/member}",
              "public_members_url": "https://api.github.com/orgs/scorpion-hut/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/39411466?v=4",
              "description": ""
            },
            {
              "login": "snitch3s",
              "id": 57801297,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjU3ODAxMjk3",
              "url": "https://api.github.com/orgs/snitch3s",
              "repos_url": "https://api.github.com/orgs/snitch3s/repos",
              "events_url": "https://api.github.com/orgs/snitch3s/events",
              "hooks_url": "https://api.github.com/orgs/snitch3s/hooks",
              "issues_url": "https://api.github.com/orgs/snitch3s/issues",
              "members_url": "https://api.github.com/orgs/snitch3s/members{/member}",
              "public_members_url": "https://api.github.com/orgs/snitch3s/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/57801297?v=4",
              "description": null
            }
          ]
        },
        "reactions_data": [
          {
            "id": 64515179,
            "node_id": "MDg6UmVhY3Rpb242NDUxNTE3OQ==",
            "user": {
              "login": "valeriocos",
              "id": 6515067,
              "node_id": "MDQ6VXNlcjY1MTUwNjc=",
              "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/valeriocos",
              "html_url": "https://github.com/valeriocos",
              "followers_url": "https://api.github.com/users/valeriocos/followers",
              "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
              "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
              "organizations_url": "https://api.github.com/users/valeriocos/orgs",
              "repos_url": "https://api.github.com/users/valeriocos/repos",
              "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
              "received_events_url": "https://api.github.com/users/valeriocos/received_events",
              "type": "User",
              "site_admin": false
            },
            "content": "laugh",
            "created_at": "2020-03-08T13:59:54Z",
            "user_data": {
              "login": "valeriocos",
              "id": 6515067,
              "node_id": "MDQ6VXNlcjY1MTUwNjc=",
              "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/valeriocos",
              "html_url": "https://github.com/valeriocos",
              "followers_url": "https://api.github.com/users/valeriocos/followers",
              "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
              "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
              "organizations_url": "https://api.github.com/users/valeriocos/orgs",
              "repos_url": "https://api.github.com/users/valeriocos/repos",
              "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
              "received_events_url": "https://api.github.com/users/valeriocos/received_events",
              "type": "User",
              "site_admin": false,
              "name": "valerio",
              "company": "@Bitergia ",
              "blog": "http://valeriocos.github.io/",
              "location": "Madrid, Spain",
              "email": "valcos@bitergia.com",
              "hireable": true,
              "bio": null,
              "public_repos": 57,
              "public_gists": 28,
              "followers": 34,
              "following": 5,
              "created_at": "2014-01-27T14:30:30Z",
              "updated_at": "2020-03-17T10:02:44Z",
              "organizations": [
                {
                  "login": "Bitergia",
                  "id": 1918070,
                  "node_id": "MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=",
                  "url": "https://api.github.com/orgs/Bitergia",
                  "repos_url": "https://api.github.com/orgs/Bitergia/repos",
                  "events_url": "https://api.github.com/orgs/Bitergia/events",
                  "hooks_url": "https://api.github.com/orgs/Bitergia/hooks",
                  "issues_url": "https://api.github.com/orgs/Bitergia/issues",
                  "members_url": "https://api.github.com/orgs/Bitergia/members{/member}",
                  "public_members_url": "https://api.github.com/orgs/Bitergia/public_members{/member}",
                  "avatar_url": "https://avatars3.githubusercontent.com/u/1918070?v=4",
                  "description": null
                },
                {
                  "login": "grimoirelab",
                  "id": 16151805,
                  "node_id": "MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1",
                  "url": "https://api.github.com/orgs/grimoirelab",
                  "repos_url": "https://api.github.com/orgs/grimoirelab/repos",
                  "events_url": "https://api.github.com/orgs/grimoirelab/events",
                  "hooks_url": "https://api.github.com/orgs/grimoirelab/hooks",
                  "issues_url": "https://api.github.com/orgs/grimoirelab/issues",
                  "members_url": "https://api.github.com/orgs/grimoirelab/members{/member}",
                  "public_members_url": "https://api.github.com/orgs/grimoirelab/public_members{/member}",
                  "avatar_url": "https://avatars0.githubusercontent.com/u/16151805?v=4",
                  "description": ""
                },
                {
                  "login": "chaoss",
                  "id": 29740296,
                  "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
                  "url": "https://api.github.com/orgs/chaoss",
                  "repos_url": "https://api.github.com/orgs/chaoss/repos",
                  "events_url": "https://api.github.com/orgs/chaoss/events",
                  "hooks_url": "https://api.github.com/orgs/chaoss/hooks",
                  "issues_url": "https://api.github.com/orgs/chaoss/issues",
                  "members_url": "https://api.github.com/orgs/chaoss/members{/member}",
                  "public_members_url": "https://api.github.com/orgs/chaoss/public_members{/member}",
                  "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
                  "description": ""
                }
              ]
            }
          }
        ]
      },
      {
        "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389372136",
        "pull_request_review_id": 370832362,
        "id": 389372136,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM3MjEzNg==",
        "diff_hunk": "@@ -18,9 +18,14 @@\n # Authors:\n #     Santiago Due\u00f1as <sduenas@bitergia.com>\n #     Germ\u00e1n Poo-Caama\u00f1o <gpoo@gnome.org>\n+#     Stephan Barth <stephan.barth@gmail.com>\n+#     valerio <valerio.cosentino@gmail.com>\n+#     Valerio Cosentino <valcos@bitergia.com>",
        "path": "perceval/backends/core/mbox.py",
        "position": null,
        "original_position": 14,
        "commit_id": "168b57709bb0d1e7fe9b63e691f6784f8b35ada3",
        "original_commit_id": "ab59b0140b09dedb7df2a84e2b1d90f4244536e2",
        "user": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "eheh thanks! yes, it belongs to me, can you merge them?",
        "created_at": "2020-03-08T14:00:53Z",
        "updated_at": "2020-03-08T15:22:07Z",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/623#discussion_r389372136",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/623",
        "author_association": "MEMBER",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389372136"
          },
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/623#discussion_r389372136"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/623"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389372136/reactions",
          "total_count": 1,
          "+1": 1,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "in_reply_to_id": 389371126,
        "user_data": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false,
          "name": "valerio",
          "company": "@Bitergia ",
          "blog": "http://valeriocos.github.io/",
          "location": "Madrid, Spain",
          "email": "valcos@bitergia.com",
          "hireable": true,
          "bio": null,
          "public_repos": 57,
          "public_gists": 28,
          "followers": 34,
          "following": 5,
          "created_at": "2014-01-27T14:30:30Z",
          "updated_at": "2020-03-17T10:02:44Z",
          "organizations": [
            {
              "login": "Bitergia",
              "id": 1918070,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=",
              "url": "https://api.github.com/orgs/Bitergia",
              "repos_url": "https://api.github.com/orgs/Bitergia/repos",
              "events_url": "https://api.github.com/orgs/Bitergia/events",
              "hooks_url": "https://api.github.com/orgs/Bitergia/hooks",
              "issues_url": "https://api.github.com/orgs/Bitergia/issues",
              "members_url": "https://api.github.com/orgs/Bitergia/members{/member}",
              "public_members_url": "https://api.github.com/orgs/Bitergia/public_members{/member}",
              "avatar_url": "https://avatars3.githubusercontent.com/u/1918070?v=4",
              "description": null
            },
            {
              "login": "grimoirelab",
              "id": 16151805,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1",
              "url": "https://api.github.com/orgs/grimoirelab",
              "repos_url": "https://api.github.com/orgs/grimoirelab/repos",
              "events_url": "https://api.github.com/orgs/grimoirelab/events",
              "hooks_url": "https://api.github.com/orgs/grimoirelab/hooks",
              "issues_url": "https://api.github.com/orgs/grimoirelab/issues",
              "members_url": "https://api.github.com/orgs/grimoirelab/members{/member}",
              "public_members_url": "https://api.github.com/orgs/grimoirelab/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/16151805?v=4",
              "description": ""
            },
            {
              "login": "chaoss",
              "id": 29740296,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
              "url": "https://api.github.com/orgs/chaoss",
              "repos_url": "https://api.github.com/orgs/chaoss/repos",
              "events_url": "https://api.github.com/orgs/chaoss/events",
              "hooks_url": "https://api.github.com/orgs/chaoss/hooks",
              "issues_url": "https://api.github.com/orgs/chaoss/issues",
              "members_url": "https://api.github.com/orgs/chaoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/chaoss/public_members{/member}",
              "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
              "description": ""
            }
          ]
        },
        "reactions_data": [
          {
            "id": 64515828,
            "node_id": "MDg6UmVhY3Rpb242NDUxNTgyOA==",
            "user": {
              "login": "vchrombie",
              "id": 25265451,
              "node_id": "MDQ6VXNlcjI1MjY1NDUx",
              "avatar_url": "https://avatars2.githubusercontent.com/u/25265451?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/vchrombie",
              "html_url": "https://github.com/vchrombie",
              "followers_url": "https://api.github.com/users/vchrombie/followers",
              "following_url": "https://api.github.com/users/vchrombie/following{/other_user}",
              "gists_url": "https://api.github.com/users/vchrombie/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/vchrombie/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/vchrombie/subscriptions",
              "organizations_url": "https://api.github.com/users/vchrombie/orgs",
              "repos_url": "https://api.github.com/users/vchrombie/repos",
              "events_url": "https://api.github.com/users/vchrombie/events{/privacy}",
              "received_events_url": "https://api.github.com/users/vchrombie/received_events",
              "type": "User",
              "site_admin": false
            },
            "content": "+1",
            "created_at": "2020-03-08T14:27:52Z",
            "user_data": {
              "login": "vchrombie",
              "id": 25265451,
              "node_id": "MDQ6VXNlcjI1MjY1NDUx",
              "avatar_url": "https://avatars2.githubusercontent.com/u/25265451?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/vchrombie",
              "html_url": "https://github.com/vchrombie",
              "followers_url": "https://api.github.com/users/vchrombie/followers",
              "following_url": "https://api.github.com/users/vchrombie/following{/other_user}",
              "gists_url": "https://api.github.com/users/vchrombie/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/vchrombie/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/vchrombie/subscriptions",
              "organizations_url": "https://api.github.com/users/vchrombie/orgs",
              "repos_url": "https://api.github.com/users/vchrombie/repos",
              "events_url": "https://api.github.com/users/vchrombie/events{/privacy}",
              "received_events_url": "https://api.github.com/users/vchrombie/received_events",
              "type": "User",
              "site_admin": false,
              "name": "Venu Vardhan Reddy Tekula",
              "company": "@amfoss",
              "blog": "https://vchrombie.github.io/",
              "location": "Kollam",
              "email": "venuvardhanreddytekula8@gmail.com",
              "hireable": true,
              "bio": "Data Detective :chart_with_upwards_trend:",
              "public_repos": 71,
              "public_gists": 8,
              "followers": 108,
              "following": 118,
              "created_at": "2017-01-21T12:45:08Z",
              "updated_at": "2020-03-17T14:09:18Z",
              "organizations": [
                {
                  "login": "amfoss",
                  "id": 9362252,
                  "node_id": "MDEyOk9yZ2FuaXphdGlvbjkzNjIyNTI=",
                  "url": "https://api.github.com/orgs/amfoss",
                  "repos_url": "https://api.github.com/orgs/amfoss/repos",
                  "events_url": "https://api.github.com/orgs/amfoss/events",
                  "hooks_url": "https://api.github.com/orgs/amfoss/hooks",
                  "issues_url": "https://api.github.com/orgs/amfoss/issues",
                  "members_url": "https://api.github.com/orgs/amfoss/members{/member}",
                  "public_members_url": "https://api.github.com/orgs/amfoss/public_members{/member}",
                  "avatar_url": "https://avatars0.githubusercontent.com/u/9362252?v=4",
                  "description": "Student Community of Open Source Enthusiasts. We promote and contribute to FOSS, and mentor students for achieving excellence."
                },
                {
                  "login": "hiddencodecademy",
                  "id": 30184949,
                  "node_id": "MDEyOk9yZ2FuaXphdGlvbjMwMTg0OTQ5",
                  "url": "https://api.github.com/orgs/hiddencodecademy",
                  "repos_url": "https://api.github.com/orgs/hiddencodecademy/repos",
                  "events_url": "https://api.github.com/orgs/hiddencodecademy/events",
                  "hooks_url": "https://api.github.com/orgs/hiddencodecademy/hooks",
                  "issues_url": "https://api.github.com/orgs/hiddencodecademy/issues",
                  "members_url": "https://api.github.com/orgs/hiddencodecademy/members{/member}",
                  "public_members_url": "https://api.github.com/orgs/hiddencodecademy/public_members{/member}",
                  "avatar_url": "https://avatars0.githubusercontent.com/u/30184949?v=4",
                  "description": "This is a call to arms for all Codecademy users to find hidden courses, become a member of this org, and post it."
                },
                {
                  "login": "scorpion-hut",
                  "id": 39411466,
                  "node_id": "MDEyOk9yZ2FuaXphdGlvbjM5NDExNDY2",
                  "url": "https://api.github.com/orgs/scorpion-hut",
                  "repos_url": "https://api.github.com/orgs/scorpion-hut/repos",
                  "events_url": "https://api.github.com/orgs/scorpion-hut/events",
                  "hooks_url": "https://api.github.com/orgs/scorpion-hut/hooks",
                  "issues_url": "https://api.github.com/orgs/scorpion-hut/issues",
                  "members_url": "https://api.github.com/orgs/scorpion-hut/members{/member}",
                  "public_members_url": "https://api.github.com/orgs/scorpion-hut/public_members{/member}",
                  "avatar_url": "https://avatars0.githubusercontent.com/u/39411466?v=4",
                  "description": ""
                },
                {
                  "login": "snitch3s",
                  "id": 57801297,
                  "node_id": "MDEyOk9yZ2FuaXphdGlvbjU3ODAxMjk3",
                  "url": "https://api.github.com/orgs/snitch3s",
                  "repos_url": "https://api.github.com/orgs/snitch3s/repos",
                  "events_url": "https://api.github.com/orgs/snitch3s/events",
                  "hooks_url": "https://api.github.com/orgs/snitch3s/hooks",
                  "issues_url": "https://api.github.com/orgs/snitch3s/issues",
                  "members_url": "https://api.github.com/orgs/snitch3s/members{/member}",
                  "public_members_url": "https://api.github.com/orgs/snitch3s/public_members{/member}",
                  "avatar_url": "https://avatars0.githubusercontent.com/u/57801297?v=4",
                  "description": null
                }
              ]
            }
          }
        ]
      }
    ],
    "reviews_data": [
      {
        "id": 370821654,
        "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwODIxNjU0",
        "user": {
          "login": "vchrombie",
          "id": 25265451,
          "node_id": "MDQ6VXNlcjI1MjY1NDUx",
          "avatar_url": "https://avatars0.githubusercontent.com/u/25265451?u=a6d0e93f4aab2fea29424338d7aad9c92b5e9521&v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/vchrombie",
          "html_url": "https://github.com/vchrombie",
          "followers_url": "https://api.github.com/users/vchrombie/followers",
          "following_url": "https://api.github.com/users/vchrombie/following{/other_user}",
          "gists_url": "https://api.github.com/users/vchrombie/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/vchrombie/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/vchrombie/subscriptions",
          "organizations_url": "https://api.github.com/users/vchrombie/orgs",
          "repos_url": "https://api.github.com/users/vchrombie/repos",
          "events_url": "https://api.github.com/users/vchrombie/events{/privacy}",
          "received_events_url": "https://api.github.com/users/vchrombie/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "",
        "state": "COMMENTED",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/623#pullrequestreview-370821654",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/623",
        "author_association": "CONTRIBUTOR",
        "_links": {
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/623#pullrequestreview-370821654"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/623"
          }
        },
        "submitted_at": "2020-03-08T11:09:20Z",
        "commit_id": "9f882787650a6b5d3c9c5b931489f449c4f056cc",
        "user_data": {
          "login": "vchrombie",
          "id": 25265451,
          "node_id": "MDQ6VXNlcjI1MjY1NDUx",
          "avatar_url": "https://avatars2.githubusercontent.com/u/25265451?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/vchrombie",
          "html_url": "https://github.com/vchrombie",
          "followers_url": "https://api.github.com/users/vchrombie/followers",
          "following_url": "https://api.github.com/users/vchrombie/following{/other_user}",
          "gists_url": "https://api.github.com/users/vchrombie/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/vchrombie/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/vchrombie/subscriptions",
          "organizations_url": "https://api.github.com/users/vchrombie/orgs",
          "repos_url": "https://api.github.com/users/vchrombie/repos",
          "events_url": "https://api.github.com/users/vchrombie/events{/privacy}",
          "received_events_url": "https://api.github.com/users/vchrombie/received_events",
          "type": "User",
          "site_admin": false,
          "name": "Venu Vardhan Reddy Tekula",
          "company": "@amfoss",
          "blog": "https://vchrombie.github.io/",
          "location": "Kollam",
          "email": "venuvardhanreddytekula8@gmail.com",
          "hireable": true,
          "bio": "Data Detective :chart_with_upwards_trend:",
          "public_repos": 71,
          "public_gists": 8,
          "followers": 108,
          "following": 118,
          "created_at": "2017-01-21T12:45:08Z",
          "updated_at": "2020-03-17T14:09:18Z",
          "organizations": [
            {
              "login": "amfoss",
              "id": 9362252,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjkzNjIyNTI=",
              "url": "https://api.github.com/orgs/amfoss",
              "repos_url": "https://api.github.com/orgs/amfoss/repos",
              "events_url": "https://api.github.com/orgs/amfoss/events",
              "hooks_url": "https://api.github.com/orgs/amfoss/hooks",
              "issues_url": "https://api.github.com/orgs/amfoss/issues",
              "members_url": "https://api.github.com/orgs/amfoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/amfoss/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/9362252?v=4",
              "description": "Student Community of Open Source Enthusiasts. We promote and contribute to FOSS, and mentor students for achieving excellence."
            },
            {
              "login": "hiddencodecademy",
              "id": 30184949,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjMwMTg0OTQ5",
              "url": "https://api.github.com/orgs/hiddencodecademy",
              "repos_url": "https://api.github.com/orgs/hiddencodecademy/repos",
              "events_url": "https://api.github.com/orgs/hiddencodecademy/events",
              "hooks_url": "https://api.github.com/orgs/hiddencodecademy/hooks",
              "issues_url": "https://api.github.com/orgs/hiddencodecademy/issues",
              "members_url": "https://api.github.com/orgs/hiddencodecademy/members{/member}",
              "public_members_url": "https://api.github.com/orgs/hiddencodecademy/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/30184949?v=4",
              "description": "This is a call to arms for all Codecademy users to find hidden courses, become a member of this org, and post it."
            },
            {
              "login": "scorpion-hut",
              "id": 39411466,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjM5NDExNDY2",
              "url": "https://api.github.com/orgs/scorpion-hut",
              "repos_url": "https://api.github.com/orgs/scorpion-hut/repos",
              "events_url": "https://api.github.com/orgs/scorpion-hut/events",
              "hooks_url": "https://api.github.com/orgs/scorpion-hut/hooks",
              "issues_url": "https://api.github.com/orgs/scorpion-hut/issues",
              "members_url": "https://api.github.com/orgs/scorpion-hut/members{/member}",
              "public_members_url": "https://api.github.com/orgs/scorpion-hut/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/39411466?v=4",
              "description": ""
            },
            {
              "login": "snitch3s",
              "id": 57801297,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjU3ODAxMjk3",
              "url": "https://api.github.com/orgs/snitch3s",
              "repos_url": "https://api.github.com/orgs/snitch3s/repos",
              "events_url": "https://api.github.com/orgs/snitch3s/events",
              "hooks_url": "https://api.github.com/orgs/snitch3s/hooks",
              "issues_url": "https://api.github.com/orgs/snitch3s/issues",
              "members_url": "https://api.github.com/orgs/snitch3s/members{/member}",
              "public_members_url": "https://api.github.com/orgs/snitch3s/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/57801297?v=4",
              "description": null
            }
          ]
        }
      },
      {
        "id": 370822071,
        "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwODIyMDcx",
        "user": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars1.githubusercontent.com/u/6515067?u=8faaf11c054b78ac20f492bb634757233ccad9c4&v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "",
        "state": "COMMENTED",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/623#pullrequestreview-370822071",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/623",
        "author_association": "MEMBER",
        "_links": {
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/623#pullrequestreview-370822071"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/623"
          }
        },
        "submitted_at": "2020-03-08T11:17:22Z",
        "commit_id": "9f882787650a6b5d3c9c5b931489f449c4f056cc",
        "user_data": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false,
          "name": "valerio",
          "company": "@Bitergia ",
          "blog": "http://valeriocos.github.io/",
          "location": "Madrid, Spain",
          "email": "valcos@bitergia.com",
          "hireable": true,
          "bio": null,
          "public_repos": 57,
          "public_gists": 28,
          "followers": 34,
          "following": 5,
          "created_at": "2014-01-27T14:30:30Z",
          "updated_at": "2020-03-17T10:02:44Z",
          "organizations": [
            {
              "login": "Bitergia",
              "id": 1918070,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=",
              "url": "https://api.github.com/orgs/Bitergia",
              "repos_url": "https://api.github.com/orgs/Bitergia/repos",
              "events_url": "https://api.github.com/orgs/Bitergia/events",
              "hooks_url": "https://api.github.com/orgs/Bitergia/hooks",
              "issues_url": "https://api.github.com/orgs/Bitergia/issues",
              "members_url": "https://api.github.com/orgs/Bitergia/members{/member}",
              "public_members_url": "https://api.github.com/orgs/Bitergia/public_members{/member}",
              "avatar_url": "https://avatars3.githubusercontent.com/u/1918070?v=4",
              "description": null
            },
            {
              "login": "grimoirelab",
              "id": 16151805,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1",
              "url": "https://api.github.com/orgs/grimoirelab",
              "repos_url": "https://api.github.com/orgs/grimoirelab/repos",
              "events_url": "https://api.github.com/orgs/grimoirelab/events",
              "hooks_url": "https://api.github.com/orgs/grimoirelab/hooks",
              "issues_url": "https://api.github.com/orgs/grimoirelab/issues",
              "members_url": "https://api.github.com/orgs/grimoirelab/members{/member}",
              "public_members_url": "https://api.github.com/orgs/grimoirelab/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/16151805?v=4",
              "description": ""
            },
            {
              "login": "chaoss",
              "id": 29740296,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
              "url": "https://api.github.com/orgs/chaoss",
              "repos_url": "https://api.github.com/orgs/chaoss/repos",
              "events_url": "https://api.github.com/orgs/chaoss/events",
              "hooks_url": "https://api.github.com/orgs/chaoss/hooks",
              "issues_url": "https://api.github.com/orgs/chaoss/issues",
              "members_url": "https://api.github.com/orgs/chaoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/chaoss/public_members{/member}",
              "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
              "description": ""
            }
          ]
        }
      },
      {
        "id": 370822471,
        "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwODIyNDcx",
        "user": {
          "login": "vchrombie",
          "id": 25265451,
          "node_id": "MDQ6VXNlcjI1MjY1NDUx",
          "avatar_url": "https://avatars0.githubusercontent.com/u/25265451?u=a6d0e93f4aab2fea29424338d7aad9c92b5e9521&v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/vchrombie",
          "html_url": "https://github.com/vchrombie",
          "followers_url": "https://api.github.com/users/vchrombie/followers",
          "following_url": "https://api.github.com/users/vchrombie/following{/other_user}",
          "gists_url": "https://api.github.com/users/vchrombie/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/vchrombie/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/vchrombie/subscriptions",
          "organizations_url": "https://api.github.com/users/vchrombie/orgs",
          "repos_url": "https://api.github.com/users/vchrombie/repos",
          "events_url": "https://api.github.com/users/vchrombie/events{/privacy}",
          "received_events_url": "https://api.github.com/users/vchrombie/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "",
        "state": "COMMENTED",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/623#pullrequestreview-370822471",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/623",
        "author_association": "CONTRIBUTOR",
        "_links": {
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/623#pullrequestreview-370822471"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/623"
          }
        },
        "submitted_at": "2020-03-08T11:24:57Z",
        "commit_id": "9f882787650a6b5d3c9c5b931489f449c4f056cc",
        "user_data": {
          "login": "vchrombie",
          "id": 25265451,
          "node_id": "MDQ6VXNlcjI1MjY1NDUx",
          "avatar_url": "https://avatars2.githubusercontent.com/u/25265451?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/vchrombie",
          "html_url": "https://github.com/vchrombie",
          "followers_url": "https://api.github.com/users/vchrombie/followers",
          "following_url": "https://api.github.com/users/vchrombie/following{/other_user}",
          "gists_url": "https://api.github.com/users/vchrombie/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/vchrombie/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/vchrombie/subscriptions",
          "organizations_url": "https://api.github.com/users/vchrombie/orgs",
          "repos_url": "https://api.github.com/users/vchrombie/repos",
          "events_url": "https://api.github.com/users/vchrombie/events{/privacy}",
          "received_events_url": "https://api.github.com/users/vchrombie/received_events",
          "type": "User",
          "site_admin": false,
          "name": "Venu Vardhan Reddy Tekula",
          "company": "@amfoss",
          "blog": "https://vchrombie.github.io/",
          "location": "Kollam",
          "email": "venuvardhanreddytekula8@gmail.com",
          "hireable": true,
          "bio": "Data Detective :chart_with_upwards_trend:",
          "public_repos": 71,
          "public_gists": 8,
          "followers": 108,
          "following": 118,
          "created_at": "2017-01-21T12:45:08Z",
          "updated_at": "2020-03-17T14:09:18Z",
          "organizations": [
            {
              "login": "amfoss",
              "id": 9362252,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjkzNjIyNTI=",
              "url": "https://api.github.com/orgs/amfoss",
              "repos_url": "https://api.github.com/orgs/amfoss/repos",
              "events_url": "https://api.github.com/orgs/amfoss/events",
              "hooks_url": "https://api.github.com/orgs/amfoss/hooks",
              "issues_url": "https://api.github.com/orgs/amfoss/issues",
              "members_url": "https://api.github.com/orgs/amfoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/amfoss/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/9362252?v=4",
              "description": "Student Community of Open Source Enthusiasts. We promote and contribute to FOSS, and mentor students for achieving excellence."
            },
            {
              "login": "hiddencodecademy",
              "id": 30184949,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjMwMTg0OTQ5",
              "url": "https://api.github.com/orgs/hiddencodecademy",
              "repos_url": "https://api.github.com/orgs/hiddencodecademy/repos",
              "events_url": "https://api.github.com/orgs/hiddencodecademy/events",
              "hooks_url": "https://api.github.com/orgs/hiddencodecademy/hooks",
              "issues_url": "https://api.github.com/orgs/hiddencodecademy/issues",
              "members_url": "https://api.github.com/orgs/hiddencodecademy/members{/member}",
              "public_members_url": "https://api.github.com/orgs/hiddencodecademy/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/30184949?v=4",
              "description": "This is a call to arms for all Codecademy users to find hidden courses, become a member of this org, and post it."
            },
            {
              "login": "scorpion-hut",
              "id": 39411466,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjM5NDExNDY2",
              "url": "https://api.github.com/orgs/scorpion-hut",
              "repos_url": "https://api.github.com/orgs/scorpion-hut/repos",
              "events_url": "https://api.github.com/orgs/scorpion-hut/events",
              "hooks_url": "https://api.github.com/orgs/scorpion-hut/hooks",
              "issues_url": "https://api.github.com/orgs/scorpion-hut/issues",
              "members_url": "https://api.github.com/orgs/scorpion-hut/members{/member}",
              "public_members_url": "https://api.github.com/orgs/scorpion-hut/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/39411466?v=4",
              "description": ""
            },
            {
              "login": "snitch3s",
              "id": 57801297,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjU3ODAxMjk3",
              "url": "https://api.github.com/orgs/snitch3s",
              "repos_url": "https://api.github.com/orgs/snitch3s/repos",
              "events_url": "https://api.github.com/orgs/snitch3s/events",
              "hooks_url": "https://api.github.com/orgs/snitch3s/hooks",
              "issues_url": "https://api.github.com/orgs/snitch3s/issues",
              "members_url": "https://api.github.com/orgs/snitch3s/members{/member}",
              "public_members_url": "https://api.github.com/orgs/snitch3s/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/57801297?v=4",
              "description": null
            }
          ]
        }
      },
      {
        "id": 370822713,
        "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwODIyNzEz",
        "user": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars1.githubusercontent.com/u/6515067?u=8faaf11c054b78ac20f492bb634757233ccad9c4&v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "",
        "state": "COMMENTED",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/623#pullrequestreview-370822713",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/623",
        "author_association": "MEMBER",
        "_links": {
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/623#pullrequestreview-370822713"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/623"
          }
        },
        "submitted_at": "2020-03-08T11:29:01Z",
        "commit_id": "9f882787650a6b5d3c9c5b931489f449c4f056cc",
        "user_data": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false,
          "name": "valerio",
          "company": "@Bitergia ",
          "blog": "http://valeriocos.github.io/",
          "location": "Madrid, Spain",
          "email": "valcos@bitergia.com",
          "hireable": true,
          "bio": null,
          "public_repos": 57,
          "public_gists": 28,
          "followers": 34,
          "following": 5,
          "created_at": "2014-01-27T14:30:30Z",
          "updated_at": "2020-03-17T10:02:44Z",
          "organizations": [
            {
              "login": "Bitergia",
              "id": 1918070,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=",
              "url": "https://api.github.com/orgs/Bitergia",
              "repos_url": "https://api.github.com/orgs/Bitergia/repos",
              "events_url": "https://api.github.com/orgs/Bitergia/events",
              "hooks_url": "https://api.github.com/orgs/Bitergia/hooks",
              "issues_url": "https://api.github.com/orgs/Bitergia/issues",
              "members_url": "https://api.github.com/orgs/Bitergia/members{/member}",
              "public_members_url": "https://api.github.com/orgs/Bitergia/public_members{/member}",
              "avatar_url": "https://avatars3.githubusercontent.com/u/1918070?v=4",
              "description": null
            },
            {
              "login": "grimoirelab",
              "id": 16151805,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1",
              "url": "https://api.github.com/orgs/grimoirelab",
              "repos_url": "https://api.github.com/orgs/grimoirelab/repos",
              "events_url": "https://api.github.com/orgs/grimoirelab/events",
              "hooks_url": "https://api.github.com/orgs/grimoirelab/hooks",
              "issues_url": "https://api.github.com/orgs/grimoirelab/issues",
              "members_url": "https://api.github.com/orgs/grimoirelab/members{/member}",
              "public_members_url": "https://api.github.com/orgs/grimoirelab/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/16151805?v=4",
              "description": ""
            },
            {
              "login": "chaoss",
              "id": 29740296,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
              "url": "https://api.github.com/orgs/chaoss",
              "repos_url": "https://api.github.com/orgs/chaoss/repos",
              "events_url": "https://api.github.com/orgs/chaoss/events",
              "hooks_url": "https://api.github.com/orgs/chaoss/hooks",
              "issues_url": "https://api.github.com/orgs/chaoss/issues",
              "members_url": "https://api.github.com/orgs/chaoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/chaoss/public_members{/member}",
              "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
              "description": ""
            }
          ]
        }
      },
      {
        "id": 370823066,
        "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwODIzMDY2",
        "user": {
          "login": "vchrombie",
          "id": 25265451,
          "node_id": "MDQ6VXNlcjI1MjY1NDUx",
          "avatar_url": "https://avatars0.githubusercontent.com/u/25265451?u=a6d0e93f4aab2fea29424338d7aad9c92b5e9521&v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/vchrombie",
          "html_url": "https://github.com/vchrombie",
          "followers_url": "https://api.github.com/users/vchrombie/followers",
          "following_url": "https://api.github.com/users/vchrombie/following{/other_user}",
          "gists_url": "https://api.github.com/users/vchrombie/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/vchrombie/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/vchrombie/subscriptions",
          "organizations_url": "https://api.github.com/users/vchrombie/orgs",
          "repos_url": "https://api.github.com/users/vchrombie/repos",
          "events_url": "https://api.github.com/users/vchrombie/events{/privacy}",
          "received_events_url": "https://api.github.com/users/vchrombie/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "",
        "state": "COMMENTED",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/623#pullrequestreview-370823066",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/623",
        "author_association": "CONTRIBUTOR",
        "_links": {
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/623#pullrequestreview-370823066"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/623"
          }
        },
        "submitted_at": "2020-03-08T11:34:32Z",
        "commit_id": "9f882787650a6b5d3c9c5b931489f449c4f056cc",
        "user_data": {
          "login": "vchrombie",
          "id": 25265451,
          "node_id": "MDQ6VXNlcjI1MjY1NDUx",
          "avatar_url": "https://avatars2.githubusercontent.com/u/25265451?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/vchrombie",
          "html_url": "https://github.com/vchrombie",
          "followers_url": "https://api.github.com/users/vchrombie/followers",
          "following_url": "https://api.github.com/users/vchrombie/following{/other_user}",
          "gists_url": "https://api.github.com/users/vchrombie/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/vchrombie/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/vchrombie/subscriptions",
          "organizations_url": "https://api.github.com/users/vchrombie/orgs",
          "repos_url": "https://api.github.com/users/vchrombie/repos",
          "events_url": "https://api.github.com/users/vchrombie/events{/privacy}",
          "received_events_url": "https://api.github.com/users/vchrombie/received_events",
          "type": "User",
          "site_admin": false,
          "name": "Venu Vardhan Reddy Tekula",
          "company": "@amfoss",
          "blog": "https://vchrombie.github.io/",
          "location": "Kollam",
          "email": "venuvardhanreddytekula8@gmail.com",
          "hireable": true,
          "bio": "Data Detective :chart_with_upwards_trend:",
          "public_repos": 71,
          "public_gists": 8,
          "followers": 108,
          "following": 118,
          "created_at": "2017-01-21T12:45:08Z",
          "updated_at": "2020-03-17T14:09:18Z",
          "organizations": [
            {
              "login": "amfoss",
              "id": 9362252,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjkzNjIyNTI=",
              "url": "https://api.github.com/orgs/amfoss",
              "repos_url": "https://api.github.com/orgs/amfoss/repos",
              "events_url": "https://api.github.com/orgs/amfoss/events",
              "hooks_url": "https://api.github.com/orgs/amfoss/hooks",
              "issues_url": "https://api.github.com/orgs/amfoss/issues",
              "members_url": "https://api.github.com/orgs/amfoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/amfoss/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/9362252?v=4",
              "description": "Student Community of Open Source Enthusiasts. We promote and contribute to FOSS, and mentor students for achieving excellence."
            },
            {
              "login": "hiddencodecademy",
              "id": 30184949,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjMwMTg0OTQ5",
              "url": "https://api.github.com/orgs/hiddencodecademy",
              "repos_url": "https://api.github.com/orgs/hiddencodecademy/repos",
              "events_url": "https://api.github.com/orgs/hiddencodecademy/events",
              "hooks_url": "https://api.github.com/orgs/hiddencodecademy/hooks",
              "issues_url": "https://api.github.com/orgs/hiddencodecademy/issues",
              "members_url": "https://api.github.com/orgs/hiddencodecademy/members{/member}",
              "public_members_url": "https://api.github.com/orgs/hiddencodecademy/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/30184949?v=4",
              "description": "This is a call to arms for all Codecademy users to find hidden courses, become a member of this org, and post it."
            },
            {
              "login": "scorpion-hut",
              "id": 39411466,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjM5NDExNDY2",
              "url": "https://api.github.com/orgs/scorpion-hut",
              "repos_url": "https://api.github.com/orgs/scorpion-hut/repos",
              "events_url": "https://api.github.com/orgs/scorpion-hut/events",
              "hooks_url": "https://api.github.com/orgs/scorpion-hut/hooks",
              "issues_url": "https://api.github.com/orgs/scorpion-hut/issues",
              "members_url": "https://api.github.com/orgs/scorpion-hut/members{/member}",
              "public_members_url": "https://api.github.com/orgs/scorpion-hut/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/39411466?v=4",
              "description": ""
            },
            {
              "login": "snitch3s",
              "id": 57801297,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjU3ODAxMjk3",
              "url": "https://api.github.com/orgs/snitch3s",
              "repos_url": "https://api.github.com/orgs/snitch3s/repos",
              "events_url": "https://api.github.com/orgs/snitch3s/events",
              "hooks_url": "https://api.github.com/orgs/snitch3s/hooks",
              "issues_url": "https://api.github.com/orgs/snitch3s/issues",
              "members_url": "https://api.github.com/orgs/snitch3s/members{/member}",
              "public_members_url": "https://api.github.com/orgs/snitch3s/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/57801297?v=4",
              "description": null
            }
          ]
        }
      },
      {
        "id": 370825238,
        "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwODI1MjM4",
        "user": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars1.githubusercontent.com/u/6515067?u=8faaf11c054b78ac20f492bb634757233ccad9c4&v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "",
        "state": "COMMENTED",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/623#pullrequestreview-370825238",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/623",
        "author_association": "MEMBER",
        "_links": {
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/623#pullrequestreview-370825238"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/623"
          }
        },
        "submitted_at": "2020-03-08T12:10:14Z",
        "commit_id": "9f882787650a6b5d3c9c5b931489f449c4f056cc",
        "user_data": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false,
          "name": "valerio",
          "company": "@Bitergia ",
          "blog": "http://valeriocos.github.io/",
          "location": "Madrid, Spain",
          "email": "valcos@bitergia.com",
          "hireable": true,
          "bio": null,
          "public_repos": 57,
          "public_gists": 28,
          "followers": 34,
          "following": 5,
          "created_at": "2014-01-27T14:30:30Z",
          "updated_at": "2020-03-17T10:02:44Z",
          "organizations": [
            {
              "login": "Bitergia",
              "id": 1918070,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=",
              "url": "https://api.github.com/orgs/Bitergia",
              "repos_url": "https://api.github.com/orgs/Bitergia/repos",
              "events_url": "https://api.github.com/orgs/Bitergia/events",
              "hooks_url": "https://api.github.com/orgs/Bitergia/hooks",
              "issues_url": "https://api.github.com/orgs/Bitergia/issues",
              "members_url": "https://api.github.com/orgs/Bitergia/members{/member}",
              "public_members_url": "https://api.github.com/orgs/Bitergia/public_members{/member}",
              "avatar_url": "https://avatars3.githubusercontent.com/u/1918070?v=4",
              "description": null
            },
            {
              "login": "grimoirelab",
              "id": 16151805,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1",
              "url": "https://api.github.com/orgs/grimoirelab",
              "repos_url": "https://api.github.com/orgs/grimoirelab/repos",
              "events_url": "https://api.github.com/orgs/grimoirelab/events",
              "hooks_url": "https://api.github.com/orgs/grimoirelab/hooks",
              "issues_url": "https://api.github.com/orgs/grimoirelab/issues",
              "members_url": "https://api.github.com/orgs/grimoirelab/members{/member}",
              "public_members_url": "https://api.github.com/orgs/grimoirelab/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/16151805?v=4",
              "description": ""
            },
            {
              "login": "chaoss",
              "id": 29740296,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
              "url": "https://api.github.com/orgs/chaoss",
              "repos_url": "https://api.github.com/orgs/chaoss/repos",
              "events_url": "https://api.github.com/orgs/chaoss/events",
              "hooks_url": "https://api.github.com/orgs/chaoss/hooks",
              "issues_url": "https://api.github.com/orgs/chaoss/issues",
              "members_url": "https://api.github.com/orgs/chaoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/chaoss/public_members{/member}",
              "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
              "description": ""
            }
          ]
        }
      },
      {
        "id": 370831512,
        "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwODMxNTEy",
        "user": {
          "login": "vchrombie",
          "id": 25265451,
          "node_id": "MDQ6VXNlcjI1MjY1NDUx",
          "avatar_url": "https://avatars0.githubusercontent.com/u/25265451?u=a6d0e93f4aab2fea29424338d7aad9c92b5e9521&v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/vchrombie",
          "html_url": "https://github.com/vchrombie",
          "followers_url": "https://api.github.com/users/vchrombie/followers",
          "following_url": "https://api.github.com/users/vchrombie/following{/other_user}",
          "gists_url": "https://api.github.com/users/vchrombie/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/vchrombie/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/vchrombie/subscriptions",
          "organizations_url": "https://api.github.com/users/vchrombie/orgs",
          "repos_url": "https://api.github.com/users/vchrombie/repos",
          "events_url": "https://api.github.com/users/vchrombie/events{/privacy}",
          "received_events_url": "https://api.github.com/users/vchrombie/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "",
        "state": "COMMENTED",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/623#pullrequestreview-370831512",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/623",
        "author_association": "CONTRIBUTOR",
        "_links": {
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/623#pullrequestreview-370831512"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/623"
          }
        },
        "submitted_at": "2020-03-08T13:48:32Z",
        "commit_id": "ab59b0140b09dedb7df2a84e2b1d90f4244536e2",
        "user_data": {
          "login": "vchrombie",
          "id": 25265451,
          "node_id": "MDQ6VXNlcjI1MjY1NDUx",
          "avatar_url": "https://avatars2.githubusercontent.com/u/25265451?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/vchrombie",
          "html_url": "https://github.com/vchrombie",
          "followers_url": "https://api.github.com/users/vchrombie/followers",
          "following_url": "https://api.github.com/users/vchrombie/following{/other_user}",
          "gists_url": "https://api.github.com/users/vchrombie/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/vchrombie/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/vchrombie/subscriptions",
          "organizations_url": "https://api.github.com/users/vchrombie/orgs",
          "repos_url": "https://api.github.com/users/vchrombie/repos",
          "events_url": "https://api.github.com/users/vchrombie/events{/privacy}",
          "received_events_url": "https://api.github.com/users/vchrombie/received_events",
          "type": "User",
          "site_admin": false,
          "name": "Venu Vardhan Reddy Tekula",
          "company": "@amfoss",
          "blog": "https://vchrombie.github.io/",
          "location": "Kollam",
          "email": "venuvardhanreddytekula8@gmail.com",
          "hireable": true,
          "bio": "Data Detective :chart_with_upwards_trend:",
          "public_repos": 71,
          "public_gists": 8,
          "followers": 108,
          "following": 118,
          "created_at": "2017-01-21T12:45:08Z",
          "updated_at": "2020-03-17T14:09:18Z",
          "organizations": [
            {
              "login": "amfoss",
              "id": 9362252,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjkzNjIyNTI=",
              "url": "https://api.github.com/orgs/amfoss",
              "repos_url": "https://api.github.com/orgs/amfoss/repos",
              "events_url": "https://api.github.com/orgs/amfoss/events",
              "hooks_url": "https://api.github.com/orgs/amfoss/hooks",
              "issues_url": "https://api.github.com/orgs/amfoss/issues",
              "members_url": "https://api.github.com/orgs/amfoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/amfoss/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/9362252?v=4",
              "description": "Student Community of Open Source Enthusiasts. We promote and contribute to FOSS, and mentor students for achieving excellence."
            },
            {
              "login": "hiddencodecademy",
              "id": 30184949,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjMwMTg0OTQ5",
              "url": "https://api.github.com/orgs/hiddencodecademy",
              "repos_url": "https://api.github.com/orgs/hiddencodecademy/repos",
              "events_url": "https://api.github.com/orgs/hiddencodecademy/events",
              "hooks_url": "https://api.github.com/orgs/hiddencodecademy/hooks",
              "issues_url": "https://api.github.com/orgs/hiddencodecademy/issues",
              "members_url": "https://api.github.com/orgs/hiddencodecademy/members{/member}",
              "public_members_url": "https://api.github.com/orgs/hiddencodecademy/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/30184949?v=4",
              "description": "This is a call to arms for all Codecademy users to find hidden courses, become a member of this org, and post it."
            },
            {
              "login": "scorpion-hut",
              "id": 39411466,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjM5NDExNDY2",
              "url": "https://api.github.com/orgs/scorpion-hut",
              "repos_url": "https://api.github.com/orgs/scorpion-hut/repos",
              "events_url": "https://api.github.com/orgs/scorpion-hut/events",
              "hooks_url": "https://api.github.com/orgs/scorpion-hut/hooks",
              "issues_url": "https://api.github.com/orgs/scorpion-hut/issues",
              "members_url": "https://api.github.com/orgs/scorpion-hut/members{/member}",
              "public_members_url": "https://api.github.com/orgs/scorpion-hut/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/39411466?v=4",
              "description": ""
            },
            {
              "login": "snitch3s",
              "id": 57801297,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjU3ODAxMjk3",
              "url": "https://api.github.com/orgs/snitch3s",
              "repos_url": "https://api.github.com/orgs/snitch3s/repos",
              "events_url": "https://api.github.com/orgs/snitch3s/events",
              "hooks_url": "https://api.github.com/orgs/snitch3s/hooks",
              "issues_url": "https://api.github.com/orgs/snitch3s/issues",
              "members_url": "https://api.github.com/orgs/snitch3s/members{/member}",
              "public_members_url": "https://api.github.com/orgs/snitch3s/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/57801297?v=4",
              "description": null
            }
          ]
        }
      },
      {
        "id": 370832362,
        "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwODMyMzYy",
        "user": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars1.githubusercontent.com/u/6515067?u=8faaf11c054b78ac20f492bb634757233ccad9c4&v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "",
        "state": "COMMENTED",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/623#pullrequestreview-370832362",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/623",
        "author_association": "MEMBER",
        "_links": {
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/623#pullrequestreview-370832362"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/623"
          }
        },
        "submitted_at": "2020-03-08T14:00:54Z",
        "commit_id": "ab59b0140b09dedb7df2a84e2b1d90f4244536e2",
        "user_data": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false,
          "name": "valerio",
          "company": "@Bitergia ",
          "blog": "http://valeriocos.github.io/",
          "location": "Madrid, Spain",
          "email": "valcos@bitergia.com",
          "hireable": true,
          "bio": null,
          "public_repos": 57,
          "public_gists": 28,
          "followers": 34,
          "following": 5,
          "created_at": "2014-01-27T14:30:30Z",
          "updated_at": "2020-03-17T10:02:44Z",
          "organizations": [
            {
              "login": "Bitergia",
              "id": 1918070,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=",
              "url": "https://api.github.com/orgs/Bitergia",
              "repos_url": "https://api.github.com/orgs/Bitergia/repos",
              "events_url": "https://api.github.com/orgs/Bitergia/events",
              "hooks_url": "https://api.github.com/orgs/Bitergia/hooks",
              "issues_url": "https://api.github.com/orgs/Bitergia/issues",
              "members_url": "https://api.github.com/orgs/Bitergia/members{/member}",
              "public_members_url": "https://api.github.com/orgs/Bitergia/public_members{/member}",
              "avatar_url": "https://avatars3.githubusercontent.com/u/1918070?v=4",
              "description": null
            },
            {
              "login": "grimoirelab",
              "id": 16151805,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1",
              "url": "https://api.github.com/orgs/grimoirelab",
              "repos_url": "https://api.github.com/orgs/grimoirelab/repos",
              "events_url": "https://api.github.com/orgs/grimoirelab/events",
              "hooks_url": "https://api.github.com/orgs/grimoirelab/hooks",
              "issues_url": "https://api.github.com/orgs/grimoirelab/issues",
              "members_url": "https://api.github.com/orgs/grimoirelab/members{/member}",
              "public_members_url": "https://api.github.com/orgs/grimoirelab/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/16151805?v=4",
              "description": ""
            },
            {
              "login": "chaoss",
              "id": 29740296,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
              "url": "https://api.github.com/orgs/chaoss",
              "repos_url": "https://api.github.com/orgs/chaoss/repos",
              "events_url": "https://api.github.com/orgs/chaoss/events",
              "hooks_url": "https://api.github.com/orgs/chaoss/hooks",
              "issues_url": "https://api.github.com/orgs/chaoss/issues",
              "members_url": "https://api.github.com/orgs/chaoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/chaoss/public_members{/member}",
              "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
              "description": ""
            }
          ]
        }
      },
      {
        "id": 370836998,
        "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwODM2OTk4",
        "user": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars1.githubusercontent.com/u/6515067?u=8faaf11c054b78ac20f492bb634757233ccad9c4&v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "LGTM, thanks @vchrombie . Nice job!\r\n\r\nMinor comment: you should appear as an author of thes files, since this commit will modify them. However, I understand that:\r\n- if the script is executed by a bot, it wouldn't make sense to list the bot as an author\r\n- the next time the script is executed, you will be listed as an author\r\n\r\nIn a next iteration, you can try to target also the other files not targeted in this PR",
        "state": "APPROVED",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/623#pullrequestreview-370836998",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/623",
        "author_association": "MEMBER",
        "_links": {
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/623#pullrequestreview-370836998"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/623"
          }
        },
        "submitted_at": "2020-03-08T15:07:49Z",
        "commit_id": "bf4239c75dc909be551adb95ef4b6a760f1a48b4",
        "user_data": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false,
          "name": "valerio",
          "company": "@Bitergia ",
          "blog": "http://valeriocos.github.io/",
          "location": "Madrid, Spain",
          "email": "valcos@bitergia.com",
          "hireable": true,
          "bio": null,
          "public_repos": 57,
          "public_gists": 28,
          "followers": 34,
          "following": 5,
          "created_at": "2014-01-27T14:30:30Z",
          "updated_at": "2020-03-17T10:02:44Z",
          "organizations": [
            {
              "login": "Bitergia",
              "id": 1918070,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=",
              "url": "https://api.github.com/orgs/Bitergia",
              "repos_url": "https://api.github.com/orgs/Bitergia/repos",
              "events_url": "https://api.github.com/orgs/Bitergia/events",
              "hooks_url": "https://api.github.com/orgs/Bitergia/hooks",
              "issues_url": "https://api.github.com/orgs/Bitergia/issues",
              "members_url": "https://api.github.com/orgs/Bitergia/members{/member}",
              "public_members_url": "https://api.github.com/orgs/Bitergia/public_members{/member}",
              "avatar_url": "https://avatars3.githubusercontent.com/u/1918070?v=4",
              "description": null
            },
            {
              "login": "grimoirelab",
              "id": 16151805,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1",
              "url": "https://api.github.com/orgs/grimoirelab",
              "repos_url": "https://api.github.com/orgs/grimoirelab/repos",
              "events_url": "https://api.github.com/orgs/grimoirelab/events",
              "hooks_url": "https://api.github.com/orgs/grimoirelab/hooks",
              "issues_url": "https://api.github.com/orgs/grimoirelab/issues",
              "members_url": "https://api.github.com/orgs/grimoirelab/members{/member}",
              "public_members_url": "https://api.github.com/orgs/grimoirelab/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/16151805?v=4",
              "description": ""
            },
            {
              "login": "chaoss",
              "id": 29740296,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
              "url": "https://api.github.com/orgs/chaoss",
              "repos_url": "https://api.github.com/orgs/chaoss/repos",
              "events_url": "https://api.github.com/orgs/chaoss/events",
              "hooks_url": "https://api.github.com/orgs/chaoss/hooks",
              "issues_url": "https://api.github.com/orgs/chaoss/issues",
              "members_url": "https://api.github.com/orgs/chaoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/chaoss/public_members{/member}",
              "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
              "description": ""
            }
          ]
        }
      }
    ],
    "requested_reviewers_data": [],
    "merged_by_data": {
      "login": "valeriocos",
      "id": 6515067,
      "node_id": "MDQ6VXNlcjY1MTUwNjc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/valeriocos",
      "html_url": "https://github.com/valeriocos",
      "followers_url": "https://api.github.com/users/valeriocos/followers",
      "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
      "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
      "organizations_url": "https://api.github.com/users/valeriocos/orgs",
      "repos_url": "https://api.github.com/users/valeriocos/repos",
      "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/valeriocos/received_events",
      "type": "User",
      "site_admin": false,
      "name": "valerio",
      "company": "@Bitergia ",
      "blog": "http://valeriocos.github.io/",
      "location": "Madrid, Spain",
      "email": "valcos@bitergia.com",
      "hireable": true,
      "bio": null,
      "public_repos": 57,
      "public_gists": 28,
      "followers": 34,
      "following": 5,
      "created_at": "2014-01-27T14:30:30Z",
      "updated_at": "2020-03-17T10:02:44Z",
      "organizations": [
        {
          "login": "Bitergia",
          "id": 1918070,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=",
          "url": "https://api.github.com/orgs/Bitergia",
          "repos_url": "https://api.github.com/orgs/Bitergia/repos",
          "events_url": "https://api.github.com/orgs/Bitergia/events",
          "hooks_url": "https://api.github.com/orgs/Bitergia/hooks",
          "issues_url": "https://api.github.com/orgs/Bitergia/issues",
          "members_url": "https://api.github.com/orgs/Bitergia/members{/member}",
          "public_members_url": "https://api.github.com/orgs/Bitergia/public_members{/member}",
          "avatar_url": "https://avatars3.githubusercontent.com/u/1918070?v=4",
          "description": null
        },
        {
          "login": "grimoirelab",
          "id": 16151805,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1",
          "url": "https://api.github.com/orgs/grimoirelab",
          "repos_url": "https://api.github.com/orgs/grimoirelab/repos",
          "events_url": "https://api.github.com/orgs/grimoirelab/events",
          "hooks_url": "https://api.github.com/orgs/grimoirelab/hooks",
          "issues_url": "https://api.github.com/orgs/grimoirelab/issues",
          "members_url": "https://api.github.com/orgs/grimoirelab/members{/member}",
          "public_members_url": "https://api.github.com/orgs/grimoirelab/public_members{/member}",
          "avatar_url": "https://avatars0.githubusercontent.com/u/16151805?v=4",
          "description": ""
        },
        {
          "login": "chaoss",
          "id": 29740296,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
          "url": "https://api.github.com/orgs/chaoss",
          "repos_url": "https://api.github.com/orgs/chaoss/repos",
          "events_url": "https://api.github.com/orgs/chaoss/events",
          "hooks_url": "https://api.github.com/orgs/chaoss/hooks",
          "issues_url": "https://api.github.com/orgs/chaoss/issues",
          "members_url": "https://api.github.com/orgs/chaoss/members{/member}",
          "public_members_url": "https://api.github.com/orgs/chaoss/public_members{/member}",
          "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
          "description": ""
        }
      ]
    },
    "commits_data": [
      "168b57709bb0d1e7fe9b63e691f6784f8b35ada3"
    ]
  }
}{
  "backend_name": "GitHub",
  "backend_version": "0.25.1",
  "perceval_version": "0.12.24",
  "timestamp": 1584463765.880163,
  "origin": "https://github.com/chaoss/grimoirelab-perceval",
  "uuid": "6f709fe4621d4a84bb188cd9ef0b0b6577c50a7d",
  "updated_on": 1583692649.0,
  "classified_fields_filtered": null,
  "category": "pull_request",
  "search_fields": {
    "item_id": "382935344",
    "owner": "chaoss",
    "repo": "grimoirelab-perceval"
  },
  "tag": "https://github.com/chaoss/grimoirelab-perceval",
  "data": {
    "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621",
    "id": 382935344,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MzgyOTM1MzQ0",
    "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/621",
    "diff_url": "https://github.com/chaoss/grimoirelab-perceval/pull/621.diff",
    "patch_url": "https://github.com/chaoss/grimoirelab-perceval/pull/621.patch",
    "issue_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/issues/621",
    "number": 621,
    "state": "closed",
    "locked": false,
    "title": "[backend]Added support for Pagure backend",
    "user": {
      "login": "animeshk08",
      "id": 32506591,
      "node_id": "MDQ6VXNlcjMyNTA2NTkx",
      "avatar_url": "https://avatars1.githubusercontent.com/u/32506591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/animeshk08",
      "html_url": "https://github.com/animeshk08",
      "followers_url": "https://api.github.com/users/animeshk08/followers",
      "following_url": "https://api.github.com/users/animeshk08/following{/other_user}",
      "gists_url": "https://api.github.com/users/animeshk08/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/animeshk08/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/animeshk08/subscriptions",
      "organizations_url": "https://api.github.com/users/animeshk08/orgs",
      "repos_url": "https://api.github.com/users/animeshk08/repos",
      "events_url": "https://api.github.com/users/animeshk08/events{/privacy}",
      "received_events_url": "https://api.github.com/users/animeshk08/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This PR address issue #416.\r\nThis commit adds support for the pagure\r\nbackend to perceval\r\n\r\nSigned-off-by: animesh <animuz111@gmail.com>",
    "created_at": "2020-03-03T12:55:59Z",
    "updated_at": "2020-03-08T18:37:29Z",
    "closed_at": "2020-03-08T18:35:52Z",
    "merged_at": null,
    "merge_commit_sha": "05257cd04a807fc679a5f2255b4d0bdbe8e54964",
    "assignee": null,
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "labels": [],
    "milestone": null,
    "draft": false,
    "commits_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621/commits",
    "review_comments_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621/comments",
    "review_comment_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments{/number}",
    "comments_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/issues/621/comments",
    "statuses_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/statuses/70a89aa1dccc5152ed4a52cb4c5e4e327ba3595a",
    "head": {
      "label": "animeshk08:pagure-backend",
      "ref": "pagure-backend",
      "sha": "70a89aa1dccc5152ed4a52cb4c5e4e327ba3595a",
      "user": {
        "login": "animeshk08",
        "id": 32506591,
        "node_id": "MDQ6VXNlcjMyNTA2NTkx",
        "avatar_url": "https://avatars1.githubusercontent.com/u/32506591?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/animeshk08",
        "html_url": "https://github.com/animeshk08",
        "followers_url": "https://api.github.com/users/animeshk08/followers",
        "following_url": "https://api.github.com/users/animeshk08/following{/other_user}",
        "gists_url": "https://api.github.com/users/animeshk08/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/animeshk08/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/animeshk08/subscriptions",
        "organizations_url": "https://api.github.com/users/animeshk08/orgs",
        "repos_url": "https://api.github.com/users/animeshk08/repos",
        "events_url": "https://api.github.com/users/animeshk08/events{/privacy}",
        "received_events_url": "https://api.github.com/users/animeshk08/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 242646050,
        "node_id": "MDEwOlJlcG9zaXRvcnkyNDI2NDYwNTA=",
        "name": "grimoirelab-perceval",
        "full_name": "animeshk08/grimoirelab-perceval",
        "private": false,
        "owner": {
          "login": "animeshk08",
          "id": 32506591,
          "node_id": "MDQ6VXNlcjMyNTA2NTkx",
          "avatar_url": "https://avatars1.githubusercontent.com/u/32506591?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/animeshk08",
          "html_url": "https://github.com/animeshk08",
          "followers_url": "https://api.github.com/users/animeshk08/followers",
          "following_url": "https://api.github.com/users/animeshk08/following{/other_user}",
          "gists_url": "https://api.github.com/users/animeshk08/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/animeshk08/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/animeshk08/subscriptions",
          "organizations_url": "https://api.github.com/users/animeshk08/orgs",
          "repos_url": "https://api.github.com/users/animeshk08/repos",
          "events_url": "https://api.github.com/users/animeshk08/events{/privacy}",
          "received_events_url": "https://api.github.com/users/animeshk08/received_events",
          "type": "User",
          "site_admin": false
        },
        "html_url": "https://github.com/animeshk08/grimoirelab-perceval",
        "description": "Send Sir Perceval on a quest to retrieve and gather data from software repositories.",
        "fork": true,
        "url": "https://api.github.com/repos/animeshk08/grimoirelab-perceval",
        "forks_url": "https://api.github.com/repos/animeshk08/grimoirelab-perceval/forks",
        "keys_url": "https://api.github.com/repos/animeshk08/grimoirelab-perceval/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/animeshk08/grimoirelab-perceval/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/animeshk08/grimoirelab-perceval/teams",
        "hooks_url": "https://api.github.com/repos/animeshk08/grimoirelab-perceval/hooks",
        "issue_events_url": "https://api.github.com/repos/animeshk08/grimoirelab-perceval/issues/events{/number}",
        "events_url": "https://api.github.com/repos/animeshk08/grimoirelab-perceval/events",
        "assignees_url": "https://api.github.com/repos/animeshk08/grimoirelab-perceval/assignees{/user}",
        "branches_url": "https://api.github.com/repos/animeshk08/grimoirelab-perceval/branches{/branch}",
        "tags_url": "https://api.github.com/repos/animeshk08/grimoirelab-perceval/tags",
        "blobs_url": "https://api.github.com/repos/animeshk08/grimoirelab-perceval/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/animeshk08/grimoirelab-perceval/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/animeshk08/grimoirelab-perceval/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/animeshk08/grimoirelab-perceval/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/animeshk08/grimoirelab-perceval/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/animeshk08/grimoirelab-perceval/languages",
        "stargazers_url": "https://api.github.com/repos/animeshk08/grimoirelab-perceval/stargazers",
        "contributors_url": "https://api.github.com/repos/animeshk08/grimoirelab-perceval/contributors",
        "subscribers_url": "https://api.github.com/repos/animeshk08/grimoirelab-perceval/subscribers",
        "subscription_url": "https://api.github.com/repos/animeshk08/grimoirelab-perceval/subscription",
        "commits_url": "https://api.github.com/repos/animeshk08/grimoirelab-perceval/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/animeshk08/grimoirelab-perceval/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/animeshk08/grimoirelab-perceval/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/animeshk08/grimoirelab-perceval/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/animeshk08/grimoirelab-perceval/contents/{+path}",
        "compare_url": "https://api.github.com/repos/animeshk08/grimoirelab-perceval/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/animeshk08/grimoirelab-perceval/merges",
        "archive_url": "https://api.github.com/repos/animeshk08/grimoirelab-perceval/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/animeshk08/grimoirelab-perceval/downloads",
        "issues_url": "https://api.github.com/repos/animeshk08/grimoirelab-perceval/issues{/number}",
        "pulls_url": "https://api.github.com/repos/animeshk08/grimoirelab-perceval/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/animeshk08/grimoirelab-perceval/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/animeshk08/grimoirelab-perceval/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/animeshk08/grimoirelab-perceval/labels{/name}",
        "releases_url": "https://api.github.com/repos/animeshk08/grimoirelab-perceval/releases{/id}",
        "deployments_url": "https://api.github.com/repos/animeshk08/grimoirelab-perceval/deployments",
        "created_at": "2020-02-24T04:25:42Z",
        "updated_at": "2020-03-17T15:43:52Z",
        "pushed_at": "2020-03-17T15:43:48Z",
        "git_url": "git://github.com/animeshk08/grimoirelab-perceval.git",
        "ssh_url": "git@github.com:animeshk08/grimoirelab-perceval.git",
        "clone_url": "https://github.com/animeshk08/grimoirelab-perceval.git",
        "svn_url": "https://github.com/animeshk08/grimoirelab-perceval",
        "homepage": "",
        "size": 3182,
        "stargazers_count": 0,
        "watchers_count": 0,
        "language": "Python",
        "has_issues": false,
        "has_projects": true,
        "has_downloads": true,
        "has_wiki": true,
        "has_pages": false,
        "forks_count": 0,
        "mirror_url": null,
        "archived": false,
        "disabled": false,
        "open_issues_count": 1,
        "license": {
          "key": "gpl-3.0",
          "name": "GNU General Public License v3.0",
          "spdx_id": "GPL-3.0",
          "url": "https://api.github.com/licenses/gpl-3.0",
          "node_id": "MDc6TGljZW5zZTk="
        },
        "forks": 0,
        "open_issues": 1,
        "watchers": 0,
        "default_branch": "master"
      }
    },
    "base": {
      "label": "chaoss:master",
      "ref": "master",
      "sha": "d273525c6609ab9bcb8f06a2cb0d78b4c70fa11c",
      "user": {
        "login": "chaoss",
        "id": 29740296,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
        "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/chaoss",
        "html_url": "https://github.com/chaoss",
        "followers_url": "https://api.github.com/users/chaoss/followers",
        "following_url": "https://api.github.com/users/chaoss/following{/other_user}",
        "gists_url": "https://api.github.com/users/chaoss/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/chaoss/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/chaoss/subscriptions",
        "organizations_url": "https://api.github.com/users/chaoss/orgs",
        "repos_url": "https://api.github.com/users/chaoss/repos",
        "events_url": "https://api.github.com/users/chaoss/events{/privacy}",
        "received_events_url": "https://api.github.com/users/chaoss/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 47415120,
        "node_id": "MDEwOlJlcG9zaXRvcnk0NzQxNTEyMA==",
        "name": "grimoirelab-perceval",
        "full_name": "chaoss/grimoirelab-perceval",
        "private": false,
        "owner": {
          "login": "chaoss",
          "id": 29740296,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
          "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/chaoss",
          "html_url": "https://github.com/chaoss",
          "followers_url": "https://api.github.com/users/chaoss/followers",
          "following_url": "https://api.github.com/users/chaoss/following{/other_user}",
          "gists_url": "https://api.github.com/users/chaoss/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/chaoss/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/chaoss/subscriptions",
          "organizations_url": "https://api.github.com/users/chaoss/orgs",
          "repos_url": "https://api.github.com/users/chaoss/repos",
          "events_url": "https://api.github.com/users/chaoss/events{/privacy}",
          "received_events_url": "https://api.github.com/users/chaoss/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "html_url": "https://github.com/chaoss/grimoirelab-perceval",
        "description": "Send Sir Perceval on a quest to retrieve and gather data from software repositories.",
        "fork": false,
        "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval",
        "forks_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/forks",
        "keys_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/teams",
        "hooks_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/hooks",
        "issue_events_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/issues/events{/number}",
        "events_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/events",
        "assignees_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/assignees{/user}",
        "branches_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/branches{/branch}",
        "tags_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/tags",
        "blobs_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/languages",
        "stargazers_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/stargazers",
        "contributors_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/contributors",
        "subscribers_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/subscribers",
        "subscription_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/subscription",
        "commits_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/contents/{+path}",
        "compare_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/merges",
        "archive_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/downloads",
        "issues_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/issues{/number}",
        "pulls_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/labels{/name}",
        "releases_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/releases{/id}",
        "deployments_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/deployments",
        "created_at": "2015-12-04T16:20:11Z",
        "updated_at": "2020-03-13T07:39:12Z",
        "pushed_at": "2020-03-17T15:44:21Z",
        "git_url": "git://github.com/chaoss/grimoirelab-perceval.git",
        "ssh_url": "git@github.com:chaoss/grimoirelab-perceval.git",
        "clone_url": "https://github.com/chaoss/grimoirelab-perceval.git",
        "svn_url": "https://github.com/chaoss/grimoirelab-perceval",
        "homepage": "",
        "size": 3160,
        "stargazers_count": 160,
        "watchers_count": 160,
        "language": "Python",
        "has_issues": true,
        "has_projects": true,
        "has_downloads": true,
        "has_wiki": true,
        "has_pages": false,
        "forks_count": 95,
        "mirror_url": null,
        "archived": false,
        "disabled": false,
        "open_issues_count": 49,
        "license": {
          "key": "gpl-3.0",
          "name": "GNU General Public License v3.0",
          "spdx_id": "GPL-3.0",
          "url": "https://api.github.com/licenses/gpl-3.0",
          "node_id": "MDc6TGljZW5zZTk="
        },
        "forks": 95,
        "open_issues": 49,
        "watchers": 160,
        "default_branch": "master"
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621"
      },
      "html": {
        "href": "https://github.com/chaoss/grimoirelab-perceval/pull/621"
      },
      "issue": {
        "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/issues/621"
      },
      "comments": {
        "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/issues/621/comments"
      },
      "review_comments": {
        "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621/comments"
      },
      "review_comment": {
        "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments{/number}"
      },
      "commits": {
        "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621/commits"
      },
      "statuses": {
        "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/statuses/70a89aa1dccc5152ed4a52cb4c5e4e327ba3595a"
      }
    },
    "author_association": "CONTRIBUTOR",
    "merged": false,
    "mergeable": null,
    "rebaseable": null,
    "mergeable_state": "unknown",
    "merged_by": null,
    "comments": 14,
    "review_comments": 69,
    "maintainer_can_modify": false,
    "commits": 1,
    "additions": 1625,
    "deletions": 0,
    "changed_files": 10,
    "user_data": {
      "login": "animeshk08",
      "id": 32506591,
      "node_id": "MDQ6VXNlcjMyNTA2NTkx",
      "avatar_url": "https://avatars1.githubusercontent.com/u/32506591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/animeshk08",
      "html_url": "https://github.com/animeshk08",
      "followers_url": "https://api.github.com/users/animeshk08/followers",
      "following_url": "https://api.github.com/users/animeshk08/following{/other_user}",
      "gists_url": "https://api.github.com/users/animeshk08/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/animeshk08/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/animeshk08/subscriptions",
      "organizations_url": "https://api.github.com/users/animeshk08/orgs",
      "repos_url": "https://api.github.com/users/animeshk08/repos",
      "events_url": "https://api.github.com/users/animeshk08/events{/privacy}",
      "received_events_url": "https://api.github.com/users/animeshk08/received_events",
      "type": "User",
      "site_admin": false,
      "name": "Animesh Kumar",
      "company": null,
      "blog": "",
      "location": null,
      "email": null,
      "hireable": null,
      "bio": "Android| Data Science| Open Source",
      "public_repos": 48,
      "public_gists": 0,
      "followers": 5,
      "following": 2,
      "created_at": "2017-10-04T06:38:11Z",
      "updated_at": "2020-03-17T15:31:35Z",
      "organizations": []
    },
    "review_comments_data": [
      {
        "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388192788",
        "pull_request_review_id": 369439055,
        "id": 388192788,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE5Mjc4OA==",
        "diff_hunk": "@@ -0,0 +1,528 @@\n+# -*- coding: utf-8 -*-\n+#\n+# Copyright (C) 2015-2019 Bitergia\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program. If not, see <http://www.gnu.org/licenses/>.\n+#\n+# Authors:\n+#     Valerio Cosentino <valcos@bitergia.com>\n+#\n+\n+import json\n+import logging\n+import datetime\n+import requests\n+from grimoirelab_toolkit.datetime import (datetime_to_utc,\n+                                          datetime_utcnow,\n+                                          str_to_datetime)\n+from grimoirelab_toolkit.uris import urijoin\n+\n+from ...backend import (Backend,\n+                        BackendCommand,\n+                        BackendCommandArgumentParser,\n+                        DEFAULT_SEARCH_FIELD)\n+from ...client import HttpClient, RateLimitHandler\n+from ...utils import DEFAULT_DATETIME, DEFAULT_LAST_DATETIME\n+from datetime import datetime\n+\n+CATEGORY_ISSUE = \"issue\"\n+\n+PAGURE_URL = \"https://pagure.io/\"\n+PAGURE_API_URL = \"https://pagure.io/api/0\"\n+\n+# Range before sleeping until rate limit reset\n+MIN_RATE_LIMIT = 10\n+MAX_RATE_LIMIT = 500\n+\n+MAX_CATEGORY_ITEMS_PER_PAGE = 100\n+PER_PAGE = 100\n+\n+# Default sleep time and retries to deal with connection/server problems\n+DEFAULT_SLEEP_TIME = 1\n+MAX_RETRIES = 5\n+\n+TARGET_ISSUE_FIELDS = ['user', 'assignee']\n+\n+logger = logging.getLogger(__name__)\n+\n+\n+class Pagure(Backend):\n+    \"\"\"Pagure backend for Perceval.\n+\n+    This class allows the fetch the issues stored in Pagure\n+    repository. Note that api token is needed to perform\n+    certain API calls\n+\n+    :param namespace: Pagure namespace\n+    :param repository: Pagure repository; in case the repository is within a namespace\n+    :param api_token: Pagure API token to access the API\n+    :param base_url: when no value is set the backend will be fetch\n+     the data from the Pagure public site.\n+    :param tag: label used to mark the data\n+    :param archive: archive to store/retrieve items\n+    :param sleep_for_rate: sleep until rate limit is reset\n+    :param min_rate_to_sleep: minimum rate needed to sleep until\n+         it will be reset\n+    :param max_retries: number of max retries to a data source\n+        before raising a RetryError exception\n+    :param max_items: max number of category items (e.g., issues,\n+        pull requests) per query\n+    :param sleep_time: time to sleep in case\n+        of connection problems\n+    \"\"\"\n+    version = '0.29'\n+\n+    CATEGORIES = [CATEGORY_ISSUE]\n+    CLASSIFIED_FIELDS = [\n+        ['user_data'],\n+        ['assignee_data']\n+    ]\n+\n+    def __init__(self, namespace=None, repository=None,\n+                 api_token=None, base_url=None,\n+                 tag=None, archive=None,\n+                 sleep_for_rate=False, min_rate_to_sleep=MIN_RATE_LIMIT,\n+                 max_retries=MAX_RETRIES, sleep_time=DEFAULT_SLEEP_TIME,\n+                 max_items=MAX_CATEGORY_ITEMS_PER_PAGE):\n+        if api_token is None:\n+            api_token = []\n+        origin = base_url if base_url else PAGURE_URL\n+        origin = urijoin(origin, namespace, repository)\n+\n+        super().__init__(origin, tag=tag, archive=archive)\n+\n+        self.namespace = namespace\n+        self.repository = repository\n+        self.api_token = api_token\n+        self.base_url = base_url\n+\n+        self.sleep_for_rate = sleep_for_rate\n+        self.min_rate_to_sleep = min_rate_to_sleep\n+        self.max_retries = max_retries\n+        self.sleep_time = sleep_time\n+        self.max_items = max_items\n+\n+        self.client = None\n+        self.exclude_user_data = False\n+        self._users = {}  # internal users cache\n+\n+    def search_fields(self, item):\n+        \"\"\"Add search fields to an item.\n+\n+        It adds the values of `metadata_id` plus the `namespace` and `repo`.\n+\n+        :param item: the item to extract the search fields values\n+\n+        :returns: a dict of search fields\n+        \"\"\"\n+        search_fields = {\n+            DEFAULT_SEARCH_FIELD: self.metadata_id(item),\n+            'namespace': self.namespace,\n+            'repo': self.repository\n+        }\n+\n+        return search_fields\n+\n+    def fetch(self, category=CATEGORY_ISSUE, from_date=DEFAULT_DATETIME, to_date=DEFAULT_LAST_DATETIME,\n+              filter_classified=False):\n+        \"\"\"Fetch the issues from the repository.\n+\n+        The method retrieves, from a Pagure repository, the issues\n+        updated since the given date.\n+\n+        :param category: the category of items to fetch\n+        :param from_date: obtain issues updated since this date\n+        :param to_date: obtain issues until a until a specific date (included)\n+        :param filter_classified: remove classified fields from the resulting items\n+\n+        :returns: a generator of issues\n+        \"\"\"\n+        self.exclude_user_data = filter_classified\n+\n+        if self.exclude_user_data:\n+            logger.info(\"Excluding user data. Personal user information won't be collected from the API.\")\n+\n+        if not from_date:\n+            from_date = DEFAULT_DATETIME\n+\n+        if not to_date:\n+            to_date = DEFAULT_LAST_DATETIME\n+\n+        from_date = from_date.strftime('%Y-%m-%d')\n+        to_date = to_date.strftime('%Y-%m-%d')\n+        kwargs = {\n+            'from_date': from_date,\n+            'to_date': to_date\n+        }\n+        items = super().fetch(category,\n+                              filter_classified=filter_classified,\n+                              **kwargs)\n+\n+        return items\n+\n+    def fetch_items(self, category, **kwargs):\n+        \"\"\"Fetch the items (issues)\n+\n+        :param category: the category of items to fetch\n+        :param kwargs: backend arguments\n+\n+        :returns: a generator of items\n+        \"\"\"\n+        from_date = kwargs['from_date']\n+        to_date = kwargs['to_date']\n+        items = self.__fetch_issues(from_date, to_date)\n+        return items\n+\n+    @classmethod\n+    def has_archiving(cls):\n+        \"\"\"Returns whether it supports archiving items on the fetch process.\n+\n+        :returns: this backend supports items archive\n+        \"\"\"\n+        return True\n+\n+    @classmethod\n+    def has_resuming(cls):\n+        \"\"\"Returns whether it supports to resume the fetch process.\n+\n+        :returns: this backend supports items resuming\n+        \"\"\"\n+        return True\n+\n+    @staticmethod\n+    def metadata_id(item):\n+        \"\"\"Extracts the identifier from a Pagure item.\"\"\"\n+\n+        return str(item['id'])\n+\n+    @staticmethod\n+    def metadata_updated_on(item):\n+        \"\"\"Extracts the update time from a Pagure item.\n+\n+        The timestamp used is extracted from 'last_updated' field.\n+        This date is converted to UNIX timestamp format. As Pagure\n+        dates are in timestamp format the conversion is straightforward.\n+\n+        :param item: item generated by the backend\n+\n+        :returns: a UNIX timestamp\n+        \"\"\"\n+        if \"forks_count\" in item:\n+            return item['fetched_on']\n+        else:\n+            ts = int(item['last_updated'])\n+            ts = datetime.fromtimestamp(ts).timestamp()\n+\n+            return ts\n+\n+    @staticmethod\n+    def metadata_category(item):\n+        \"\"\"Extracts the category from a Pagure item.\n+\n+        This backend generates one type of item which is\n+        'issue'.\n+        \"\"\"\n+\n+        category = CATEGORY_ISSUE\n+\n+        return category\n+\n+    def _init_client(self, from_archive=False):\n+        \"\"\"Init client\"\"\"\n+\n+        return PagureClient(self.namespace, self.repository, self.api_token, self.base_url,\n+                            self.sleep_for_rate, self.min_rate_to_sleep,\n+                            self.sleep_time, self.max_retries, self.max_items,\n+                            self.archive, from_archive)\n+\n+    def __fetch_issues(self, from_date, to_date):\n+        \"\"\"Fetch the issues\n+        :param from_date: starting date from which issues are fetched\n+        :param to_date: ending date till which issues are fetched\n+\n+        :returns: an issue object\n+        \"\"\"\n+\n+        issues_groups = self.client.issues(from_date=from_date)\n+\n+        for raw_issues in issues_groups:\n+            issues = json.loads(raw_issues)\n+            issues = issues['issues']\n+            for issue in issues:\n+\n+                if int(issue['last_updated']) > str_to_datetime(to_date).timestamp():\n+                    return\n+\n+                self.__init_extra_issue_fields(issue)\n+                for field in TARGET_ISSUE_FIELDS:\n+\n+                    if not issue[field]:\n+                        continue\n+\n+                    if field == 'user':\n+                        issue[field + '_data'] = self.__get_user(issue[field]['name'])\n+                    elif field == 'assignee':\n+                        issue[field + '_data'] = self.__get_issue_assignee(issue[field])\n+\n+                yield issue\n+\n+    def __get_issue_assignee(self, raw_assignee):\n+        \"\"\"Get issue assignee\"\"\"\n+        if not raw_assignee:\n+            return None\n+        assignee = self.__get_user(raw_assignee['name'])\n+\n+        return assignee\n+\n+    def __get_user(self, login):\n+        \"\"\"Get user data for the login\"\"\"\n+\n+        if not login or self.exclude_user_data:\n+            return None\n+\n+        user_raw = self.client.user(login)\n+        user = json.loads(user_raw)\n+\n+        return user\n+\n+    def __init_extra_issue_fields(self, issue):\n+        \"\"\"Add fields to an issue\"\"\"\n+\n+        issue['user_data'] = {}\n+        issue['assignee_data'] = {}\n+\n+\n+class PagureClient(HttpClient, RateLimitHandler):\n+    \"\"\"Client for retieving information from Pagure API\n+\n+    :param namespace: Pagure namespace\n+    :param repository: Pagure repository; incase the repository is within a namespace\n+    :param tokens: Pagure API token to access the API\n+    :param base_url: When no value is set the backend will be fetch the data\n+        from the Pagure public site.\n+    :param sleep_for_rate: sleep until rate limit is reset\n+    :param min_rate_to_sleep: minimun rate needed to sleep until\n+         it will be reset\n+    :param sleep_time: time to sleep in case\n+        of connection problems\n+    :param max_retries: number of max retries to a data source\n+        before raising a RetryError exception\n+    :param max_items: max number of category items (e.g., issues,\n+        pull requests) per query\n+    :param archive: collect issues already retrieved from an archive\n+    :param from_archive: it tells whether to write/read the archive\n+    \"\"\"\n+    EXTRA_STATUS_FORCELIST = [403, 500, 502, 503]\n+\n+    _users = {}  # users cache\n+\n+    def __init__(self, namespace, repository, tokens,\n+                 base_url=None, sleep_for_rate=False, min_rate_to_sleep=MIN_RATE_LIMIT,\n+                 sleep_time=DEFAULT_SLEEP_TIME, max_retries=MAX_RETRIES,\n+                 max_items=MAX_CATEGORY_ITEMS_PER_PAGE, archive=None, from_archive=False):\n+        self.namespace = namespace\n+        self.repository = repository\n+        self.tokens = tokens\n+        self.n_tokens = len(self.tokens)\n+        self.current_token = None\n+        self.last_rate_limit_checked = None\n+        self.max_items = max_items\n+\n+        base_url = PAGURE_API_URL\n+\n+        super().__init__(base_url, sleep_time=sleep_time, max_retries=max_retries,\n+                         extra_headers=self._set_extra_headers(),\n+                         extra_status_forcelist=self.EXTRA_STATUS_FORCELIST,\n+                         archive=archive, from_archive=from_archive)\n+        super().setup_rate_limit_handler(sleep_for_rate=sleep_for_rate, min_rate_to_sleep=min_rate_to_sleep)\n+\n+    def calculate_time_to_reset(self):\n+        \"\"\"Calculate the seconds to reset the token requests, by obtaining the different\n+        between the current date and the next date when the token is fully regenerated.\n+        \"\"\"\n+\n+        time_to_reset = self.rate_limit_reset_ts - (datetime_utcnow().replace(microsecond=0).timestamp() + 1)\n+        time_to_reset = 0 if time_to_reset < 0 else time_to_reset\n+\n+        return time_to_reset\n+\n+    def issues(self, from_date=None):\n+        \"\"\"Fetch the issues from the repository.\n+\n+        The method retrieves, from a Pagure repository, the issues\n+        updated since the given date.\n+\n+        :param from_date: obtain issues updated since this date\n+\n+        :returns: a generator of issues\n+        \"\"\"\n+        payload = {\n+            'status': 'all',\n+            'per_page': self.max_items,\n+            'order': 'asc',\n+        }\n+\n+        if from_date:\n+            payload['since'] = from_date\n+\n+        path = urijoin(\"issues\")\n+        return self.fetch_items(path, payload)\n+\n+    def user(self, name):\n+        \"\"\"Get the user information and update the user cache\n+\n+        :param name: username of the user\n+\n+        :returns: a user object\n+        \"\"\"\n+        user = None\n+\n+        if name in self._users:\n+            return self._users[name]\n+\n+        url_user = urijoin(self.base_url, 'user', name)\n+\n+        logger.debug(\"Getting info for %s\" % url_user)\n+\n+        r = self.fetch(url_user)\n+        user = r.text\n+        self._users[name] = user\n+\n+        return user\n+\n+    def fetch(self, url, payload=None, headers=None, method=HttpClient.GET, stream=False, auth=True):\n+        \"\"\"Fetch the data from a given URL.\n+\n+        :param url: link to the resource\n+        :param payload: payload of the request\n+        :param headers: headers of the request\n+        :param method: type of request call (GET or POST)\n+        :param stream: defer downloading the response body until the response content is available\n+        :param auth: auth of the request\n+\n+        :returns a response object\n+        \"\"\"\n+        if not self.from_archive:\n+            self.sleep_for_rate_limit()\n+\n+        # In case the issue tracker is disabled for a repository\n+        # an HTTP 404 response is returned\n+        try:\n+            response = super().fetch(url, payload, headers, method, stream, auth)\n+        except requests.exceptions.HTTPError:\n+            print(\"The issue tracker is disabled please enable the feature for the repository\")\n+            exit(1)\n+            return\n+\n+        if not self.from_archive:\n+            self.update_rate_limit(response)\n+\n+        return response\n+\n+    def fetch_items(self, path, payload):\n+        \"\"\"Return the items from Pagure API using links pagination\n+\n+        :param path: Path from which the item is to be fetched\n+        :param payload: Payload to be added to the request\n+\n+        :returns: an item object\n+        \"\"\"\n+\n+        page = 0  # current page\n+        last_page = None  # last page\n+        if self.namespace:  # if project is under a namspace\n+            url_next = urijoin(self.base_url, self.namespace, self.repository, path)\n+        else:  # if project is created without a namespace\n+            url_next = urijoin(self.base_url, self.repository, path)\n+        logger.debug(\"Get Pagure paginated items from \" + url_next)\n+\n+        response = self.fetch(url_next, payload=payload)\n+\n+        items = response.text\n+        page += 1\n+\n+        if 'last' in response.links:\n+            last_url = response.links['last']['url']\n+            last_page = last_url.split('&page=')[1].split('&')[0]\n+            last_page = int(last_page)\n+            logger.debug(\"Page: %i/%i\" % (page, last_page))\n+\n+        while items:\n+            yield items\n+\n+            items = None\n+\n+            if 'next' in response.links:\n+                url_next = response.links['next']['url']\n+                response = self.fetch(url_next, payload=payload)\n+                page += 1\n+\n+                items = response.text\n+                logger.debug(\"Page: %i/%i\" % (page, last_page))\n+\n+    def _set_extra_headers(self):\n+        \"\"\"Set extra headers for session\"\"\"\n+\n+        headers = {}\n+        if self.current_token:\n+            headers = {'Authorization': \"token %s\" % self.tokens}\n+\n+        return headers\n+\n+\n+class PagureCommand(BackendCommand):\n+    \"\"\"Class to run Pagure backend from the command line.\"\"\"\n+\n+    BACKEND = Pagure\n+\n+    @classmethod\n+    def setup_cmd_parser(cls):\n+        \"\"\"Returns the Pagure argument parser.\"\"\"\n+\n+        parser = BackendCommandArgumentParser(cls.BACKEND,\n+                                              from_date=True,\n+                                              to_date=True,\n+                                              token_auth=False,",
        "path": "perceval/backends/core/pagure.py",
        "position": null,
        "original_position": 496,
        "commit_id": "70a89aa1dccc5152ed4a52cb4c5e4e327ba3595a",
        "original_commit_id": "4ffb87bbb10fd5eaf6125f39c09c04e803a1c8c7",
        "user": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "token_auth should be set to `True` as done in the gitlab backend: https://github.com/chaoss/grimoirelab-perceval/blob/master/perceval/backends/core/gitlab.py#L740. Please include also the `ssl_verify` param to turn off SSL verifications.",
        "created_at": "2020-03-05T10:07:12Z",
        "updated_at": "2020-03-08T18:21:42Z",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r388192788",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621",
        "author_association": "MEMBER",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388192788"
          },
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r388192788"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388192788/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "user_data": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false,
          "name": "valerio",
          "company": "@Bitergia ",
          "blog": "http://valeriocos.github.io/",
          "location": "Madrid, Spain",
          "email": "valcos@bitergia.com",
          "hireable": true,
          "bio": null,
          "public_repos": 57,
          "public_gists": 28,
          "followers": 34,
          "following": 5,
          "created_at": "2014-01-27T14:30:30Z",
          "updated_at": "2020-03-17T10:02:44Z",
          "organizations": [
            {
              "login": "Bitergia",
              "id": 1918070,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=",
              "url": "https://api.github.com/orgs/Bitergia",
              "repos_url": "https://api.github.com/orgs/Bitergia/repos",
              "events_url": "https://api.github.com/orgs/Bitergia/events",
              "hooks_url": "https://api.github.com/orgs/Bitergia/hooks",
              "issues_url": "https://api.github.com/orgs/Bitergia/issues",
              "members_url": "https://api.github.com/orgs/Bitergia/members{/member}",
              "public_members_url": "https://api.github.com/orgs/Bitergia/public_members{/member}",
              "avatar_url": "https://avatars3.githubusercontent.com/u/1918070?v=4",
              "description": null
            },
            {
              "login": "grimoirelab",
              "id": 16151805,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1",
              "url": "https://api.github.com/orgs/grimoirelab",
              "repos_url": "https://api.github.com/orgs/grimoirelab/repos",
              "events_url": "https://api.github.com/orgs/grimoirelab/events",
              "hooks_url": "https://api.github.com/orgs/grimoirelab/hooks",
              "issues_url": "https://api.github.com/orgs/grimoirelab/issues",
              "members_url": "https://api.github.com/orgs/grimoirelab/members{/member}",
              "public_members_url": "https://api.github.com/orgs/grimoirelab/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/16151805?v=4",
              "description": ""
            },
            {
              "login": "chaoss",
              "id": 29740296,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
              "url": "https://api.github.com/orgs/chaoss",
              "repos_url": "https://api.github.com/orgs/chaoss/repos",
              "events_url": "https://api.github.com/orgs/chaoss/events",
              "hooks_url": "https://api.github.com/orgs/chaoss/hooks",
              "issues_url": "https://api.github.com/orgs/chaoss/issues",
              "members_url": "https://api.github.com/orgs/chaoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/chaoss/public_members{/member}",
              "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
              "description": ""
            }
          ]
        },
        "reactions_data": []
      },
      {
        "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388193923",
        "pull_request_review_id": 369439055,
        "id": 388193923,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE5MzkyMw==",
        "diff_hunk": "@@ -0,0 +1,528 @@\n+# -*- coding: utf-8 -*-\n+#\n+# Copyright (C) 2015-2019 Bitergia\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program. If not, see <http://www.gnu.org/licenses/>.\n+#\n+# Authors:\n+#     Valerio Cosentino <valcos@bitergia.com>\n+#\n+\n+import json\n+import logging\n+import datetime\n+import requests\n+from grimoirelab_toolkit.datetime import (datetime_to_utc,\n+                                          datetime_utcnow,\n+                                          str_to_datetime)\n+from grimoirelab_toolkit.uris import urijoin\n+\n+from ...backend import (Backend,\n+                        BackendCommand,\n+                        BackendCommandArgumentParser,\n+                        DEFAULT_SEARCH_FIELD)\n+from ...client import HttpClient, RateLimitHandler\n+from ...utils import DEFAULT_DATETIME, DEFAULT_LAST_DATETIME\n+from datetime import datetime\n+\n+CATEGORY_ISSUE = \"issue\"\n+\n+PAGURE_URL = \"https://pagure.io/\"\n+PAGURE_API_URL = \"https://pagure.io/api/0\"\n+\n+# Range before sleeping until rate limit reset\n+MIN_RATE_LIMIT = 10\n+MAX_RATE_LIMIT = 500\n+\n+MAX_CATEGORY_ITEMS_PER_PAGE = 100\n+PER_PAGE = 100\n+\n+# Default sleep time and retries to deal with connection/server problems\n+DEFAULT_SLEEP_TIME = 1\n+MAX_RETRIES = 5\n+\n+TARGET_ISSUE_FIELDS = ['user', 'assignee']\n+\n+logger = logging.getLogger(__name__)\n+\n+\n+class Pagure(Backend):\n+    \"\"\"Pagure backend for Perceval.\n+\n+    This class allows the fetch the issues stored in Pagure\n+    repository. Note that api token is needed to perform\n+    certain API calls\n+\n+    :param namespace: Pagure namespace\n+    :param repository: Pagure repository; in case the repository is within a namespace\n+    :param api_token: Pagure API token to access the API\n+    :param base_url: when no value is set the backend will be fetch\n+     the data from the Pagure public site.\n+    :param tag: label used to mark the data\n+    :param archive: archive to store/retrieve items\n+    :param sleep_for_rate: sleep until rate limit is reset\n+    :param min_rate_to_sleep: minimum rate needed to sleep until\n+         it will be reset\n+    :param max_retries: number of max retries to a data source\n+        before raising a RetryError exception\n+    :param max_items: max number of category items (e.g., issues,\n+        pull requests) per query\n+    :param sleep_time: time to sleep in case\n+        of connection problems\n+    \"\"\"\n+    version = '0.29'\n+\n+    CATEGORIES = [CATEGORY_ISSUE]\n+    CLASSIFIED_FIELDS = [\n+        ['user_data'],\n+        ['assignee_data']\n+    ]\n+\n+    def __init__(self, namespace=None, repository=None,\n+                 api_token=None, base_url=None,\n+                 tag=None, archive=None,\n+                 sleep_for_rate=False, min_rate_to_sleep=MIN_RATE_LIMIT,\n+                 max_retries=MAX_RETRIES, sleep_time=DEFAULT_SLEEP_TIME,\n+                 max_items=MAX_CATEGORY_ITEMS_PER_PAGE):\n+        if api_token is None:\n+            api_token = []\n+        origin = base_url if base_url else PAGURE_URL\n+        origin = urijoin(origin, namespace, repository)\n+\n+        super().__init__(origin, tag=tag, archive=archive)\n+\n+        self.namespace = namespace\n+        self.repository = repository\n+        self.api_token = api_token\n+        self.base_url = base_url\n+\n+        self.sleep_for_rate = sleep_for_rate\n+        self.min_rate_to_sleep = min_rate_to_sleep\n+        self.max_retries = max_retries\n+        self.sleep_time = sleep_time\n+        self.max_items = max_items\n+\n+        self.client = None\n+        self.exclude_user_data = False\n+        self._users = {}  # internal users cache\n+\n+    def search_fields(self, item):\n+        \"\"\"Add search fields to an item.\n+\n+        It adds the values of `metadata_id` plus the `namespace` and `repo`.\n+\n+        :param item: the item to extract the search fields values\n+\n+        :returns: a dict of search fields\n+        \"\"\"\n+        search_fields = {\n+            DEFAULT_SEARCH_FIELD: self.metadata_id(item),\n+            'namespace': self.namespace,\n+            'repo': self.repository\n+        }\n+\n+        return search_fields\n+\n+    def fetch(self, category=CATEGORY_ISSUE, from_date=DEFAULT_DATETIME, to_date=DEFAULT_LAST_DATETIME,\n+              filter_classified=False):\n+        \"\"\"Fetch the issues from the repository.\n+\n+        The method retrieves, from a Pagure repository, the issues\n+        updated since the given date.\n+\n+        :param category: the category of items to fetch\n+        :param from_date: obtain issues updated since this date\n+        :param to_date: obtain issues until a until a specific date (included)\n+        :param filter_classified: remove classified fields from the resulting items\n+\n+        :returns: a generator of issues\n+        \"\"\"\n+        self.exclude_user_data = filter_classified\n+\n+        if self.exclude_user_data:\n+            logger.info(\"Excluding user data. Personal user information won't be collected from the API.\")\n+\n+        if not from_date:\n+            from_date = DEFAULT_DATETIME\n+\n+        if not to_date:\n+            to_date = DEFAULT_LAST_DATETIME\n+\n+        from_date = from_date.strftime('%Y-%m-%d')\n+        to_date = to_date.strftime('%Y-%m-%d')\n+        kwargs = {\n+            'from_date': from_date,\n+            'to_date': to_date\n+        }\n+        items = super().fetch(category,\n+                              filter_classified=filter_classified,\n+                              **kwargs)\n+\n+        return items\n+\n+    def fetch_items(self, category, **kwargs):\n+        \"\"\"Fetch the items (issues)\n+\n+        :param category: the category of items to fetch\n+        :param kwargs: backend arguments\n+\n+        :returns: a generator of items\n+        \"\"\"\n+        from_date = kwargs['from_date']\n+        to_date = kwargs['to_date']\n+        items = self.__fetch_issues(from_date, to_date)\n+        return items\n+\n+    @classmethod\n+    def has_archiving(cls):\n+        \"\"\"Returns whether it supports archiving items on the fetch process.\n+\n+        :returns: this backend supports items archive\n+        \"\"\"\n+        return True\n+\n+    @classmethod\n+    def has_resuming(cls):\n+        \"\"\"Returns whether it supports to resume the fetch process.\n+\n+        :returns: this backend supports items resuming\n+        \"\"\"\n+        return True\n+\n+    @staticmethod\n+    def metadata_id(item):\n+        \"\"\"Extracts the identifier from a Pagure item.\"\"\"\n+\n+        return str(item['id'])\n+\n+    @staticmethod\n+    def metadata_updated_on(item):\n+        \"\"\"Extracts the update time from a Pagure item.\n+\n+        The timestamp used is extracted from 'last_updated' field.\n+        This date is converted to UNIX timestamp format. As Pagure\n+        dates are in timestamp format the conversion is straightforward.\n+\n+        :param item: item generated by the backend\n+\n+        :returns: a UNIX timestamp\n+        \"\"\"\n+        if \"forks_count\" in item:\n+            return item['fetched_on']\n+        else:\n+            ts = int(item['last_updated'])\n+            ts = datetime.fromtimestamp(ts).timestamp()\n+\n+            return ts\n+\n+    @staticmethod\n+    def metadata_category(item):\n+        \"\"\"Extracts the category from a Pagure item.\n+\n+        This backend generates one type of item which is\n+        'issue'.\n+        \"\"\"\n+\n+        category = CATEGORY_ISSUE\n+\n+        return category\n+\n+    def _init_client(self, from_archive=False):\n+        \"\"\"Init client\"\"\"\n+\n+        return PagureClient(self.namespace, self.repository, self.api_token, self.base_url,\n+                            self.sleep_for_rate, self.min_rate_to_sleep,\n+                            self.sleep_time, self.max_retries, self.max_items,\n+                            self.archive, from_archive)\n+\n+    def __fetch_issues(self, from_date, to_date):\n+        \"\"\"Fetch the issues\n+        :param from_date: starting date from which issues are fetched\n+        :param to_date: ending date till which issues are fetched\n+\n+        :returns: an issue object\n+        \"\"\"\n+\n+        issues_groups = self.client.issues(from_date=from_date)\n+\n+        for raw_issues in issues_groups:\n+            issues = json.loads(raw_issues)\n+            issues = issues['issues']\n+            for issue in issues:\n+\n+                if int(issue['last_updated']) > str_to_datetime(to_date).timestamp():\n+                    return\n+\n+                self.__init_extra_issue_fields(issue)\n+                for field in TARGET_ISSUE_FIELDS:\n+\n+                    if not issue[field]:\n+                        continue\n+\n+                    if field == 'user':\n+                        issue[field + '_data'] = self.__get_user(issue[field]['name'])\n+                    elif field == 'assignee':\n+                        issue[field + '_data'] = self.__get_issue_assignee(issue[field])\n+\n+                yield issue\n+\n+    def __get_issue_assignee(self, raw_assignee):\n+        \"\"\"Get issue assignee\"\"\"\n+        if not raw_assignee:\n+            return None\n+        assignee = self.__get_user(raw_assignee['name'])\n+\n+        return assignee\n+\n+    def __get_user(self, login):\n+        \"\"\"Get user data for the login\"\"\"\n+\n+        if not login or self.exclude_user_data:\n+            return None\n+\n+        user_raw = self.client.user(login)\n+        user = json.loads(user_raw)\n+\n+        return user\n+\n+    def __init_extra_issue_fields(self, issue):\n+        \"\"\"Add fields to an issue\"\"\"\n+\n+        issue['user_data'] = {}\n+        issue['assignee_data'] = {}\n+\n+\n+class PagureClient(HttpClient, RateLimitHandler):\n+    \"\"\"Client for retieving information from Pagure API\n+\n+    :param namespace: Pagure namespace\n+    :param repository: Pagure repository; incase the repository is within a namespace\n+    :param tokens: Pagure API token to access the API\n+    :param base_url: When no value is set the backend will be fetch the data\n+        from the Pagure public site.\n+    :param sleep_for_rate: sleep until rate limit is reset\n+    :param min_rate_to_sleep: minimun rate needed to sleep until\n+         it will be reset\n+    :param sleep_time: time to sleep in case\n+        of connection problems\n+    :param max_retries: number of max retries to a data source\n+        before raising a RetryError exception\n+    :param max_items: max number of category items (e.g., issues,\n+        pull requests) per query\n+    :param archive: collect issues already retrieved from an archive\n+    :param from_archive: it tells whether to write/read the archive\n+    \"\"\"\n+    EXTRA_STATUS_FORCELIST = [403, 500, 502, 503]\n+\n+    _users = {}  # users cache\n+\n+    def __init__(self, namespace, repository, tokens,\n+                 base_url=None, sleep_for_rate=False, min_rate_to_sleep=MIN_RATE_LIMIT,\n+                 sleep_time=DEFAULT_SLEEP_TIME, max_retries=MAX_RETRIES,\n+                 max_items=MAX_CATEGORY_ITEMS_PER_PAGE, archive=None, from_archive=False):\n+        self.namespace = namespace\n+        self.repository = repository\n+        self.tokens = tokens\n+        self.n_tokens = len(self.tokens)\n+        self.current_token = None\n+        self.last_rate_limit_checked = None\n+        self.max_items = max_items\n+\n+        base_url = PAGURE_API_URL\n+\n+        super().__init__(base_url, sleep_time=sleep_time, max_retries=max_retries,\n+                         extra_headers=self._set_extra_headers(),\n+                         extra_status_forcelist=self.EXTRA_STATUS_FORCELIST,\n+                         archive=archive, from_archive=from_archive)\n+        super().setup_rate_limit_handler(sleep_for_rate=sleep_for_rate, min_rate_to_sleep=min_rate_to_sleep)\n+\n+    def calculate_time_to_reset(self):\n+        \"\"\"Calculate the seconds to reset the token requests, by obtaining the different\n+        between the current date and the next date when the token is fully regenerated.\n+        \"\"\"\n+\n+        time_to_reset = self.rate_limit_reset_ts - (datetime_utcnow().replace(microsecond=0).timestamp() + 1)\n+        time_to_reset = 0 if time_to_reset < 0 else time_to_reset\n+\n+        return time_to_reset\n+\n+    def issues(self, from_date=None):\n+        \"\"\"Fetch the issues from the repository.\n+\n+        The method retrieves, from a Pagure repository, the issues\n+        updated since the given date.\n+\n+        :param from_date: obtain issues updated since this date\n+\n+        :returns: a generator of issues\n+        \"\"\"\n+        payload = {\n+            'status': 'all',\n+            'per_page': self.max_items,\n+            'order': 'asc',\n+        }\n+\n+        if from_date:\n+            payload['since'] = from_date\n+\n+        path = urijoin(\"issues\")\n+        return self.fetch_items(path, payload)\n+\n+    def user(self, name):\n+        \"\"\"Get the user information and update the user cache\n+\n+        :param name: username of the user\n+\n+        :returns: a user object\n+        \"\"\"\n+        user = None\n+\n+        if name in self._users:\n+            return self._users[name]\n+\n+        url_user = urijoin(self.base_url, 'user', name)\n+\n+        logger.debug(\"Getting info for %s\" % url_user)\n+\n+        r = self.fetch(url_user)\n+        user = r.text\n+        self._users[name] = user\n+\n+        return user\n+\n+    def fetch(self, url, payload=None, headers=None, method=HttpClient.GET, stream=False, auth=True):\n+        \"\"\"Fetch the data from a given URL.\n+\n+        :param url: link to the resource\n+        :param payload: payload of the request\n+        :param headers: headers of the request\n+        :param method: type of request call (GET or POST)\n+        :param stream: defer downloading the response body until the response content is available\n+        :param auth: auth of the request\n+\n+        :returns a response object\n+        \"\"\"\n+        if not self.from_archive:\n+            self.sleep_for_rate_limit()\n+\n+        # In case the issue tracker is disabled for a repository\n+        # an HTTP 404 response is returned\n+        try:\n+            response = super().fetch(url, payload, headers, method, stream, auth)\n+        except requests.exceptions.HTTPError:\n+            print(\"The issue tracker is disabled please enable the feature for the repository\")\n+            exit(1)\n+            return\n+\n+        if not self.from_archive:\n+            self.update_rate_limit(response)\n+\n+        return response\n+\n+    def fetch_items(self, path, payload):\n+        \"\"\"Return the items from Pagure API using links pagination\n+\n+        :param path: Path from which the item is to be fetched\n+        :param payload: Payload to be added to the request\n+\n+        :returns: an item object\n+        \"\"\"\n+\n+        page = 0  # current page\n+        last_page = None  # last page\n+        if self.namespace:  # if project is under a namspace\n+            url_next = urijoin(self.base_url, self.namespace, self.repository, path)\n+        else:  # if project is created without a namespace\n+            url_next = urijoin(self.base_url, self.repository, path)\n+        logger.debug(\"Get Pagure paginated items from \" + url_next)\n+\n+        response = self.fetch(url_next, payload=payload)\n+\n+        items = response.text\n+        page += 1\n+\n+        if 'last' in response.links:\n+            last_url = response.links['last']['url']\n+            last_page = last_url.split('&page=')[1].split('&')[0]\n+            last_page = int(last_page)\n+            logger.debug(\"Page: %i/%i\" % (page, last_page))\n+\n+        while items:\n+            yield items\n+\n+            items = None\n+\n+            if 'next' in response.links:\n+                url_next = response.links['next']['url']\n+                response = self.fetch(url_next, payload=payload)\n+                page += 1\n+\n+                items = response.text\n+                logger.debug(\"Page: %i/%i\" % (page, last_page))\n+\n+    def _set_extra_headers(self):\n+        \"\"\"Set extra headers for session\"\"\"\n+\n+        headers = {}\n+        if self.current_token:\n+            headers = {'Authorization': \"token %s\" % self.tokens}\n+\n+        return headers\n+\n+\n+class PagureCommand(BackendCommand):\n+    \"\"\"Class to run Pagure backend from the command line.\"\"\"\n+\n+    BACKEND = Pagure\n+\n+    @classmethod\n+    def setup_cmd_parser(cls):\n+        \"\"\"Returns the Pagure argument parser.\"\"\"\n+\n+        parser = BackendCommandArgumentParser(cls.BACKEND,\n+                                              from_date=True,\n+                                              to_date=True,\n+                                              token_auth=False,\n+                                              archive=True)\n+\n+        # Pagure authorisation token\n+        group = parser.parser.add_argument_group('Pagure arguments')\n+        group.add_argument('--api-token', dest='api-token',",
        "path": "perceval/backends/core/pagure.py",
        "position": null,
        "original_position": 501,
        "commit_id": "70a89aa1dccc5152ed4a52cb4c5e4e327ba3595a",
        "original_commit_id": "4ffb87bbb10fd5eaf6125f39c09c04e803a1c8c7",
        "user": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "This isn't needed since it's automatically included when setting the `token_auth` to True.\r\nI guess you did it because you followed the code in the github backend. In that case, the `--api-token` param is redefined since it accepts a list of tokens instead of a single one.",
        "created_at": "2020-03-05T10:09:23Z",
        "updated_at": "2020-03-08T18:21:42Z",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r388193923",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621",
        "author_association": "MEMBER",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388193923"
          },
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r388193923"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388193923/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "user_data": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false,
          "name": "valerio",
          "company": "@Bitergia ",
          "blog": "http://valeriocos.github.io/",
          "location": "Madrid, Spain",
          "email": "valcos@bitergia.com",
          "hireable": true,
          "bio": null,
          "public_repos": 57,
          "public_gists": 28,
          "followers": 34,
          "following": 5,
          "created_at": "2014-01-27T14:30:30Z",
          "updated_at": "2020-03-17T10:02:44Z",
          "organizations": [
            {
              "login": "Bitergia",
              "id": 1918070,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=",
              "url": "https://api.github.com/orgs/Bitergia",
              "repos_url": "https://api.github.com/orgs/Bitergia/repos",
              "events_url": "https://api.github.com/orgs/Bitergia/events",
              "hooks_url": "https://api.github.com/orgs/Bitergia/hooks",
              "issues_url": "https://api.github.com/orgs/Bitergia/issues",
              "members_url": "https://api.github.com/orgs/Bitergia/members{/member}",
              "public_members_url": "https://api.github.com/orgs/Bitergia/public_members{/member}",
              "avatar_url": "https://avatars3.githubusercontent.com/u/1918070?v=4",
              "description": null
            },
            {
              "login": "grimoirelab",
              "id": 16151805,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1",
              "url": "https://api.github.com/orgs/grimoirelab",
              "repos_url": "https://api.github.com/orgs/grimoirelab/repos",
              "events_url": "https://api.github.com/orgs/grimoirelab/events",
              "hooks_url": "https://api.github.com/orgs/grimoirelab/hooks",
              "issues_url": "https://api.github.com/orgs/grimoirelab/issues",
              "members_url": "https://api.github.com/orgs/grimoirelab/members{/member}",
              "public_members_url": "https://api.github.com/orgs/grimoirelab/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/16151805?v=4",
              "description": ""
            },
            {
              "login": "chaoss",
              "id": 29740296,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
              "url": "https://api.github.com/orgs/chaoss",
              "repos_url": "https://api.github.com/orgs/chaoss/repos",
              "events_url": "https://api.github.com/orgs/chaoss/events",
              "hooks_url": "https://api.github.com/orgs/chaoss/hooks",
              "issues_url": "https://api.github.com/orgs/chaoss/issues",
              "members_url": "https://api.github.com/orgs/chaoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/chaoss/public_members{/member}",
              "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
              "description": ""
            }
          ]
        },
        "reactions_data": []
      },
      {
        "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388198404",
        "pull_request_review_id": 369439055,
        "id": 388198404,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE5ODQwNA==",
        "diff_hunk": "@@ -0,0 +1,528 @@\n+# -*- coding: utf-8 -*-\n+#\n+# Copyright (C) 2015-2019 Bitergia\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program. If not, see <http://www.gnu.org/licenses/>.\n+#\n+# Authors:\n+#     Valerio Cosentino <valcos@bitergia.com>\n+#\n+\n+import json\n+import logging\n+import datetime\n+import requests\n+from grimoirelab_toolkit.datetime import (datetime_to_utc,\n+                                          datetime_utcnow,\n+                                          str_to_datetime)\n+from grimoirelab_toolkit.uris import urijoin\n+\n+from ...backend import (Backend,\n+                        BackendCommand,\n+                        BackendCommandArgumentParser,\n+                        DEFAULT_SEARCH_FIELD)\n+from ...client import HttpClient, RateLimitHandler\n+from ...utils import DEFAULT_DATETIME, DEFAULT_LAST_DATETIME\n+from datetime import datetime\n+\n+CATEGORY_ISSUE = \"issue\"\n+\n+PAGURE_URL = \"https://pagure.io/\"\n+PAGURE_API_URL = \"https://pagure.io/api/0\"\n+\n+# Range before sleeping until rate limit reset\n+MIN_RATE_LIMIT = 10\n+MAX_RATE_LIMIT = 500\n+\n+MAX_CATEGORY_ITEMS_PER_PAGE = 100\n+PER_PAGE = 100\n+\n+# Default sleep time and retries to deal with connection/server problems\n+DEFAULT_SLEEP_TIME = 1\n+MAX_RETRIES = 5\n+\n+TARGET_ISSUE_FIELDS = ['user', 'assignee']\n+\n+logger = logging.getLogger(__name__)\n+\n+\n+class Pagure(Backend):\n+    \"\"\"Pagure backend for Perceval.\n+\n+    This class allows the fetch the issues stored in Pagure\n+    repository. Note that api token is needed to perform\n+    certain API calls\n+\n+    :param namespace: Pagure namespace\n+    :param repository: Pagure repository; in case the repository is within a namespace\n+    :param api_token: Pagure API token to access the API\n+    :param base_url: when no value is set the backend will be fetch\n+     the data from the Pagure public site.\n+    :param tag: label used to mark the data\n+    :param archive: archive to store/retrieve items\n+    :param sleep_for_rate: sleep until rate limit is reset\n+    :param min_rate_to_sleep: minimum rate needed to sleep until\n+         it will be reset\n+    :param max_retries: number of max retries to a data source\n+        before raising a RetryError exception\n+    :param max_items: max number of category items (e.g., issues,\n+        pull requests) per query\n+    :param sleep_time: time to sleep in case\n+        of connection problems\n+    \"\"\"\n+    version = '0.29'",
        "path": "perceval/backends/core/pagure.py",
        "position": null,
        "original_position": 84,
        "commit_id": "70a89aa1dccc5152ed4a52cb4c5e4e327ba3595a",
        "original_commit_id": "4ffb87bbb10fd5eaf6125f39c09c04e803a1c8c7",
        "user": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "0.1.0 will be enough :)",
        "created_at": "2020-03-05T10:17:30Z",
        "updated_at": "2020-03-08T18:21:42Z",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r388198404",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621",
        "author_association": "MEMBER",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388198404"
          },
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r388198404"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388198404/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "user_data": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false,
          "name": "valerio",
          "company": "@Bitergia ",
          "blog": "http://valeriocos.github.io/",
          "location": "Madrid, Spain",
          "email": "valcos@bitergia.com",
          "hireable": true,
          "bio": null,
          "public_repos": 57,
          "public_gists": 28,
          "followers": 34,
          "following": 5,
          "created_at": "2014-01-27T14:30:30Z",
          "updated_at": "2020-03-17T10:02:44Z",
          "organizations": [
            {
              "login": "Bitergia",
              "id": 1918070,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=",
              "url": "https://api.github.com/orgs/Bitergia",
              "repos_url": "https://api.github.com/orgs/Bitergia/repos",
              "events_url": "https://api.github.com/orgs/Bitergia/events",
              "hooks_url": "https://api.github.com/orgs/Bitergia/hooks",
              "issues_url": "https://api.github.com/orgs/Bitergia/issues",
              "members_url": "https://api.github.com/orgs/Bitergia/members{/member}",
              "public_members_url": "https://api.github.com/orgs/Bitergia/public_members{/member}",
              "avatar_url": "https://avatars3.githubusercontent.com/u/1918070?v=4",
              "description": null
            },
            {
              "login": "grimoirelab",
              "id": 16151805,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1",
              "url": "https://api.github.com/orgs/grimoirelab",
              "repos_url": "https://api.github.com/orgs/grimoirelab/repos",
              "events_url": "https://api.github.com/orgs/grimoirelab/events",
              "hooks_url": "https://api.github.com/orgs/grimoirelab/hooks",
              "issues_url": "https://api.github.com/orgs/grimoirelab/issues",
              "members_url": "https://api.github.com/orgs/grimoirelab/members{/member}",
              "public_members_url": "https://api.github.com/orgs/grimoirelab/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/16151805?v=4",
              "description": ""
            },
            {
              "login": "chaoss",
              "id": 29740296,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
              "url": "https://api.github.com/orgs/chaoss",
              "repos_url": "https://api.github.com/orgs/chaoss/repos",
              "events_url": "https://api.github.com/orgs/chaoss/events",
              "hooks_url": "https://api.github.com/orgs/chaoss/hooks",
              "issues_url": "https://api.github.com/orgs/chaoss/issues",
              "members_url": "https://api.github.com/orgs/chaoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/chaoss/public_members{/member}",
              "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
              "description": ""
            }
          ]
        },
        "reactions_data": []
      },
      {
        "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388198794",
        "pull_request_review_id": 369439055,
        "id": 388198794,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE5ODc5NA==",
        "diff_hunk": "@@ -0,0 +1,528 @@\n+# -*- coding: utf-8 -*-\n+#\n+# Copyright (C) 2015-2019 Bitergia\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program. If not, see <http://www.gnu.org/licenses/>.\n+#\n+# Authors:\n+#     Valerio Cosentino <valcos@bitergia.com>\n+#\n+\n+import json\n+import logging\n+import datetime\n+import requests\n+from grimoirelab_toolkit.datetime import (datetime_to_utc,\n+                                          datetime_utcnow,\n+                                          str_to_datetime)\n+from grimoirelab_toolkit.uris import urijoin\n+\n+from ...backend import (Backend,\n+                        BackendCommand,\n+                        BackendCommandArgumentParser,\n+                        DEFAULT_SEARCH_FIELD)\n+from ...client import HttpClient, RateLimitHandler\n+from ...utils import DEFAULT_DATETIME, DEFAULT_LAST_DATETIME\n+from datetime import datetime\n+\n+CATEGORY_ISSUE = \"issue\"\n+\n+PAGURE_URL = \"https://pagure.io/\"\n+PAGURE_API_URL = \"https://pagure.io/api/0\"\n+\n+# Range before sleeping until rate limit reset\n+MIN_RATE_LIMIT = 10\n+MAX_RATE_LIMIT = 500\n+\n+MAX_CATEGORY_ITEMS_PER_PAGE = 100\n+PER_PAGE = 100\n+\n+# Default sleep time and retries to deal with connection/server problems\n+DEFAULT_SLEEP_TIME = 1\n+MAX_RETRIES = 5\n+\n+TARGET_ISSUE_FIELDS = ['user', 'assignee']\n+\n+logger = logging.getLogger(__name__)\n+\n+\n+class Pagure(Backend):\n+    \"\"\"Pagure backend for Perceval.\n+\n+    This class allows the fetch the issues stored in Pagure\n+    repository. Note that api token is needed to perform\n+    certain API calls\n+\n+    :param namespace: Pagure namespace\n+    :param repository: Pagure repository; in case the repository is within a namespace\n+    :param api_token: Pagure API token to access the API\n+    :param base_url: when no value is set the backend will be fetch\n+     the data from the Pagure public site.\n+    :param tag: label used to mark the data\n+    :param archive: archive to store/retrieve items\n+    :param sleep_for_rate: sleep until rate limit is reset\n+    :param min_rate_to_sleep: minimum rate needed to sleep until\n+         it will be reset\n+    :param max_retries: number of max retries to a data source\n+        before raising a RetryError exception\n+    :param max_items: max number of category items (e.g., issues,\n+        pull requests) per query\n+    :param sleep_time: time to sleep in case\n+        of connection problems\n+    \"\"\"\n+    version = '0.29'\n+\n+    CATEGORIES = [CATEGORY_ISSUE]\n+    CLASSIFIED_FIELDS = [\n+        ['user_data'],\n+        ['assignee_data']\n+    ]\n+\n+    def __init__(self, namespace=None, repository=None,\n+                 api_token=None, base_url=None,\n+                 tag=None, archive=None,\n+                 sleep_for_rate=False, min_rate_to_sleep=MIN_RATE_LIMIT,\n+                 max_retries=MAX_RETRIES, sleep_time=DEFAULT_SLEEP_TIME,\n+                 max_items=MAX_CATEGORY_ITEMS_PER_PAGE):\n+        if api_token is None:",
        "path": "perceval/backends/core/pagure.py",
        "position": null,
        "original_position": 98,
        "commit_id": "70a89aa1dccc5152ed4a52cb4c5e4e327ba3595a",
        "original_commit_id": "4ffb87bbb10fd5eaf6125f39c09c04e803a1c8c7",
        "user": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "this is not needed",
        "created_at": "2020-03-05T10:18:13Z",
        "updated_at": "2020-03-08T18:21:42Z",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r388198794",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621",
        "author_association": "MEMBER",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388198794"
          },
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r388198794"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388198794/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "user_data": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false,
          "name": "valerio",
          "company": "@Bitergia ",
          "blog": "http://valeriocos.github.io/",
          "location": "Madrid, Spain",
          "email": "valcos@bitergia.com",
          "hireable": true,
          "bio": null,
          "public_repos": 57,
          "public_gists": 28,
          "followers": 34,
          "following": 5,
          "created_at": "2014-01-27T14:30:30Z",
          "updated_at": "2020-03-17T10:02:44Z",
          "organizations": [
            {
              "login": "Bitergia",
              "id": 1918070,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=",
              "url": "https://api.github.com/orgs/Bitergia",
              "repos_url": "https://api.github.com/orgs/Bitergia/repos",
              "events_url": "https://api.github.com/orgs/Bitergia/events",
              "hooks_url": "https://api.github.com/orgs/Bitergia/hooks",
              "issues_url": "https://api.github.com/orgs/Bitergia/issues",
              "members_url": "https://api.github.com/orgs/Bitergia/members{/member}",
              "public_members_url": "https://api.github.com/orgs/Bitergia/public_members{/member}",
              "avatar_url": "https://avatars3.githubusercontent.com/u/1918070?v=4",
              "description": null
            },
            {
              "login": "grimoirelab",
              "id": 16151805,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1",
              "url": "https://api.github.com/orgs/grimoirelab",
              "repos_url": "https://api.github.com/orgs/grimoirelab/repos",
              "events_url": "https://api.github.com/orgs/grimoirelab/events",
              "hooks_url": "https://api.github.com/orgs/grimoirelab/hooks",
              "issues_url": "https://api.github.com/orgs/grimoirelab/issues",
              "members_url": "https://api.github.com/orgs/grimoirelab/members{/member}",
              "public_members_url": "https://api.github.com/orgs/grimoirelab/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/16151805?v=4",
              "description": ""
            },
            {
              "login": "chaoss",
              "id": 29740296,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
              "url": "https://api.github.com/orgs/chaoss",
              "repos_url": "https://api.github.com/orgs/chaoss/repos",
              "events_url": "https://api.github.com/orgs/chaoss/events",
              "hooks_url": "https://api.github.com/orgs/chaoss/hooks",
              "issues_url": "https://api.github.com/orgs/chaoss/issues",
              "members_url": "https://api.github.com/orgs/chaoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/chaoss/public_members{/member}",
              "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
              "description": ""
            }
          ]
        },
        "reactions_data": []
      },
      {
        "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388199652",
        "pull_request_review_id": 369439055,
        "id": 388199652,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE5OTY1Mg==",
        "diff_hunk": "@@ -0,0 +1,528 @@\n+# -*- coding: utf-8 -*-\n+#\n+# Copyright (C) 2015-2019 Bitergia\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program. If not, see <http://www.gnu.org/licenses/>.\n+#\n+# Authors:\n+#     Valerio Cosentino <valcos@bitergia.com>",
        "path": "perceval/backends/core/pagure.py",
        "position": null,
        "original_position": 19,
        "commit_id": "70a89aa1dccc5152ed4a52cb4c5e4e327ba3595a",
        "original_commit_id": "4ffb87bbb10fd5eaf6125f39c09c04e803a1c8c7",
        "user": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "Please put your name here",
        "created_at": "2020-03-05T10:19:54Z",
        "updated_at": "2020-03-08T18:21:42Z",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r388199652",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621",
        "author_association": "MEMBER",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388199652"
          },
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r388199652"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388199652/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "user_data": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false,
          "name": "valerio",
          "company": "@Bitergia ",
          "blog": "http://valeriocos.github.io/",
          "location": "Madrid, Spain",
          "email": "valcos@bitergia.com",
          "hireable": true,
          "bio": null,
          "public_repos": 57,
          "public_gists": 28,
          "followers": 34,
          "following": 5,
          "created_at": "2014-01-27T14:30:30Z",
          "updated_at": "2020-03-17T10:02:44Z",
          "organizations": [
            {
              "login": "Bitergia",
              "id": 1918070,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=",
              "url": "https://api.github.com/orgs/Bitergia",
              "repos_url": "https://api.github.com/orgs/Bitergia/repos",
              "events_url": "https://api.github.com/orgs/Bitergia/events",
              "hooks_url": "https://api.github.com/orgs/Bitergia/hooks",
              "issues_url": "https://api.github.com/orgs/Bitergia/issues",
              "members_url": "https://api.github.com/orgs/Bitergia/members{/member}",
              "public_members_url": "https://api.github.com/orgs/Bitergia/public_members{/member}",
              "avatar_url": "https://avatars3.githubusercontent.com/u/1918070?v=4",
              "description": null
            },
            {
              "login": "grimoirelab",
              "id": 16151805,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1",
              "url": "https://api.github.com/orgs/grimoirelab",
              "repos_url": "https://api.github.com/orgs/grimoirelab/repos",
              "events_url": "https://api.github.com/orgs/grimoirelab/events",
              "hooks_url": "https://api.github.com/orgs/grimoirelab/hooks",
              "issues_url": "https://api.github.com/orgs/grimoirelab/issues",
              "members_url": "https://api.github.com/orgs/grimoirelab/members{/member}",
              "public_members_url": "https://api.github.com/orgs/grimoirelab/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/16151805?v=4",
              "description": ""
            },
            {
              "login": "chaoss",
              "id": 29740296,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
              "url": "https://api.github.com/orgs/chaoss",
              "repos_url": "https://api.github.com/orgs/chaoss/repos",
              "events_url": "https://api.github.com/orgs/chaoss/events",
              "hooks_url": "https://api.github.com/orgs/chaoss/hooks",
              "issues_url": "https://api.github.com/orgs/chaoss/issues",
              "members_url": "https://api.github.com/orgs/chaoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/chaoss/public_members{/member}",
              "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
              "description": ""
            }
          ]
        },
        "reactions_data": []
      },
      {
        "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388199761",
        "pull_request_review_id": 369439055,
        "id": 388199761,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE5OTc2MQ==",
        "diff_hunk": "@@ -0,0 +1,528 @@\n+# -*- coding: utf-8 -*-\n+#\n+# Copyright (C) 2015-2019 Bitergia",
        "path": "perceval/backends/core/pagure.py",
        "position": null,
        "original_position": 3,
        "commit_id": "70a89aa1dccc5152ed4a52cb4c5e4e327ba3595a",
        "original_commit_id": "4ffb87bbb10fd5eaf6125f39c09c04e803a1c8c7",
        "user": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "Can you update the copyright to 2020?",
        "created_at": "2020-03-05T10:20:05Z",
        "updated_at": "2020-03-08T18:21:42Z",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r388199761",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621",
        "author_association": "MEMBER",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388199761"
          },
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r388199761"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388199761/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "user_data": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false,
          "name": "valerio",
          "company": "@Bitergia ",
          "blog": "http://valeriocos.github.io/",
          "location": "Madrid, Spain",
          "email": "valcos@bitergia.com",
          "hireable": true,
          "bio": null,
          "public_repos": 57,
          "public_gists": 28,
          "followers": 34,
          "following": 5,
          "created_at": "2014-01-27T14:30:30Z",
          "updated_at": "2020-03-17T10:02:44Z",
          "organizations": [
            {
              "login": "Bitergia",
              "id": 1918070,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=",
              "url": "https://api.github.com/orgs/Bitergia",
              "repos_url": "https://api.github.com/orgs/Bitergia/repos",
              "events_url": "https://api.github.com/orgs/Bitergia/events",
              "hooks_url": "https://api.github.com/orgs/Bitergia/hooks",
              "issues_url": "https://api.github.com/orgs/Bitergia/issues",
              "members_url": "https://api.github.com/orgs/Bitergia/members{/member}",
              "public_members_url": "https://api.github.com/orgs/Bitergia/public_members{/member}",
              "avatar_url": "https://avatars3.githubusercontent.com/u/1918070?v=4",
              "description": null
            },
            {
              "login": "grimoirelab",
              "id": 16151805,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1",
              "url": "https://api.github.com/orgs/grimoirelab",
              "repos_url": "https://api.github.com/orgs/grimoirelab/repos",
              "events_url": "https://api.github.com/orgs/grimoirelab/events",
              "hooks_url": "https://api.github.com/orgs/grimoirelab/hooks",
              "issues_url": "https://api.github.com/orgs/grimoirelab/issues",
              "members_url": "https://api.github.com/orgs/grimoirelab/members{/member}",
              "public_members_url": "https://api.github.com/orgs/grimoirelab/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/16151805?v=4",
              "description": ""
            },
            {
              "login": "chaoss",
              "id": 29740296,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
              "url": "https://api.github.com/orgs/chaoss",
              "repos_url": "https://api.github.com/orgs/chaoss/repos",
              "events_url": "https://api.github.com/orgs/chaoss/events",
              "hooks_url": "https://api.github.com/orgs/chaoss/hooks",
              "issues_url": "https://api.github.com/orgs/chaoss/issues",
              "members_url": "https://api.github.com/orgs/chaoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/chaoss/public_members{/member}",
              "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
              "description": ""
            }
          ]
        },
        "reactions_data": []
      },
      {
        "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388206060",
        "pull_request_review_id": 369439055,
        "id": 388206060,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIwNjA2MA==",
        "diff_hunk": "@@ -0,0 +1,528 @@\n+# -*- coding: utf-8 -*-\n+#\n+# Copyright (C) 2015-2019 Bitergia\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program. If not, see <http://www.gnu.org/licenses/>.\n+#\n+# Authors:\n+#     Valerio Cosentino <valcos@bitergia.com>\n+#\n+\n+import json\n+import logging\n+import datetime\n+import requests\n+from grimoirelab_toolkit.datetime import (datetime_to_utc,\n+                                          datetime_utcnow,\n+                                          str_to_datetime)\n+from grimoirelab_toolkit.uris import urijoin\n+\n+from ...backend import (Backend,\n+                        BackendCommand,\n+                        BackendCommandArgumentParser,\n+                        DEFAULT_SEARCH_FIELD)\n+from ...client import HttpClient, RateLimitHandler\n+from ...utils import DEFAULT_DATETIME, DEFAULT_LAST_DATETIME\n+from datetime import datetime\n+\n+CATEGORY_ISSUE = \"issue\"\n+\n+PAGURE_URL = \"https://pagure.io/\"\n+PAGURE_API_URL = \"https://pagure.io/api/0\"\n+\n+# Range before sleeping until rate limit reset\n+MIN_RATE_LIMIT = 10\n+MAX_RATE_LIMIT = 500\n+\n+MAX_CATEGORY_ITEMS_PER_PAGE = 100\n+PER_PAGE = 100\n+\n+# Default sleep time and retries to deal with connection/server problems\n+DEFAULT_SLEEP_TIME = 1\n+MAX_RETRIES = 5\n+\n+TARGET_ISSUE_FIELDS = ['user', 'assignee']\n+\n+logger = logging.getLogger(__name__)\n+\n+\n+class Pagure(Backend):\n+    \"\"\"Pagure backend for Perceval.\n+\n+    This class allows the fetch the issues stored in Pagure\n+    repository. Note that api token is needed to perform\n+    certain API calls\n+\n+    :param namespace: Pagure namespace\n+    :param repository: Pagure repository; in case the repository is within a namespace\n+    :param api_token: Pagure API token to access the API\n+    :param base_url: when no value is set the backend will be fetch\n+     the data from the Pagure public site.\n+    :param tag: label used to mark the data\n+    :param archive: archive to store/retrieve items\n+    :param sleep_for_rate: sleep until rate limit is reset\n+    :param min_rate_to_sleep: minimum rate needed to sleep until\n+         it will be reset\n+    :param max_retries: number of max retries to a data source\n+        before raising a RetryError exception\n+    :param max_items: max number of category items (e.g., issues,\n+        pull requests) per query\n+    :param sleep_time: time to sleep in case\n+        of connection problems\n+    \"\"\"\n+    version = '0.29'\n+\n+    CATEGORIES = [CATEGORY_ISSUE]\n+    CLASSIFIED_FIELDS = [\n+        ['user_data'],\n+        ['assignee_data']\n+    ]\n+\n+    def __init__(self, namespace=None, repository=None,\n+                 api_token=None, base_url=None,\n+                 tag=None, archive=None,\n+                 sleep_for_rate=False, min_rate_to_sleep=MIN_RATE_LIMIT,\n+                 max_retries=MAX_RETRIES, sleep_time=DEFAULT_SLEEP_TIME,\n+                 max_items=MAX_CATEGORY_ITEMS_PER_PAGE):",
        "path": "perceval/backends/core/pagure.py",
        "position": null,
        "original_position": 97,
        "commit_id": "70a89aa1dccc5152ed4a52cb4c5e4e327ba3595a",
        "original_commit_id": "4ffb87bbb10fd5eaf6125f39c09c04e803a1c8c7",
        "user": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "please include `ssl_verify=True`",
        "created_at": "2020-03-05T10:31:24Z",
        "updated_at": "2020-03-08T18:21:42Z",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r388206060",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621",
        "author_association": "MEMBER",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388206060"
          },
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r388206060"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388206060/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "user_data": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false,
          "name": "valerio",
          "company": "@Bitergia ",
          "blog": "http://valeriocos.github.io/",
          "location": "Madrid, Spain",
          "email": "valcos@bitergia.com",
          "hireable": true,
          "bio": null,
          "public_repos": 57,
          "public_gists": 28,
          "followers": 34,
          "following": 5,
          "created_at": "2014-01-27T14:30:30Z",
          "updated_at": "2020-03-17T10:02:44Z",
          "organizations": [
            {
              "login": "Bitergia",
              "id": 1918070,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=",
              "url": "https://api.github.com/orgs/Bitergia",
              "repos_url": "https://api.github.com/orgs/Bitergia/repos",
              "events_url": "https://api.github.com/orgs/Bitergia/events",
              "hooks_url": "https://api.github.com/orgs/Bitergia/hooks",
              "issues_url": "https://api.github.com/orgs/Bitergia/issues",
              "members_url": "https://api.github.com/orgs/Bitergia/members{/member}",
              "public_members_url": "https://api.github.com/orgs/Bitergia/public_members{/member}",
              "avatar_url": "https://avatars3.githubusercontent.com/u/1918070?v=4",
              "description": null
            },
            {
              "login": "grimoirelab",
              "id": 16151805,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1",
              "url": "https://api.github.com/orgs/grimoirelab",
              "repos_url": "https://api.github.com/orgs/grimoirelab/repos",
              "events_url": "https://api.github.com/orgs/grimoirelab/events",
              "hooks_url": "https://api.github.com/orgs/grimoirelab/hooks",
              "issues_url": "https://api.github.com/orgs/grimoirelab/issues",
              "members_url": "https://api.github.com/orgs/grimoirelab/members{/member}",
              "public_members_url": "https://api.github.com/orgs/grimoirelab/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/16151805?v=4",
              "description": ""
            },
            {
              "login": "chaoss",
              "id": 29740296,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
              "url": "https://api.github.com/orgs/chaoss",
              "repos_url": "https://api.github.com/orgs/chaoss/repos",
              "events_url": "https://api.github.com/orgs/chaoss/events",
              "hooks_url": "https://api.github.com/orgs/chaoss/hooks",
              "issues_url": "https://api.github.com/orgs/chaoss/issues",
              "members_url": "https://api.github.com/orgs/chaoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/chaoss/public_members{/member}",
              "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
              "description": ""
            }
          ]
        },
        "reactions_data": []
      },
      {
        "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388206375",
        "pull_request_review_id": 369439055,
        "id": 388206375,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIwNjM3NQ==",
        "diff_hunk": "@@ -0,0 +1,528 @@\n+# -*- coding: utf-8 -*-\n+#\n+# Copyright (C) 2015-2019 Bitergia\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program. If not, see <http://www.gnu.org/licenses/>.\n+#\n+# Authors:\n+#     Valerio Cosentino <valcos@bitergia.com>\n+#\n+\n+import json\n+import logging\n+import datetime\n+import requests\n+from grimoirelab_toolkit.datetime import (datetime_to_utc,\n+                                          datetime_utcnow,\n+                                          str_to_datetime)\n+from grimoirelab_toolkit.uris import urijoin\n+\n+from ...backend import (Backend,\n+                        BackendCommand,\n+                        BackendCommandArgumentParser,\n+                        DEFAULT_SEARCH_FIELD)\n+from ...client import HttpClient, RateLimitHandler\n+from ...utils import DEFAULT_DATETIME, DEFAULT_LAST_DATETIME\n+from datetime import datetime\n+\n+CATEGORY_ISSUE = \"issue\"\n+\n+PAGURE_URL = \"https://pagure.io/\"\n+PAGURE_API_URL = \"https://pagure.io/api/0\"\n+\n+# Range before sleeping until rate limit reset\n+MIN_RATE_LIMIT = 10\n+MAX_RATE_LIMIT = 500\n+\n+MAX_CATEGORY_ITEMS_PER_PAGE = 100\n+PER_PAGE = 100\n+\n+# Default sleep time and retries to deal with connection/server problems\n+DEFAULT_SLEEP_TIME = 1\n+MAX_RETRIES = 5\n+\n+TARGET_ISSUE_FIELDS = ['user', 'assignee']\n+\n+logger = logging.getLogger(__name__)\n+\n+\n+class Pagure(Backend):\n+    \"\"\"Pagure backend for Perceval.\n+\n+    This class allows the fetch the issues stored in Pagure\n+    repository. Note that api token is needed to perform\n+    certain API calls\n+\n+    :param namespace: Pagure namespace\n+    :param repository: Pagure repository; in case the repository is within a namespace\n+    :param api_token: Pagure API token to access the API\n+    :param base_url: when no value is set the backend will be fetch\n+     the data from the Pagure public site.\n+    :param tag: label used to mark the data\n+    :param archive: archive to store/retrieve items\n+    :param sleep_for_rate: sleep until rate limit is reset\n+    :param min_rate_to_sleep: minimum rate needed to sleep until\n+         it will be reset\n+    :param max_retries: number of max retries to a data source\n+        before raising a RetryError exception\n+    :param max_items: max number of category items (e.g., issues,\n+        pull requests) per query\n+    :param sleep_time: time to sleep in case\n+        of connection problems\n+    \"\"\"\n+    version = '0.29'\n+\n+    CATEGORIES = [CATEGORY_ISSUE]\n+    CLASSIFIED_FIELDS = [\n+        ['user_data'],\n+        ['assignee_data']\n+    ]\n+\n+    def __init__(self, namespace=None, repository=None,\n+                 api_token=None, base_url=None,\n+                 tag=None, archive=None,\n+                 sleep_for_rate=False, min_rate_to_sleep=MIN_RATE_LIMIT,\n+                 max_retries=MAX_RETRIES, sleep_time=DEFAULT_SLEEP_TIME,\n+                 max_items=MAX_CATEGORY_ITEMS_PER_PAGE):\n+        if api_token is None:\n+            api_token = []\n+        origin = base_url if base_url else PAGURE_URL\n+        origin = urijoin(origin, namespace, repository)\n+\n+        super().__init__(origin, tag=tag, archive=archive)",
        "path": "perceval/backends/core/pagure.py",
        "position": null,
        "original_position": 103,
        "commit_id": "70a89aa1dccc5152ed4a52cb4c5e4e327ba3595a",
        "original_commit_id": "4ffb87bbb10fd5eaf6125f39c09c04e803a1c8c7",
        "user": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "please include `ssl_verify=ssl_verify`",
        "created_at": "2020-03-05T10:32:00Z",
        "updated_at": "2020-03-08T18:21:42Z",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r388206375",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621",
        "author_association": "MEMBER",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388206375"
          },
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r388206375"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388206375/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "user_data": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false,
          "name": "valerio",
          "company": "@Bitergia ",
          "blog": "http://valeriocos.github.io/",
          "location": "Madrid, Spain",
          "email": "valcos@bitergia.com",
          "hireable": true,
          "bio": null,
          "public_repos": 57,
          "public_gists": 28,
          "followers": 34,
          "following": 5,
          "created_at": "2014-01-27T14:30:30Z",
          "updated_at": "2020-03-17T10:02:44Z",
          "organizations": [
            {
              "login": "Bitergia",
              "id": 1918070,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=",
              "url": "https://api.github.com/orgs/Bitergia",
              "repos_url": "https://api.github.com/orgs/Bitergia/repos",
              "events_url": "https://api.github.com/orgs/Bitergia/events",
              "hooks_url": "https://api.github.com/orgs/Bitergia/hooks",
              "issues_url": "https://api.github.com/orgs/Bitergia/issues",
              "members_url": "https://api.github.com/orgs/Bitergia/members{/member}",
              "public_members_url": "https://api.github.com/orgs/Bitergia/public_members{/member}",
              "avatar_url": "https://avatars3.githubusercontent.com/u/1918070?v=4",
              "description": null
            },
            {
              "login": "grimoirelab",
              "id": 16151805,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1",
              "url": "https://api.github.com/orgs/grimoirelab",
              "repos_url": "https://api.github.com/orgs/grimoirelab/repos",
              "events_url": "https://api.github.com/orgs/grimoirelab/events",
              "hooks_url": "https://api.github.com/orgs/grimoirelab/hooks",
              "issues_url": "https://api.github.com/orgs/grimoirelab/issues",
              "members_url": "https://api.github.com/orgs/grimoirelab/members{/member}",
              "public_members_url": "https://api.github.com/orgs/grimoirelab/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/16151805?v=4",
              "description": ""
            },
            {
              "login": "chaoss",
              "id": 29740296,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
              "url": "https://api.github.com/orgs/chaoss",
              "repos_url": "https://api.github.com/orgs/chaoss/repos",
              "events_url": "https://api.github.com/orgs/chaoss/events",
              "hooks_url": "https://api.github.com/orgs/chaoss/hooks",
              "issues_url": "https://api.github.com/orgs/chaoss/issues",
              "members_url": "https://api.github.com/orgs/chaoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/chaoss/public_members{/member}",
              "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
              "description": ""
            }
          ]
        },
        "reactions_data": []
      },
      {
        "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388206770",
        "pull_request_review_id": 369439055,
        "id": 388206770,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIwNjc3MA==",
        "diff_hunk": "@@ -0,0 +1,528 @@\n+# -*- coding: utf-8 -*-\n+#\n+# Copyright (C) 2015-2019 Bitergia\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program. If not, see <http://www.gnu.org/licenses/>.\n+#\n+# Authors:\n+#     Valerio Cosentino <valcos@bitergia.com>\n+#\n+\n+import json\n+import logging\n+import datetime\n+import requests\n+from grimoirelab_toolkit.datetime import (datetime_to_utc,\n+                                          datetime_utcnow,\n+                                          str_to_datetime)\n+from grimoirelab_toolkit.uris import urijoin\n+\n+from ...backend import (Backend,\n+                        BackendCommand,\n+                        BackendCommandArgumentParser,\n+                        DEFAULT_SEARCH_FIELD)\n+from ...client import HttpClient, RateLimitHandler\n+from ...utils import DEFAULT_DATETIME, DEFAULT_LAST_DATETIME\n+from datetime import datetime\n+\n+CATEGORY_ISSUE = \"issue\"\n+\n+PAGURE_URL = \"https://pagure.io/\"\n+PAGURE_API_URL = \"https://pagure.io/api/0\"\n+\n+# Range before sleeping until rate limit reset\n+MIN_RATE_LIMIT = 10\n+MAX_RATE_LIMIT = 500\n+\n+MAX_CATEGORY_ITEMS_PER_PAGE = 100\n+PER_PAGE = 100\n+\n+# Default sleep time and retries to deal with connection/server problems\n+DEFAULT_SLEEP_TIME = 1\n+MAX_RETRIES = 5\n+\n+TARGET_ISSUE_FIELDS = ['user', 'assignee']\n+\n+logger = logging.getLogger(__name__)\n+\n+\n+class Pagure(Backend):\n+    \"\"\"Pagure backend for Perceval.\n+\n+    This class allows the fetch the issues stored in Pagure\n+    repository. Note that api token is needed to perform\n+    certain API calls\n+\n+    :param namespace: Pagure namespace\n+    :param repository: Pagure repository; in case the repository is within a namespace\n+    :param api_token: Pagure API token to access the API\n+    :param base_url: when no value is set the backend will be fetch\n+     the data from the Pagure public site.\n+    :param tag: label used to mark the data\n+    :param archive: archive to store/retrieve items\n+    :param sleep_for_rate: sleep until rate limit is reset\n+    :param min_rate_to_sleep: minimum rate needed to sleep until\n+         it will be reset\n+    :param max_retries: number of max retries to a data source\n+        before raising a RetryError exception\n+    :param max_items: max number of category items (e.g., issues,\n+        pull requests) per query\n+    :param sleep_time: time to sleep in case\n+        of connection problems\n+    \"\"\"\n+    version = '0.29'\n+\n+    CATEGORIES = [CATEGORY_ISSUE]\n+    CLASSIFIED_FIELDS = [\n+        ['user_data'],\n+        ['assignee_data']\n+    ]\n+\n+    def __init__(self, namespace=None, repository=None,\n+                 api_token=None, base_url=None,\n+                 tag=None, archive=None,\n+                 sleep_for_rate=False, min_rate_to_sleep=MIN_RATE_LIMIT,\n+                 max_retries=MAX_RETRIES, sleep_time=DEFAULT_SLEEP_TIME,\n+                 max_items=MAX_CATEGORY_ITEMS_PER_PAGE):\n+        if api_token is None:\n+            api_token = []\n+        origin = base_url if base_url else PAGURE_URL\n+        origin = urijoin(origin, namespace, repository)\n+\n+        super().__init__(origin, tag=tag, archive=archive)\n+\n+        self.namespace = namespace\n+        self.repository = repository\n+        self.api_token = api_token\n+        self.base_url = base_url\n+\n+        self.sleep_for_rate = sleep_for_rate\n+        self.min_rate_to_sleep = min_rate_to_sleep\n+        self.max_retries = max_retries\n+        self.sleep_time = sleep_time\n+        self.max_items = max_items\n+\n+        self.client = None\n+        self.exclude_user_data = False\n+        self._users = {}  # internal users cache\n+\n+    def search_fields(self, item):\n+        \"\"\"Add search fields to an item.\n+\n+        It adds the values of `metadata_id` plus the `namespace` and `repo`.\n+\n+        :param item: the item to extract the search fields values\n+\n+        :returns: a dict of search fields\n+        \"\"\"\n+        search_fields = {\n+            DEFAULT_SEARCH_FIELD: self.metadata_id(item),\n+            'namespace': self.namespace,\n+            'repo': self.repository\n+        }\n+\n+        return search_fields\n+\n+    def fetch(self, category=CATEGORY_ISSUE, from_date=DEFAULT_DATETIME, to_date=DEFAULT_LAST_DATETIME,\n+              filter_classified=False):\n+        \"\"\"Fetch the issues from the repository.\n+\n+        The method retrieves, from a Pagure repository, the issues\n+        updated since the given date.\n+\n+        :param category: the category of items to fetch\n+        :param from_date: obtain issues updated since this date\n+        :param to_date: obtain issues until a until a specific date (included)\n+        :param filter_classified: remove classified fields from the resulting items\n+\n+        :returns: a generator of issues\n+        \"\"\"\n+        self.exclude_user_data = filter_classified\n+\n+        if self.exclude_user_data:\n+            logger.info(\"Excluding user data. Personal user information won't be collected from the API.\")\n+\n+        if not from_date:\n+            from_date = DEFAULT_DATETIME\n+\n+        if not to_date:\n+            to_date = DEFAULT_LAST_DATETIME\n+\n+        from_date = from_date.strftime('%Y-%m-%d')\n+        to_date = to_date.strftime('%Y-%m-%d')\n+        kwargs = {\n+            'from_date': from_date,\n+            'to_date': to_date\n+        }\n+        items = super().fetch(category,\n+                              filter_classified=filter_classified,\n+                              **kwargs)\n+\n+        return items\n+\n+    def fetch_items(self, category, **kwargs):\n+        \"\"\"Fetch the items (issues)\n+\n+        :param category: the category of items to fetch\n+        :param kwargs: backend arguments\n+\n+        :returns: a generator of items\n+        \"\"\"\n+        from_date = kwargs['from_date']\n+        to_date = kwargs['to_date']\n+        items = self.__fetch_issues(from_date, to_date)\n+        return items\n+\n+    @classmethod\n+    def has_archiving(cls):\n+        \"\"\"Returns whether it supports archiving items on the fetch process.\n+\n+        :returns: this backend supports items archive\n+        \"\"\"\n+        return True\n+\n+    @classmethod\n+    def has_resuming(cls):\n+        \"\"\"Returns whether it supports to resume the fetch process.\n+\n+        :returns: this backend supports items resuming\n+        \"\"\"\n+        return True\n+\n+    @staticmethod\n+    def metadata_id(item):\n+        \"\"\"Extracts the identifier from a Pagure item.\"\"\"\n+\n+        return str(item['id'])\n+\n+    @staticmethod\n+    def metadata_updated_on(item):\n+        \"\"\"Extracts the update time from a Pagure item.\n+\n+        The timestamp used is extracted from 'last_updated' field.\n+        This date is converted to UNIX timestamp format. As Pagure\n+        dates are in timestamp format the conversion is straightforward.\n+\n+        :param item: item generated by the backend\n+\n+        :returns: a UNIX timestamp\n+        \"\"\"\n+        if \"forks_count\" in item:\n+            return item['fetched_on']\n+        else:\n+            ts = int(item['last_updated'])\n+            ts = datetime.fromtimestamp(ts).timestamp()\n+\n+            return ts\n+\n+    @staticmethod\n+    def metadata_category(item):\n+        \"\"\"Extracts the category from a Pagure item.\n+\n+        This backend generates one type of item which is\n+        'issue'.\n+        \"\"\"\n+\n+        category = CATEGORY_ISSUE\n+\n+        return category\n+\n+    def _init_client(self, from_archive=False):\n+        \"\"\"Init client\"\"\"\n+\n+        return PagureClient(self.namespace, self.repository, self.api_token, self.base_url,\n+                            self.sleep_for_rate, self.min_rate_to_sleep,\n+                            self.sleep_time, self.max_retries, self.max_items,\n+                            self.archive, from_archive)",
        "path": "perceval/backends/core/pagure.py",
        "position": null,
        "original_position": 247,
        "commit_id": "70a89aa1dccc5152ed4a52cb4c5e4e327ba3595a",
        "original_commit_id": "4ffb87bbb10fd5eaf6125f39c09c04e803a1c8c7",
        "user": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "please add `self.ssl_verify`",
        "created_at": "2020-03-05T10:32:47Z",
        "updated_at": "2020-03-08T18:21:42Z",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r388206770",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621",
        "author_association": "MEMBER",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388206770"
          },
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r388206770"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388206770/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "user_data": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false,
          "name": "valerio",
          "company": "@Bitergia ",
          "blog": "http://valeriocos.github.io/",
          "location": "Madrid, Spain",
          "email": "valcos@bitergia.com",
          "hireable": true,
          "bio": null,
          "public_repos": 57,
          "public_gists": 28,
          "followers": 34,
          "following": 5,
          "created_at": "2014-01-27T14:30:30Z",
          "updated_at": "2020-03-17T10:02:44Z",
          "organizations": [
            {
              "login": "Bitergia",
              "id": 1918070,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=",
              "url": "https://api.github.com/orgs/Bitergia",
              "repos_url": "https://api.github.com/orgs/Bitergia/repos",
              "events_url": "https://api.github.com/orgs/Bitergia/events",
              "hooks_url": "https://api.github.com/orgs/Bitergia/hooks",
              "issues_url": "https://api.github.com/orgs/Bitergia/issues",
              "members_url": "https://api.github.com/orgs/Bitergia/members{/member}",
              "public_members_url": "https://api.github.com/orgs/Bitergia/public_members{/member}",
              "avatar_url": "https://avatars3.githubusercontent.com/u/1918070?v=4",
              "description": null
            },
            {
              "login": "grimoirelab",
              "id": 16151805,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1",
              "url": "https://api.github.com/orgs/grimoirelab",
              "repos_url": "https://api.github.com/orgs/grimoirelab/repos",
              "events_url": "https://api.github.com/orgs/grimoirelab/events",
              "hooks_url": "https://api.github.com/orgs/grimoirelab/hooks",
              "issues_url": "https://api.github.com/orgs/grimoirelab/issues",
              "members_url": "https://api.github.com/orgs/grimoirelab/members{/member}",
              "public_members_url": "https://api.github.com/orgs/grimoirelab/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/16151805?v=4",
              "description": ""
            },
            {
              "login": "chaoss",
              "id": 29740296,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
              "url": "https://api.github.com/orgs/chaoss",
              "repos_url": "https://api.github.com/orgs/chaoss/repos",
              "events_url": "https://api.github.com/orgs/chaoss/events",
              "hooks_url": "https://api.github.com/orgs/chaoss/hooks",
              "issues_url": "https://api.github.com/orgs/chaoss/issues",
              "members_url": "https://api.github.com/orgs/chaoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/chaoss/public_members{/member}",
              "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
              "description": ""
            }
          ]
        },
        "reactions_data": []
      },
      {
        "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388207393",
        "pull_request_review_id": 369439055,
        "id": 388207393,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIwNzM5Mw==",
        "diff_hunk": "@@ -0,0 +1,528 @@\n+# -*- coding: utf-8 -*-\n+#\n+# Copyright (C) 2015-2019 Bitergia\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program. If not, see <http://www.gnu.org/licenses/>.\n+#\n+# Authors:\n+#     Valerio Cosentino <valcos@bitergia.com>\n+#\n+\n+import json\n+import logging\n+import datetime\n+import requests\n+from grimoirelab_toolkit.datetime import (datetime_to_utc,\n+                                          datetime_utcnow,\n+                                          str_to_datetime)\n+from grimoirelab_toolkit.uris import urijoin\n+\n+from ...backend import (Backend,\n+                        BackendCommand,\n+                        BackendCommandArgumentParser,\n+                        DEFAULT_SEARCH_FIELD)\n+from ...client import HttpClient, RateLimitHandler\n+from ...utils import DEFAULT_DATETIME, DEFAULT_LAST_DATETIME\n+from datetime import datetime\n+\n+CATEGORY_ISSUE = \"issue\"\n+\n+PAGURE_URL = \"https://pagure.io/\"\n+PAGURE_API_URL = \"https://pagure.io/api/0\"\n+\n+# Range before sleeping until rate limit reset\n+MIN_RATE_LIMIT = 10\n+MAX_RATE_LIMIT = 500\n+\n+MAX_CATEGORY_ITEMS_PER_PAGE = 100\n+PER_PAGE = 100\n+\n+# Default sleep time and retries to deal with connection/server problems\n+DEFAULT_SLEEP_TIME = 1\n+MAX_RETRIES = 5\n+\n+TARGET_ISSUE_FIELDS = ['user', 'assignee']\n+\n+logger = logging.getLogger(__name__)\n+\n+\n+class Pagure(Backend):\n+    \"\"\"Pagure backend for Perceval.\n+\n+    This class allows the fetch the issues stored in Pagure\n+    repository. Note that api token is needed to perform\n+    certain API calls\n+\n+    :param namespace: Pagure namespace\n+    :param repository: Pagure repository; in case the repository is within a namespace\n+    :param api_token: Pagure API token to access the API\n+    :param base_url: when no value is set the backend will be fetch\n+     the data from the Pagure public site.\n+    :param tag: label used to mark the data\n+    :param archive: archive to store/retrieve items\n+    :param sleep_for_rate: sleep until rate limit is reset\n+    :param min_rate_to_sleep: minimum rate needed to sleep until\n+         it will be reset\n+    :param max_retries: number of max retries to a data source\n+        before raising a RetryError exception\n+    :param max_items: max number of category items (e.g., issues,\n+        pull requests) per query\n+    :param sleep_time: time to sleep in case\n+        of connection problems\n+    \"\"\"\n+    version = '0.29'\n+\n+    CATEGORIES = [CATEGORY_ISSUE]\n+    CLASSIFIED_FIELDS = [\n+        ['user_data'],\n+        ['assignee_data']\n+    ]\n+\n+    def __init__(self, namespace=None, repository=None,\n+                 api_token=None, base_url=None,\n+                 tag=None, archive=None,\n+                 sleep_for_rate=False, min_rate_to_sleep=MIN_RATE_LIMIT,\n+                 max_retries=MAX_RETRIES, sleep_time=DEFAULT_SLEEP_TIME,\n+                 max_items=MAX_CATEGORY_ITEMS_PER_PAGE):\n+        if api_token is None:\n+            api_token = []\n+        origin = base_url if base_url else PAGURE_URL\n+        origin = urijoin(origin, namespace, repository)\n+\n+        super().__init__(origin, tag=tag, archive=archive)\n+\n+        self.namespace = namespace\n+        self.repository = repository\n+        self.api_token = api_token\n+        self.base_url = base_url\n+\n+        self.sleep_for_rate = sleep_for_rate\n+        self.min_rate_to_sleep = min_rate_to_sleep\n+        self.max_retries = max_retries\n+        self.sleep_time = sleep_time\n+        self.max_items = max_items\n+\n+        self.client = None\n+        self.exclude_user_data = False\n+        self._users = {}  # internal users cache\n+\n+    def search_fields(self, item):\n+        \"\"\"Add search fields to an item.\n+\n+        It adds the values of `metadata_id` plus the `namespace` and `repo`.\n+\n+        :param item: the item to extract the search fields values\n+\n+        :returns: a dict of search fields\n+        \"\"\"\n+        search_fields = {\n+            DEFAULT_SEARCH_FIELD: self.metadata_id(item),\n+            'namespace': self.namespace,\n+            'repo': self.repository\n+        }\n+\n+        return search_fields\n+\n+    def fetch(self, category=CATEGORY_ISSUE, from_date=DEFAULT_DATETIME, to_date=DEFAULT_LAST_DATETIME,\n+              filter_classified=False):\n+        \"\"\"Fetch the issues from the repository.\n+\n+        The method retrieves, from a Pagure repository, the issues\n+        updated since the given date.\n+\n+        :param category: the category of items to fetch\n+        :param from_date: obtain issues updated since this date\n+        :param to_date: obtain issues until a until a specific date (included)\n+        :param filter_classified: remove classified fields from the resulting items\n+\n+        :returns: a generator of issues\n+        \"\"\"\n+        self.exclude_user_data = filter_classified\n+\n+        if self.exclude_user_data:\n+            logger.info(\"Excluding user data. Personal user information won't be collected from the API.\")\n+\n+        if not from_date:\n+            from_date = DEFAULT_DATETIME\n+\n+        if not to_date:\n+            to_date = DEFAULT_LAST_DATETIME\n+\n+        from_date = from_date.strftime('%Y-%m-%d')\n+        to_date = to_date.strftime('%Y-%m-%d')\n+        kwargs = {\n+            'from_date': from_date,\n+            'to_date': to_date\n+        }\n+        items = super().fetch(category,\n+                              filter_classified=filter_classified,\n+                              **kwargs)\n+\n+        return items\n+\n+    def fetch_items(self, category, **kwargs):\n+        \"\"\"Fetch the items (issues)\n+\n+        :param category: the category of items to fetch\n+        :param kwargs: backend arguments\n+\n+        :returns: a generator of items\n+        \"\"\"\n+        from_date = kwargs['from_date']\n+        to_date = kwargs['to_date']\n+        items = self.__fetch_issues(from_date, to_date)\n+        return items\n+\n+    @classmethod\n+    def has_archiving(cls):\n+        \"\"\"Returns whether it supports archiving items on the fetch process.\n+\n+        :returns: this backend supports items archive\n+        \"\"\"\n+        return True\n+\n+    @classmethod\n+    def has_resuming(cls):\n+        \"\"\"Returns whether it supports to resume the fetch process.\n+\n+        :returns: this backend supports items resuming\n+        \"\"\"\n+        return True\n+\n+    @staticmethod\n+    def metadata_id(item):\n+        \"\"\"Extracts the identifier from a Pagure item.\"\"\"\n+\n+        return str(item['id'])\n+\n+    @staticmethod\n+    def metadata_updated_on(item):\n+        \"\"\"Extracts the update time from a Pagure item.\n+\n+        The timestamp used is extracted from 'last_updated' field.\n+        This date is converted to UNIX timestamp format. As Pagure\n+        dates are in timestamp format the conversion is straightforward.\n+\n+        :param item: item generated by the backend\n+\n+        :returns: a UNIX timestamp\n+        \"\"\"\n+        if \"forks_count\" in item:\n+            return item['fetched_on']\n+        else:\n+            ts = int(item['last_updated'])\n+            ts = datetime.fromtimestamp(ts).timestamp()\n+\n+            return ts\n+\n+    @staticmethod\n+    def metadata_category(item):\n+        \"\"\"Extracts the category from a Pagure item.\n+\n+        This backend generates one type of item which is\n+        'issue'.\n+        \"\"\"\n+\n+        category = CATEGORY_ISSUE\n+\n+        return category\n+\n+    def _init_client(self, from_archive=False):\n+        \"\"\"Init client\"\"\"\n+\n+        return PagureClient(self.namespace, self.repository, self.api_token, self.base_url,\n+                            self.sleep_for_rate, self.min_rate_to_sleep,\n+                            self.sleep_time, self.max_retries, self.max_items,\n+                            self.archive, from_archive)\n+\n+    def __fetch_issues(self, from_date, to_date):\n+        \"\"\"Fetch the issues\n+        :param from_date: starting date from which issues are fetched\n+        :param to_date: ending date till which issues are fetched\n+\n+        :returns: an issue object\n+        \"\"\"\n+\n+        issues_groups = self.client.issues(from_date=from_date)\n+\n+        for raw_issues in issues_groups:\n+            issues = json.loads(raw_issues)\n+            issues = issues['issues']\n+            for issue in issues:\n+\n+                if int(issue['last_updated']) > str_to_datetime(to_date).timestamp():\n+                    return\n+\n+                self.__init_extra_issue_fields(issue)\n+                for field in TARGET_ISSUE_FIELDS:\n+\n+                    if not issue[field]:\n+                        continue\n+\n+                    if field == 'user':\n+                        issue[field + '_data'] = self.__get_user(issue[field]['name'])\n+                    elif field == 'assignee':\n+                        issue[field + '_data'] = self.__get_issue_assignee(issue[field])\n+\n+                yield issue\n+\n+    def __get_issue_assignee(self, raw_assignee):\n+        \"\"\"Get issue assignee\"\"\"\n+        if not raw_assignee:\n+            return None\n+        assignee = self.__get_user(raw_assignee['name'])\n+\n+        return assignee\n+\n+    def __get_user(self, login):\n+        \"\"\"Get user data for the login\"\"\"\n+\n+        if not login or self.exclude_user_data:\n+            return None\n+\n+        user_raw = self.client.user(login)\n+        user = json.loads(user_raw)\n+\n+        return user\n+\n+    def __init_extra_issue_fields(self, issue):\n+        \"\"\"Add fields to an issue\"\"\"\n+\n+        issue['user_data'] = {}\n+        issue['assignee_data'] = {}\n+\n+\n+class PagureClient(HttpClient, RateLimitHandler):\n+    \"\"\"Client for retieving information from Pagure API\n+\n+    :param namespace: Pagure namespace\n+    :param repository: Pagure repository; incase the repository is within a namespace\n+    :param tokens: Pagure API token to access the API\n+    :param base_url: When no value is set the backend will be fetch the data\n+        from the Pagure public site.\n+    :param sleep_for_rate: sleep until rate limit is reset\n+    :param min_rate_to_sleep: minimun rate needed to sleep until\n+         it will be reset\n+    :param sleep_time: time to sleep in case\n+        of connection problems\n+    :param max_retries: number of max retries to a data source\n+        before raising a RetryError exception\n+    :param max_items: max number of category items (e.g., issues,\n+        pull requests) per query\n+    :param archive: collect issues already retrieved from an archive\n+    :param from_archive: it tells whether to write/read the archive\n+    \"\"\"\n+    EXTRA_STATUS_FORCELIST = [403, 500, 502, 503]\n+\n+    _users = {}  # users cache\n+\n+    def __init__(self, namespace, repository, tokens,\n+                 base_url=None, sleep_for_rate=False, min_rate_to_sleep=MIN_RATE_LIMIT,\n+                 sleep_time=DEFAULT_SLEEP_TIME, max_retries=MAX_RETRIES,\n+                 max_items=MAX_CATEGORY_ITEMS_PER_PAGE, archive=None, from_archive=False):",
        "path": "perceval/backends/core/pagure.py",
        "position": null,
        "original_position": 333,
        "commit_id": "70a89aa1dccc5152ed4a52cb4c5e4e327ba3595a",
        "original_commit_id": "4ffb87bbb10fd5eaf6125f39c09c04e803a1c8c7",
        "user": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "please add `ssl_verify=True`",
        "created_at": "2020-03-05T10:33:54Z",
        "updated_at": "2020-03-08T18:21:42Z",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r388207393",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621",
        "author_association": "MEMBER",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388207393"
          },
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r388207393"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388207393/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "user_data": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false,
          "name": "valerio",
          "company": "@Bitergia ",
          "blog": "http://valeriocos.github.io/",
          "location": "Madrid, Spain",
          "email": "valcos@bitergia.com",
          "hireable": true,
          "bio": null,
          "public_repos": 57,
          "public_gists": 28,
          "followers": 34,
          "following": 5,
          "created_at": "2014-01-27T14:30:30Z",
          "updated_at": "2020-03-17T10:02:44Z",
          "organizations": [
            {
              "login": "Bitergia",
              "id": 1918070,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=",
              "url": "https://api.github.com/orgs/Bitergia",
              "repos_url": "https://api.github.com/orgs/Bitergia/repos",
              "events_url": "https://api.github.com/orgs/Bitergia/events",
              "hooks_url": "https://api.github.com/orgs/Bitergia/hooks",
              "issues_url": "https://api.github.com/orgs/Bitergia/issues",
              "members_url": "https://api.github.com/orgs/Bitergia/members{/member}",
              "public_members_url": "https://api.github.com/orgs/Bitergia/public_members{/member}",
              "avatar_url": "https://avatars3.githubusercontent.com/u/1918070?v=4",
              "description": null
            },
            {
              "login": "grimoirelab",
              "id": 16151805,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1",
              "url": "https://api.github.com/orgs/grimoirelab",
              "repos_url": "https://api.github.com/orgs/grimoirelab/repos",
              "events_url": "https://api.github.com/orgs/grimoirelab/events",
              "hooks_url": "https://api.github.com/orgs/grimoirelab/hooks",
              "issues_url": "https://api.github.com/orgs/grimoirelab/issues",
              "members_url": "https://api.github.com/orgs/grimoirelab/members{/member}",
              "public_members_url": "https://api.github.com/orgs/grimoirelab/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/16151805?v=4",
              "description": ""
            },
            {
              "login": "chaoss",
              "id": 29740296,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
              "url": "https://api.github.com/orgs/chaoss",
              "repos_url": "https://api.github.com/orgs/chaoss/repos",
              "events_url": "https://api.github.com/orgs/chaoss/events",
              "hooks_url": "https://api.github.com/orgs/chaoss/hooks",
              "issues_url": "https://api.github.com/orgs/chaoss/issues",
              "members_url": "https://api.github.com/orgs/chaoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/chaoss/public_members{/member}",
              "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
              "description": ""
            }
          ]
        },
        "reactions_data": []
      },
      {
        "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388207511",
        "pull_request_review_id": 369439055,
        "id": 388207511,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIwNzUxMQ==",
        "diff_hunk": "@@ -0,0 +1,528 @@\n+# -*- coding: utf-8 -*-\n+#\n+# Copyright (C) 2015-2019 Bitergia\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program. If not, see <http://www.gnu.org/licenses/>.\n+#\n+# Authors:\n+#     Valerio Cosentino <valcos@bitergia.com>\n+#\n+\n+import json\n+import logging\n+import datetime\n+import requests\n+from grimoirelab_toolkit.datetime import (datetime_to_utc,\n+                                          datetime_utcnow,\n+                                          str_to_datetime)\n+from grimoirelab_toolkit.uris import urijoin\n+\n+from ...backend import (Backend,\n+                        BackendCommand,\n+                        BackendCommandArgumentParser,\n+                        DEFAULT_SEARCH_FIELD)\n+from ...client import HttpClient, RateLimitHandler\n+from ...utils import DEFAULT_DATETIME, DEFAULT_LAST_DATETIME\n+from datetime import datetime\n+\n+CATEGORY_ISSUE = \"issue\"\n+\n+PAGURE_URL = \"https://pagure.io/\"\n+PAGURE_API_URL = \"https://pagure.io/api/0\"\n+\n+# Range before sleeping until rate limit reset\n+MIN_RATE_LIMIT = 10\n+MAX_RATE_LIMIT = 500\n+\n+MAX_CATEGORY_ITEMS_PER_PAGE = 100\n+PER_PAGE = 100\n+\n+# Default sleep time and retries to deal with connection/server problems\n+DEFAULT_SLEEP_TIME = 1\n+MAX_RETRIES = 5\n+\n+TARGET_ISSUE_FIELDS = ['user', 'assignee']\n+\n+logger = logging.getLogger(__name__)\n+\n+\n+class Pagure(Backend):\n+    \"\"\"Pagure backend for Perceval.\n+\n+    This class allows the fetch the issues stored in Pagure\n+    repository. Note that api token is needed to perform\n+    certain API calls\n+\n+    :param namespace: Pagure namespace\n+    :param repository: Pagure repository; in case the repository is within a namespace\n+    :param api_token: Pagure API token to access the API\n+    :param base_url: when no value is set the backend will be fetch\n+     the data from the Pagure public site.\n+    :param tag: label used to mark the data\n+    :param archive: archive to store/retrieve items\n+    :param sleep_for_rate: sleep until rate limit is reset\n+    :param min_rate_to_sleep: minimum rate needed to sleep until\n+         it will be reset\n+    :param max_retries: number of max retries to a data source\n+        before raising a RetryError exception\n+    :param max_items: max number of category items (e.g., issues,\n+        pull requests) per query\n+    :param sleep_time: time to sleep in case\n+        of connection problems\n+    \"\"\"\n+    version = '0.29'\n+\n+    CATEGORIES = [CATEGORY_ISSUE]\n+    CLASSIFIED_FIELDS = [\n+        ['user_data'],\n+        ['assignee_data']\n+    ]\n+\n+    def __init__(self, namespace=None, repository=None,\n+                 api_token=None, base_url=None,\n+                 tag=None, archive=None,\n+                 sleep_for_rate=False, min_rate_to_sleep=MIN_RATE_LIMIT,\n+                 max_retries=MAX_RETRIES, sleep_time=DEFAULT_SLEEP_TIME,\n+                 max_items=MAX_CATEGORY_ITEMS_PER_PAGE):\n+        if api_token is None:\n+            api_token = []\n+        origin = base_url if base_url else PAGURE_URL\n+        origin = urijoin(origin, namespace, repository)\n+\n+        super().__init__(origin, tag=tag, archive=archive)\n+\n+        self.namespace = namespace\n+        self.repository = repository\n+        self.api_token = api_token\n+        self.base_url = base_url\n+\n+        self.sleep_for_rate = sleep_for_rate\n+        self.min_rate_to_sleep = min_rate_to_sleep\n+        self.max_retries = max_retries\n+        self.sleep_time = sleep_time\n+        self.max_items = max_items\n+\n+        self.client = None\n+        self.exclude_user_data = False\n+        self._users = {}  # internal users cache\n+\n+    def search_fields(self, item):\n+        \"\"\"Add search fields to an item.\n+\n+        It adds the values of `metadata_id` plus the `namespace` and `repo`.\n+\n+        :param item: the item to extract the search fields values\n+\n+        :returns: a dict of search fields\n+        \"\"\"\n+        search_fields = {\n+            DEFAULT_SEARCH_FIELD: self.metadata_id(item),\n+            'namespace': self.namespace,\n+            'repo': self.repository\n+        }\n+\n+        return search_fields\n+\n+    def fetch(self, category=CATEGORY_ISSUE, from_date=DEFAULT_DATETIME, to_date=DEFAULT_LAST_DATETIME,\n+              filter_classified=False):\n+        \"\"\"Fetch the issues from the repository.\n+\n+        The method retrieves, from a Pagure repository, the issues\n+        updated since the given date.\n+\n+        :param category: the category of items to fetch\n+        :param from_date: obtain issues updated since this date\n+        :param to_date: obtain issues until a until a specific date (included)\n+        :param filter_classified: remove classified fields from the resulting items\n+\n+        :returns: a generator of issues\n+        \"\"\"\n+        self.exclude_user_data = filter_classified\n+\n+        if self.exclude_user_data:\n+            logger.info(\"Excluding user data. Personal user information won't be collected from the API.\")\n+\n+        if not from_date:\n+            from_date = DEFAULT_DATETIME\n+\n+        if not to_date:\n+            to_date = DEFAULT_LAST_DATETIME\n+\n+        from_date = from_date.strftime('%Y-%m-%d')\n+        to_date = to_date.strftime('%Y-%m-%d')\n+        kwargs = {\n+            'from_date': from_date,\n+            'to_date': to_date\n+        }\n+        items = super().fetch(category,\n+                              filter_classified=filter_classified,\n+                              **kwargs)\n+\n+        return items\n+\n+    def fetch_items(self, category, **kwargs):\n+        \"\"\"Fetch the items (issues)\n+\n+        :param category: the category of items to fetch\n+        :param kwargs: backend arguments\n+\n+        :returns: a generator of items\n+        \"\"\"\n+        from_date = kwargs['from_date']\n+        to_date = kwargs['to_date']\n+        items = self.__fetch_issues(from_date, to_date)\n+        return items\n+\n+    @classmethod\n+    def has_archiving(cls):\n+        \"\"\"Returns whether it supports archiving items on the fetch process.\n+\n+        :returns: this backend supports items archive\n+        \"\"\"\n+        return True\n+\n+    @classmethod\n+    def has_resuming(cls):\n+        \"\"\"Returns whether it supports to resume the fetch process.\n+\n+        :returns: this backend supports items resuming\n+        \"\"\"\n+        return True\n+\n+    @staticmethod\n+    def metadata_id(item):\n+        \"\"\"Extracts the identifier from a Pagure item.\"\"\"\n+\n+        return str(item['id'])\n+\n+    @staticmethod\n+    def metadata_updated_on(item):\n+        \"\"\"Extracts the update time from a Pagure item.\n+\n+        The timestamp used is extracted from 'last_updated' field.\n+        This date is converted to UNIX timestamp format. As Pagure\n+        dates are in timestamp format the conversion is straightforward.\n+\n+        :param item: item generated by the backend\n+\n+        :returns: a UNIX timestamp\n+        \"\"\"\n+        if \"forks_count\" in item:\n+            return item['fetched_on']\n+        else:\n+            ts = int(item['last_updated'])\n+            ts = datetime.fromtimestamp(ts).timestamp()\n+\n+            return ts\n+\n+    @staticmethod\n+    def metadata_category(item):\n+        \"\"\"Extracts the category from a Pagure item.\n+\n+        This backend generates one type of item which is\n+        'issue'.\n+        \"\"\"\n+\n+        category = CATEGORY_ISSUE\n+\n+        return category\n+\n+    def _init_client(self, from_archive=False):\n+        \"\"\"Init client\"\"\"\n+\n+        return PagureClient(self.namespace, self.repository, self.api_token, self.base_url,\n+                            self.sleep_for_rate, self.min_rate_to_sleep,\n+                            self.sleep_time, self.max_retries, self.max_items,\n+                            self.archive, from_archive)\n+\n+    def __fetch_issues(self, from_date, to_date):\n+        \"\"\"Fetch the issues\n+        :param from_date: starting date from which issues are fetched\n+        :param to_date: ending date till which issues are fetched\n+\n+        :returns: an issue object\n+        \"\"\"\n+\n+        issues_groups = self.client.issues(from_date=from_date)\n+\n+        for raw_issues in issues_groups:\n+            issues = json.loads(raw_issues)\n+            issues = issues['issues']\n+            for issue in issues:\n+\n+                if int(issue['last_updated']) > str_to_datetime(to_date).timestamp():\n+                    return\n+\n+                self.__init_extra_issue_fields(issue)\n+                for field in TARGET_ISSUE_FIELDS:\n+\n+                    if not issue[field]:\n+                        continue\n+\n+                    if field == 'user':\n+                        issue[field + '_data'] = self.__get_user(issue[field]['name'])\n+                    elif field == 'assignee':\n+                        issue[field + '_data'] = self.__get_issue_assignee(issue[field])\n+\n+                yield issue\n+\n+    def __get_issue_assignee(self, raw_assignee):\n+        \"\"\"Get issue assignee\"\"\"\n+        if not raw_assignee:\n+            return None\n+        assignee = self.__get_user(raw_assignee['name'])\n+\n+        return assignee\n+\n+    def __get_user(self, login):\n+        \"\"\"Get user data for the login\"\"\"\n+\n+        if not login or self.exclude_user_data:\n+            return None\n+\n+        user_raw = self.client.user(login)\n+        user = json.loads(user_raw)\n+\n+        return user\n+\n+    def __init_extra_issue_fields(self, issue):\n+        \"\"\"Add fields to an issue\"\"\"\n+\n+        issue['user_data'] = {}\n+        issue['assignee_data'] = {}\n+\n+\n+class PagureClient(HttpClient, RateLimitHandler):\n+    \"\"\"Client for retieving information from Pagure API\n+\n+    :param namespace: Pagure namespace\n+    :param repository: Pagure repository; incase the repository is within a namespace\n+    :param tokens: Pagure API token to access the API\n+    :param base_url: When no value is set the backend will be fetch the data\n+        from the Pagure public site.\n+    :param sleep_for_rate: sleep until rate limit is reset\n+    :param min_rate_to_sleep: minimun rate needed to sleep until\n+         it will be reset\n+    :param sleep_time: time to sleep in case\n+        of connection problems\n+    :param max_retries: number of max retries to a data source\n+        before raising a RetryError exception\n+    :param max_items: max number of category items (e.g., issues,\n+        pull requests) per query\n+    :param archive: collect issues already retrieved from an archive\n+    :param from_archive: it tells whether to write/read the archive\n+    \"\"\"\n+    EXTRA_STATUS_FORCELIST = [403, 500, 502, 503]\n+\n+    _users = {}  # users cache\n+\n+    def __init__(self, namespace, repository, tokens,\n+                 base_url=None, sleep_for_rate=False, min_rate_to_sleep=MIN_RATE_LIMIT,\n+                 sleep_time=DEFAULT_SLEEP_TIME, max_retries=MAX_RETRIES,\n+                 max_items=MAX_CATEGORY_ITEMS_PER_PAGE, archive=None, from_archive=False):\n+        self.namespace = namespace\n+        self.repository = repository\n+        self.tokens = tokens\n+        self.n_tokens = len(self.tokens)\n+        self.current_token = None\n+        self.last_rate_limit_checked = None\n+        self.max_items = max_items\n+\n+        base_url = PAGURE_API_URL\n+\n+        super().__init__(base_url, sleep_time=sleep_time, max_retries=max_retries,\n+                         extra_headers=self._set_extra_headers(),\n+                         extra_status_forcelist=self.EXTRA_STATUS_FORCELIST,\n+                         archive=archive, from_archive=from_archive)",
        "path": "perceval/backends/core/pagure.py",
        "position": null,
        "original_position": 347,
        "commit_id": "70a89aa1dccc5152ed4a52cb4c5e4e327ba3595a",
        "original_commit_id": "4ffb87bbb10fd5eaf6125f39c09c04e803a1c8c7",
        "user": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "please add `ssl_verify=ssl_verify`",
        "created_at": "2020-03-05T10:34:07Z",
        "updated_at": "2020-03-08T18:21:42Z",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r388207511",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621",
        "author_association": "MEMBER",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388207511"
          },
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r388207511"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388207511/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "user_data": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false,
          "name": "valerio",
          "company": "@Bitergia ",
          "blog": "http://valeriocos.github.io/",
          "location": "Madrid, Spain",
          "email": "valcos@bitergia.com",
          "hireable": true,
          "bio": null,
          "public_repos": 57,
          "public_gists": 28,
          "followers": 34,
          "following": 5,
          "created_at": "2014-01-27T14:30:30Z",
          "updated_at": "2020-03-17T10:02:44Z",
          "organizations": [
            {
              "login": "Bitergia",
              "id": 1918070,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=",
              "url": "https://api.github.com/orgs/Bitergia",
              "repos_url": "https://api.github.com/orgs/Bitergia/repos",
              "events_url": "https://api.github.com/orgs/Bitergia/events",
              "hooks_url": "https://api.github.com/orgs/Bitergia/hooks",
              "issues_url": "https://api.github.com/orgs/Bitergia/issues",
              "members_url": "https://api.github.com/orgs/Bitergia/members{/member}",
              "public_members_url": "https://api.github.com/orgs/Bitergia/public_members{/member}",
              "avatar_url": "https://avatars3.githubusercontent.com/u/1918070?v=4",
              "description": null
            },
            {
              "login": "grimoirelab",
              "id": 16151805,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1",
              "url": "https://api.github.com/orgs/grimoirelab",
              "repos_url": "https://api.github.com/orgs/grimoirelab/repos",
              "events_url": "https://api.github.com/orgs/grimoirelab/events",
              "hooks_url": "https://api.github.com/orgs/grimoirelab/hooks",
              "issues_url": "https://api.github.com/orgs/grimoirelab/issues",
              "members_url": "https://api.github.com/orgs/grimoirelab/members{/member}",
              "public_members_url": "https://api.github.com/orgs/grimoirelab/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/16151805?v=4",
              "description": ""
            },
            {
              "login": "chaoss",
              "id": 29740296,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
              "url": "https://api.github.com/orgs/chaoss",
              "repos_url": "https://api.github.com/orgs/chaoss/repos",
              "events_url": "https://api.github.com/orgs/chaoss/events",
              "hooks_url": "https://api.github.com/orgs/chaoss/hooks",
              "issues_url": "https://api.github.com/orgs/chaoss/issues",
              "members_url": "https://api.github.com/orgs/chaoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/chaoss/public_members{/member}",
              "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
              "description": ""
            }
          ]
        },
        "reactions_data": []
      },
      {
        "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388213275",
        "pull_request_review_id": 369439055,
        "id": 388213275,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIxMzI3NQ==",
        "diff_hunk": "@@ -0,0 +1,528 @@\n+# -*- coding: utf-8 -*-\n+#\n+# Copyright (C) 2015-2019 Bitergia\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program. If not, see <http://www.gnu.org/licenses/>.\n+#\n+# Authors:\n+#     Valerio Cosentino <valcos@bitergia.com>\n+#\n+\n+import json\n+import logging\n+import datetime\n+import requests\n+from grimoirelab_toolkit.datetime import (datetime_to_utc,\n+                                          datetime_utcnow,\n+                                          str_to_datetime)\n+from grimoirelab_toolkit.uris import urijoin\n+\n+from ...backend import (Backend,\n+                        BackendCommand,\n+                        BackendCommandArgumentParser,\n+                        DEFAULT_SEARCH_FIELD)\n+from ...client import HttpClient, RateLimitHandler\n+from ...utils import DEFAULT_DATETIME, DEFAULT_LAST_DATETIME\n+from datetime import datetime\n+\n+CATEGORY_ISSUE = \"issue\"\n+\n+PAGURE_URL = \"https://pagure.io/\"\n+PAGURE_API_URL = \"https://pagure.io/api/0\"\n+\n+# Range before sleeping until rate limit reset\n+MIN_RATE_LIMIT = 10\n+MAX_RATE_LIMIT = 500\n+\n+MAX_CATEGORY_ITEMS_PER_PAGE = 100\n+PER_PAGE = 100\n+\n+# Default sleep time and retries to deal with connection/server problems\n+DEFAULT_SLEEP_TIME = 1\n+MAX_RETRIES = 5\n+\n+TARGET_ISSUE_FIELDS = ['user', 'assignee']\n+\n+logger = logging.getLogger(__name__)\n+\n+\n+class Pagure(Backend):\n+    \"\"\"Pagure backend for Perceval.\n+\n+    This class allows the fetch the issues stored in Pagure\n+    repository. Note that api token is needed to perform\n+    certain API calls\n+\n+    :param namespace: Pagure namespace\n+    :param repository: Pagure repository; in case the repository is within a namespace\n+    :param api_token: Pagure API token to access the API\n+    :param base_url: when no value is set the backend will be fetch\n+     the data from the Pagure public site.\n+    :param tag: label used to mark the data\n+    :param archive: archive to store/retrieve items\n+    :param sleep_for_rate: sleep until rate limit is reset\n+    :param min_rate_to_sleep: minimum rate needed to sleep until\n+         it will be reset\n+    :param max_retries: number of max retries to a data source\n+        before raising a RetryError exception\n+    :param max_items: max number of category items (e.g., issues,\n+        pull requests) per query\n+    :param sleep_time: time to sleep in case\n+        of connection problems\n+    \"\"\"\n+    version = '0.29'\n+\n+    CATEGORIES = [CATEGORY_ISSUE]\n+    CLASSIFIED_FIELDS = [\n+        ['user_data'],\n+        ['assignee_data']\n+    ]\n+\n+    def __init__(self, namespace=None, repository=None,\n+                 api_token=None, base_url=None,\n+                 tag=None, archive=None,\n+                 sleep_for_rate=False, min_rate_to_sleep=MIN_RATE_LIMIT,\n+                 max_retries=MAX_RETRIES, sleep_time=DEFAULT_SLEEP_TIME,\n+                 max_items=MAX_CATEGORY_ITEMS_PER_PAGE):\n+        if api_token is None:\n+            api_token = []\n+        origin = base_url if base_url else PAGURE_URL\n+        origin = urijoin(origin, namespace, repository)\n+\n+        super().__init__(origin, tag=tag, archive=archive)\n+\n+        self.namespace = namespace\n+        self.repository = repository\n+        self.api_token = api_token\n+        self.base_url = base_url\n+\n+        self.sleep_for_rate = sleep_for_rate\n+        self.min_rate_to_sleep = min_rate_to_sleep\n+        self.max_retries = max_retries\n+        self.sleep_time = sleep_time\n+        self.max_items = max_items\n+\n+        self.client = None\n+        self.exclude_user_data = False\n+        self._users = {}  # internal users cache\n+\n+    def search_fields(self, item):\n+        \"\"\"Add search fields to an item.\n+\n+        It adds the values of `metadata_id` plus the `namespace` and `repo`.\n+\n+        :param item: the item to extract the search fields values\n+\n+        :returns: a dict of search fields\n+        \"\"\"\n+        search_fields = {\n+            DEFAULT_SEARCH_FIELD: self.metadata_id(item),\n+            'namespace': self.namespace,\n+            'repo': self.repository\n+        }\n+\n+        return search_fields\n+\n+    def fetch(self, category=CATEGORY_ISSUE, from_date=DEFAULT_DATETIME, to_date=DEFAULT_LAST_DATETIME,\n+              filter_classified=False):\n+        \"\"\"Fetch the issues from the repository.\n+\n+        The method retrieves, from a Pagure repository, the issues\n+        updated since the given date.\n+\n+        :param category: the category of items to fetch\n+        :param from_date: obtain issues updated since this date\n+        :param to_date: obtain issues until a until a specific date (included)\n+        :param filter_classified: remove classified fields from the resulting items\n+\n+        :returns: a generator of issues\n+        \"\"\"\n+        self.exclude_user_data = filter_classified\n+\n+        if self.exclude_user_data:\n+            logger.info(\"Excluding user data. Personal user information won't be collected from the API.\")\n+\n+        if not from_date:\n+            from_date = DEFAULT_DATETIME\n+\n+        if not to_date:\n+            to_date = DEFAULT_LAST_DATETIME\n+\n+        from_date = from_date.strftime('%Y-%m-%d')\n+        to_date = to_date.strftime('%Y-%m-%d')\n+        kwargs = {\n+            'from_date': from_date,\n+            'to_date': to_date\n+        }\n+        items = super().fetch(category,\n+                              filter_classified=filter_classified,\n+                              **kwargs)\n+\n+        return items\n+\n+    def fetch_items(self, category, **kwargs):\n+        \"\"\"Fetch the items (issues)\n+\n+        :param category: the category of items to fetch\n+        :param kwargs: backend arguments\n+\n+        :returns: a generator of items\n+        \"\"\"\n+        from_date = kwargs['from_date']\n+        to_date = kwargs['to_date']\n+        items = self.__fetch_issues(from_date, to_date)\n+        return items\n+\n+    @classmethod\n+    def has_archiving(cls):\n+        \"\"\"Returns whether it supports archiving items on the fetch process.\n+\n+        :returns: this backend supports items archive\n+        \"\"\"\n+        return True\n+\n+    @classmethod\n+    def has_resuming(cls):\n+        \"\"\"Returns whether it supports to resume the fetch process.\n+\n+        :returns: this backend supports items resuming\n+        \"\"\"\n+        return True\n+\n+    @staticmethod\n+    def metadata_id(item):\n+        \"\"\"Extracts the identifier from a Pagure item.\"\"\"\n+\n+        return str(item['id'])\n+\n+    @staticmethod\n+    def metadata_updated_on(item):\n+        \"\"\"Extracts the update time from a Pagure item.\n+\n+        The timestamp used is extracted from 'last_updated' field.\n+        This date is converted to UNIX timestamp format. As Pagure\n+        dates are in timestamp format the conversion is straightforward.\n+\n+        :param item: item generated by the backend\n+\n+        :returns: a UNIX timestamp\n+        \"\"\"\n+        if \"forks_count\" in item:\n+            return item['fetched_on']\n+        else:\n+            ts = int(item['last_updated'])\n+            ts = datetime.fromtimestamp(ts).timestamp()\n+\n+            return ts\n+\n+    @staticmethod\n+    def metadata_category(item):\n+        \"\"\"Extracts the category from a Pagure item.\n+\n+        This backend generates one type of item which is\n+        'issue'.\n+        \"\"\"\n+\n+        category = CATEGORY_ISSUE\n+\n+        return category\n+\n+    def _init_client(self, from_archive=False):\n+        \"\"\"Init client\"\"\"\n+\n+        return PagureClient(self.namespace, self.repository, self.api_token, self.base_url,\n+                            self.sleep_for_rate, self.min_rate_to_sleep,\n+                            self.sleep_time, self.max_retries, self.max_items,\n+                            self.archive, from_archive)\n+\n+    def __fetch_issues(self, from_date, to_date):\n+        \"\"\"Fetch the issues\n+        :param from_date: starting date from which issues are fetched\n+        :param to_date: ending date till which issues are fetched\n+\n+        :returns: an issue object\n+        \"\"\"\n+\n+        issues_groups = self.client.issues(from_date=from_date)\n+\n+        for raw_issues in issues_groups:\n+            issues = json.loads(raw_issues)\n+            issues = issues['issues']\n+            for issue in issues:\n+\n+                if int(issue['last_updated']) > str_to_datetime(to_date).timestamp():\n+                    return\n+\n+                self.__init_extra_issue_fields(issue)\n+                for field in TARGET_ISSUE_FIELDS:\n+\n+                    if not issue[field]:\n+                        continue\n+\n+                    if field == 'user':\n+                        issue[field + '_data'] = self.__get_user(issue[field]['name'])\n+                    elif field == 'assignee':\n+                        issue[field + '_data'] = self.__get_issue_assignee(issue[field])\n+\n+                yield issue\n+\n+    def __get_issue_assignee(self, raw_assignee):\n+        \"\"\"Get issue assignee\"\"\"\n+        if not raw_assignee:\n+            return None\n+        assignee = self.__get_user(raw_assignee['name'])\n+\n+        return assignee\n+\n+    def __get_user(self, login):\n+        \"\"\"Get user data for the login\"\"\"\n+\n+        if not login or self.exclude_user_data:\n+            return None\n+\n+        user_raw = self.client.user(login)\n+        user = json.loads(user_raw)\n+\n+        return user\n+\n+    def __init_extra_issue_fields(self, issue):\n+        \"\"\"Add fields to an issue\"\"\"\n+\n+        issue['user_data'] = {}\n+        issue['assignee_data'] = {}\n+\n+\n+class PagureClient(HttpClient, RateLimitHandler):\n+    \"\"\"Client for retieving information from Pagure API\n+\n+    :param namespace: Pagure namespace\n+    :param repository: Pagure repository; incase the repository is within a namespace\n+    :param tokens: Pagure API token to access the API\n+    :param base_url: When no value is set the backend will be fetch the data\n+        from the Pagure public site.\n+    :param sleep_for_rate: sleep until rate limit is reset\n+    :param min_rate_to_sleep: minimun rate needed to sleep until\n+         it will be reset\n+    :param sleep_time: time to sleep in case\n+        of connection problems\n+    :param max_retries: number of max retries to a data source\n+        before raising a RetryError exception\n+    :param max_items: max number of category items (e.g., issues,\n+        pull requests) per query\n+    :param archive: collect issues already retrieved from an archive\n+    :param from_archive: it tells whether to write/read the archive\n+    \"\"\"\n+    EXTRA_STATUS_FORCELIST = [403, 500, 502, 503]\n+\n+    _users = {}  # users cache\n+\n+    def __init__(self, namespace, repository, tokens,\n+                 base_url=None, sleep_for_rate=False, min_rate_to_sleep=MIN_RATE_LIMIT,\n+                 sleep_time=DEFAULT_SLEEP_TIME, max_retries=MAX_RETRIES,\n+                 max_items=MAX_CATEGORY_ITEMS_PER_PAGE, archive=None, from_archive=False):\n+        self.namespace = namespace\n+        self.repository = repository\n+        self.tokens = tokens",
        "path": "perceval/backends/core/pagure.py",
        "position": null,
        "original_position": 336,
        "commit_id": "70a89aa1dccc5152ed4a52cb4c5e4e327ba3595a",
        "original_commit_id": "4ffb87bbb10fd5eaf6125f39c09c04e803a1c8c7",
        "user": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "let's use only one token for the moment, you can mimic the code of the gitlab backend: https://github.com/chaoss/grimoirelab-perceval/blob/master/perceval/backends/core/gitlab.py",
        "created_at": "2020-03-05T10:44:21Z",
        "updated_at": "2020-03-08T18:21:42Z",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r388213275",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621",
        "author_association": "MEMBER",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388213275"
          },
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r388213275"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388213275/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "user_data": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false,
          "name": "valerio",
          "company": "@Bitergia ",
          "blog": "http://valeriocos.github.io/",
          "location": "Madrid, Spain",
          "email": "valcos@bitergia.com",
          "hireable": true,
          "bio": null,
          "public_repos": 57,
          "public_gists": 28,
          "followers": 34,
          "following": 5,
          "created_at": "2014-01-27T14:30:30Z",
          "updated_at": "2020-03-17T10:02:44Z",
          "organizations": [
            {
              "login": "Bitergia",
              "id": 1918070,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=",
              "url": "https://api.github.com/orgs/Bitergia",
              "repos_url": "https://api.github.com/orgs/Bitergia/repos",
              "events_url": "https://api.github.com/orgs/Bitergia/events",
              "hooks_url": "https://api.github.com/orgs/Bitergia/hooks",
              "issues_url": "https://api.github.com/orgs/Bitergia/issues",
              "members_url": "https://api.github.com/orgs/Bitergia/members{/member}",
              "public_members_url": "https://api.github.com/orgs/Bitergia/public_members{/member}",
              "avatar_url": "https://avatars3.githubusercontent.com/u/1918070?v=4",
              "description": null
            },
            {
              "login": "grimoirelab",
              "id": 16151805,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1",
              "url": "https://api.github.com/orgs/grimoirelab",
              "repos_url": "https://api.github.com/orgs/grimoirelab/repos",
              "events_url": "https://api.github.com/orgs/grimoirelab/events",
              "hooks_url": "https://api.github.com/orgs/grimoirelab/hooks",
              "issues_url": "https://api.github.com/orgs/grimoirelab/issues",
              "members_url": "https://api.github.com/orgs/grimoirelab/members{/member}",
              "public_members_url": "https://api.github.com/orgs/grimoirelab/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/16151805?v=4",
              "description": ""
            },
            {
              "login": "chaoss",
              "id": 29740296,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
              "url": "https://api.github.com/orgs/chaoss",
              "repos_url": "https://api.github.com/orgs/chaoss/repos",
              "events_url": "https://api.github.com/orgs/chaoss/events",
              "hooks_url": "https://api.github.com/orgs/chaoss/hooks",
              "issues_url": "https://api.github.com/orgs/chaoss/issues",
              "members_url": "https://api.github.com/orgs/chaoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/chaoss/public_members{/member}",
              "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
              "description": ""
            }
          ]
        },
        "reactions_data": []
      },
      {
        "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388213822",
        "pull_request_review_id": 369439055,
        "id": 388213822,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIxMzgyMg==",
        "diff_hunk": "@@ -0,0 +1,528 @@\n+# -*- coding: utf-8 -*-\n+#\n+# Copyright (C) 2015-2019 Bitergia\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program. If not, see <http://www.gnu.org/licenses/>.\n+#\n+# Authors:\n+#     Valerio Cosentino <valcos@bitergia.com>\n+#\n+\n+import json\n+import logging\n+import datetime\n+import requests\n+from grimoirelab_toolkit.datetime import (datetime_to_utc,\n+                                          datetime_utcnow,\n+                                          str_to_datetime)\n+from grimoirelab_toolkit.uris import urijoin\n+\n+from ...backend import (Backend,\n+                        BackendCommand,\n+                        BackendCommandArgumentParser,\n+                        DEFAULT_SEARCH_FIELD)\n+from ...client import HttpClient, RateLimitHandler\n+from ...utils import DEFAULT_DATETIME, DEFAULT_LAST_DATETIME\n+from datetime import datetime\n+\n+CATEGORY_ISSUE = \"issue\"\n+\n+PAGURE_URL = \"https://pagure.io/\"\n+PAGURE_API_URL = \"https://pagure.io/api/0\"\n+\n+# Range before sleeping until rate limit reset\n+MIN_RATE_LIMIT = 10\n+MAX_RATE_LIMIT = 500\n+\n+MAX_CATEGORY_ITEMS_PER_PAGE = 100\n+PER_PAGE = 100\n+\n+# Default sleep time and retries to deal with connection/server problems\n+DEFAULT_SLEEP_TIME = 1\n+MAX_RETRIES = 5\n+\n+TARGET_ISSUE_FIELDS = ['user', 'assignee']\n+\n+logger = logging.getLogger(__name__)\n+\n+\n+class Pagure(Backend):\n+    \"\"\"Pagure backend for Perceval.\n+\n+    This class allows the fetch the issues stored in Pagure\n+    repository. Note that api token is needed to perform\n+    certain API calls\n+\n+    :param namespace: Pagure namespace\n+    :param repository: Pagure repository; in case the repository is within a namespace\n+    :param api_token: Pagure API token to access the API\n+    :param base_url: when no value is set the backend will be fetch\n+     the data from the Pagure public site.\n+    :param tag: label used to mark the data\n+    :param archive: archive to store/retrieve items\n+    :param sleep_for_rate: sleep until rate limit is reset\n+    :param min_rate_to_sleep: minimum rate needed to sleep until\n+         it will be reset\n+    :param max_retries: number of max retries to a data source\n+        before raising a RetryError exception\n+    :param max_items: max number of category items (e.g., issues,\n+        pull requests) per query\n+    :param sleep_time: time to sleep in case\n+        of connection problems\n+    \"\"\"\n+    version = '0.29'\n+\n+    CATEGORIES = [CATEGORY_ISSUE]\n+    CLASSIFIED_FIELDS = [\n+        ['user_data'],\n+        ['assignee_data']\n+    ]\n+\n+    def __init__(self, namespace=None, repository=None,\n+                 api_token=None, base_url=None,\n+                 tag=None, archive=None,\n+                 sleep_for_rate=False, min_rate_to_sleep=MIN_RATE_LIMIT,\n+                 max_retries=MAX_RETRIES, sleep_time=DEFAULT_SLEEP_TIME,\n+                 max_items=MAX_CATEGORY_ITEMS_PER_PAGE):\n+        if api_token is None:\n+            api_token = []\n+        origin = base_url if base_url else PAGURE_URL\n+        origin = urijoin(origin, namespace, repository)\n+\n+        super().__init__(origin, tag=tag, archive=archive)\n+\n+        self.namespace = namespace\n+        self.repository = repository\n+        self.api_token = api_token\n+        self.base_url = base_url\n+\n+        self.sleep_for_rate = sleep_for_rate\n+        self.min_rate_to_sleep = min_rate_to_sleep\n+        self.max_retries = max_retries\n+        self.sleep_time = sleep_time\n+        self.max_items = max_items\n+\n+        self.client = None\n+        self.exclude_user_data = False\n+        self._users = {}  # internal users cache\n+\n+    def search_fields(self, item):\n+        \"\"\"Add search fields to an item.\n+\n+        It adds the values of `metadata_id` plus the `namespace` and `repo`.\n+\n+        :param item: the item to extract the search fields values\n+\n+        :returns: a dict of search fields\n+        \"\"\"\n+        search_fields = {\n+            DEFAULT_SEARCH_FIELD: self.metadata_id(item),\n+            'namespace': self.namespace,\n+            'repo': self.repository\n+        }\n+\n+        return search_fields\n+\n+    def fetch(self, category=CATEGORY_ISSUE, from_date=DEFAULT_DATETIME, to_date=DEFAULT_LAST_DATETIME,\n+              filter_classified=False):\n+        \"\"\"Fetch the issues from the repository.\n+\n+        The method retrieves, from a Pagure repository, the issues\n+        updated since the given date.\n+\n+        :param category: the category of items to fetch\n+        :param from_date: obtain issues updated since this date\n+        :param to_date: obtain issues until a until a specific date (included)\n+        :param filter_classified: remove classified fields from the resulting items\n+\n+        :returns: a generator of issues\n+        \"\"\"\n+        self.exclude_user_data = filter_classified\n+\n+        if self.exclude_user_data:\n+            logger.info(\"Excluding user data. Personal user information won't be collected from the API.\")\n+\n+        if not from_date:\n+            from_date = DEFAULT_DATETIME\n+\n+        if not to_date:\n+            to_date = DEFAULT_LAST_DATETIME\n+\n+        from_date = from_date.strftime('%Y-%m-%d')\n+        to_date = to_date.strftime('%Y-%m-%d')\n+        kwargs = {\n+            'from_date': from_date,\n+            'to_date': to_date\n+        }\n+        items = super().fetch(category,\n+                              filter_classified=filter_classified,\n+                              **kwargs)\n+\n+        return items\n+\n+    def fetch_items(self, category, **kwargs):\n+        \"\"\"Fetch the items (issues)\n+\n+        :param category: the category of items to fetch\n+        :param kwargs: backend arguments\n+\n+        :returns: a generator of items\n+        \"\"\"\n+        from_date = kwargs['from_date']\n+        to_date = kwargs['to_date']\n+        items = self.__fetch_issues(from_date, to_date)\n+        return items\n+\n+    @classmethod\n+    def has_archiving(cls):\n+        \"\"\"Returns whether it supports archiving items on the fetch process.\n+\n+        :returns: this backend supports items archive\n+        \"\"\"\n+        return True\n+\n+    @classmethod\n+    def has_resuming(cls):\n+        \"\"\"Returns whether it supports to resume the fetch process.\n+\n+        :returns: this backend supports items resuming\n+        \"\"\"\n+        return True\n+\n+    @staticmethod\n+    def metadata_id(item):\n+        \"\"\"Extracts the identifier from a Pagure item.\"\"\"\n+\n+        return str(item['id'])\n+\n+    @staticmethod\n+    def metadata_updated_on(item):\n+        \"\"\"Extracts the update time from a Pagure item.\n+\n+        The timestamp used is extracted from 'last_updated' field.\n+        This date is converted to UNIX timestamp format. As Pagure\n+        dates are in timestamp format the conversion is straightforward.\n+\n+        :param item: item generated by the backend\n+\n+        :returns: a UNIX timestamp\n+        \"\"\"\n+        if \"forks_count\" in item:\n+            return item['fetched_on']\n+        else:\n+            ts = int(item['last_updated'])\n+            ts = datetime.fromtimestamp(ts).timestamp()\n+\n+            return ts\n+\n+    @staticmethod\n+    def metadata_category(item):\n+        \"\"\"Extracts the category from a Pagure item.\n+\n+        This backend generates one type of item which is\n+        'issue'.\n+        \"\"\"\n+\n+        category = CATEGORY_ISSUE\n+\n+        return category\n+\n+    def _init_client(self, from_archive=False):\n+        \"\"\"Init client\"\"\"\n+\n+        return PagureClient(self.namespace, self.repository, self.api_token, self.base_url,\n+                            self.sleep_for_rate, self.min_rate_to_sleep,\n+                            self.sleep_time, self.max_retries, self.max_items,\n+                            self.archive, from_archive)\n+\n+    def __fetch_issues(self, from_date, to_date):\n+        \"\"\"Fetch the issues\n+        :param from_date: starting date from which issues are fetched\n+        :param to_date: ending date till which issues are fetched\n+\n+        :returns: an issue object\n+        \"\"\"\n+\n+        issues_groups = self.client.issues(from_date=from_date)\n+\n+        for raw_issues in issues_groups:\n+            issues = json.loads(raw_issues)\n+            issues = issues['issues']\n+            for issue in issues:\n+\n+                if int(issue['last_updated']) > str_to_datetime(to_date).timestamp():\n+                    return\n+\n+                self.__init_extra_issue_fields(issue)\n+                for field in TARGET_ISSUE_FIELDS:\n+\n+                    if not issue[field]:\n+                        continue\n+\n+                    if field == 'user':\n+                        issue[field + '_data'] = self.__get_user(issue[field]['name'])\n+                    elif field == 'assignee':\n+                        issue[field + '_data'] = self.__get_issue_assignee(issue[field])\n+\n+                yield issue\n+\n+    def __get_issue_assignee(self, raw_assignee):\n+        \"\"\"Get issue assignee\"\"\"\n+        if not raw_assignee:\n+            return None\n+        assignee = self.__get_user(raw_assignee['name'])\n+\n+        return assignee\n+\n+    def __get_user(self, login):\n+        \"\"\"Get user data for the login\"\"\"\n+\n+        if not login or self.exclude_user_data:\n+            return None\n+\n+        user_raw = self.client.user(login)\n+        user = json.loads(user_raw)\n+\n+        return user\n+\n+    def __init_extra_issue_fields(self, issue):\n+        \"\"\"Add fields to an issue\"\"\"\n+\n+        issue['user_data'] = {}\n+        issue['assignee_data'] = {}\n+\n+\n+class PagureClient(HttpClient, RateLimitHandler):\n+    \"\"\"Client for retieving information from Pagure API\n+\n+    :param namespace: Pagure namespace\n+    :param repository: Pagure repository; incase the repository is within a namespace\n+    :param tokens: Pagure API token to access the API\n+    :param base_url: When no value is set the backend will be fetch the data\n+        from the Pagure public site.\n+    :param sleep_for_rate: sleep until rate limit is reset\n+    :param min_rate_to_sleep: minimun rate needed to sleep until\n+         it will be reset\n+    :param sleep_time: time to sleep in case\n+        of connection problems\n+    :param max_retries: number of max retries to a data source\n+        before raising a RetryError exception\n+    :param max_items: max number of category items (e.g., issues,\n+        pull requests) per query\n+    :param archive: collect issues already retrieved from an archive\n+    :param from_archive: it tells whether to write/read the archive\n+    \"\"\"\n+    EXTRA_STATUS_FORCELIST = [403, 500, 502, 503]\n+\n+    _users = {}  # users cache\n+\n+    def __init__(self, namespace, repository, tokens,\n+                 base_url=None, sleep_for_rate=False, min_rate_to_sleep=MIN_RATE_LIMIT,\n+                 sleep_time=DEFAULT_SLEEP_TIME, max_retries=MAX_RETRIES,\n+                 max_items=MAX_CATEGORY_ITEMS_PER_PAGE, archive=None, from_archive=False):\n+        self.namespace = namespace\n+        self.repository = repository\n+        self.tokens = tokens\n+        self.n_tokens = len(self.tokens)\n+        self.current_token = None",
        "path": "perceval/backends/core/pagure.py",
        "position": null,
        "original_position": 338,
        "commit_id": "70a89aa1dccc5152ed4a52cb4c5e4e327ba3595a",
        "original_commit_id": "4ffb87bbb10fd5eaf6125f39c09c04e803a1c8c7",
        "user": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "this can be removed",
        "created_at": "2020-03-05T10:45:23Z",
        "updated_at": "2020-03-08T18:21:42Z",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r388213822",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621",
        "author_association": "MEMBER",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388213822"
          },
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r388213822"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388213822/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "user_data": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false,
          "name": "valerio",
          "company": "@Bitergia ",
          "blog": "http://valeriocos.github.io/",
          "location": "Madrid, Spain",
          "email": "valcos@bitergia.com",
          "hireable": true,
          "bio": null,
          "public_repos": 57,
          "public_gists": 28,
          "followers": 34,
          "following": 5,
          "created_at": "2014-01-27T14:30:30Z",
          "updated_at": "2020-03-17T10:02:44Z",
          "organizations": [
            {
              "login": "Bitergia",
              "id": 1918070,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=",
              "url": "https://api.github.com/orgs/Bitergia",
              "repos_url": "https://api.github.com/orgs/Bitergia/repos",
              "events_url": "https://api.github.com/orgs/Bitergia/events",
              "hooks_url": "https://api.github.com/orgs/Bitergia/hooks",
              "issues_url": "https://api.github.com/orgs/Bitergia/issues",
              "members_url": "https://api.github.com/orgs/Bitergia/members{/member}",
              "public_members_url": "https://api.github.com/orgs/Bitergia/public_members{/member}",
              "avatar_url": "https://avatars3.githubusercontent.com/u/1918070?v=4",
              "description": null
            },
            {
              "login": "grimoirelab",
              "id": 16151805,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1",
              "url": "https://api.github.com/orgs/grimoirelab",
              "repos_url": "https://api.github.com/orgs/grimoirelab/repos",
              "events_url": "https://api.github.com/orgs/grimoirelab/events",
              "hooks_url": "https://api.github.com/orgs/grimoirelab/hooks",
              "issues_url": "https://api.github.com/orgs/grimoirelab/issues",
              "members_url": "https://api.github.com/orgs/grimoirelab/members{/member}",
              "public_members_url": "https://api.github.com/orgs/grimoirelab/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/16151805?v=4",
              "description": ""
            },
            {
              "login": "chaoss",
              "id": 29740296,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
              "url": "https://api.github.com/orgs/chaoss",
              "repos_url": "https://api.github.com/orgs/chaoss/repos",
              "events_url": "https://api.github.com/orgs/chaoss/events",
              "hooks_url": "https://api.github.com/orgs/chaoss/hooks",
              "issues_url": "https://api.github.com/orgs/chaoss/issues",
              "members_url": "https://api.github.com/orgs/chaoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/chaoss/public_members{/member}",
              "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
              "description": ""
            }
          ]
        },
        "reactions_data": []
      },
      {
        "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388214821",
        "pull_request_review_id": 369439055,
        "id": 388214821,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIxNDgyMQ==",
        "diff_hunk": "@@ -0,0 +1,528 @@\n+# -*- coding: utf-8 -*-\n+#\n+# Copyright (C) 2015-2019 Bitergia\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program. If not, see <http://www.gnu.org/licenses/>.\n+#\n+# Authors:\n+#     Valerio Cosentino <valcos@bitergia.com>\n+#\n+\n+import json\n+import logging\n+import datetime\n+import requests\n+from grimoirelab_toolkit.datetime import (datetime_to_utc,\n+                                          datetime_utcnow,\n+                                          str_to_datetime)\n+from grimoirelab_toolkit.uris import urijoin\n+\n+from ...backend import (Backend,\n+                        BackendCommand,\n+                        BackendCommandArgumentParser,\n+                        DEFAULT_SEARCH_FIELD)\n+from ...client import HttpClient, RateLimitHandler\n+from ...utils import DEFAULT_DATETIME, DEFAULT_LAST_DATETIME\n+from datetime import datetime\n+\n+CATEGORY_ISSUE = \"issue\"\n+\n+PAGURE_URL = \"https://pagure.io/\"\n+PAGURE_API_URL = \"https://pagure.io/api/0\"\n+\n+# Range before sleeping until rate limit reset\n+MIN_RATE_LIMIT = 10\n+MAX_RATE_LIMIT = 500\n+\n+MAX_CATEGORY_ITEMS_PER_PAGE = 100\n+PER_PAGE = 100\n+\n+# Default sleep time and retries to deal with connection/server problems\n+DEFAULT_SLEEP_TIME = 1\n+MAX_RETRIES = 5\n+\n+TARGET_ISSUE_FIELDS = ['user', 'assignee']\n+\n+logger = logging.getLogger(__name__)\n+\n+\n+class Pagure(Backend):\n+    \"\"\"Pagure backend for Perceval.\n+\n+    This class allows the fetch the issues stored in Pagure\n+    repository. Note that api token is needed to perform\n+    certain API calls\n+\n+    :param namespace: Pagure namespace\n+    :param repository: Pagure repository; in case the repository is within a namespace\n+    :param api_token: Pagure API token to access the API\n+    :param base_url: when no value is set the backend will be fetch",
        "path": "perceval/backends/core/pagure.py",
        "position": null,
        "original_position": 70,
        "commit_id": "70a89aa1dccc5152ed4a52cb4c5e4e327ba3595a",
        "original_commit_id": "4ffb87bbb10fd5eaf6125f39c09c04e803a1c8c7",
        "user": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "I'm not sure the base_url is needed. Does Pagure offer the possibility to deploy a pagure instance?",
        "created_at": "2020-03-05T10:47:16Z",
        "updated_at": "2020-03-08T18:21:42Z",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r388214821",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621",
        "author_association": "MEMBER",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388214821"
          },
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r388214821"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388214821/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "user_data": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false,
          "name": "valerio",
          "company": "@Bitergia ",
          "blog": "http://valeriocos.github.io/",
          "location": "Madrid, Spain",
          "email": "valcos@bitergia.com",
          "hireable": true,
          "bio": null,
          "public_repos": 57,
          "public_gists": 28,
          "followers": 34,
          "following": 5,
          "created_at": "2014-01-27T14:30:30Z",
          "updated_at": "2020-03-17T10:02:44Z",
          "organizations": [
            {
              "login": "Bitergia",
              "id": 1918070,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=",
              "url": "https://api.github.com/orgs/Bitergia",
              "repos_url": "https://api.github.com/orgs/Bitergia/repos",
              "events_url": "https://api.github.com/orgs/Bitergia/events",
              "hooks_url": "https://api.github.com/orgs/Bitergia/hooks",
              "issues_url": "https://api.github.com/orgs/Bitergia/issues",
              "members_url": "https://api.github.com/orgs/Bitergia/members{/member}",
              "public_members_url": "https://api.github.com/orgs/Bitergia/public_members{/member}",
              "avatar_url": "https://avatars3.githubusercontent.com/u/1918070?v=4",
              "description": null
            },
            {
              "login": "grimoirelab",
              "id": 16151805,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1",
              "url": "https://api.github.com/orgs/grimoirelab",
              "repos_url": "https://api.github.com/orgs/grimoirelab/repos",
              "events_url": "https://api.github.com/orgs/grimoirelab/events",
              "hooks_url": "https://api.github.com/orgs/grimoirelab/hooks",
              "issues_url": "https://api.github.com/orgs/grimoirelab/issues",
              "members_url": "https://api.github.com/orgs/grimoirelab/members{/member}",
              "public_members_url": "https://api.github.com/orgs/grimoirelab/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/16151805?v=4",
              "description": ""
            },
            {
              "login": "chaoss",
              "id": 29740296,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
              "url": "https://api.github.com/orgs/chaoss",
              "repos_url": "https://api.github.com/orgs/chaoss/repos",
              "events_url": "https://api.github.com/orgs/chaoss/events",
              "hooks_url": "https://api.github.com/orgs/chaoss/hooks",
              "issues_url": "https://api.github.com/orgs/chaoss/issues",
              "members_url": "https://api.github.com/orgs/chaoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/chaoss/public_members{/member}",
              "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
              "description": ""
            }
          ]
        },
        "reactions_data": []
      },
      {
        "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388215268",
        "pull_request_review_id": 369439055,
        "id": 388215268,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIxNTI2OA==",
        "diff_hunk": "@@ -0,0 +1,528 @@\n+# -*- coding: utf-8 -*-\n+#\n+# Copyright (C) 2015-2019 Bitergia\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program. If not, see <http://www.gnu.org/licenses/>.\n+#\n+# Authors:\n+#     Valerio Cosentino <valcos@bitergia.com>\n+#\n+\n+import json\n+import logging\n+import datetime\n+import requests\n+from grimoirelab_toolkit.datetime import (datetime_to_utc,\n+                                          datetime_utcnow,\n+                                          str_to_datetime)\n+from grimoirelab_toolkit.uris import urijoin\n+\n+from ...backend import (Backend,\n+                        BackendCommand,\n+                        BackendCommandArgumentParser,\n+                        DEFAULT_SEARCH_FIELD)\n+from ...client import HttpClient, RateLimitHandler\n+from ...utils import DEFAULT_DATETIME, DEFAULT_LAST_DATETIME\n+from datetime import datetime\n+\n+CATEGORY_ISSUE = \"issue\"\n+\n+PAGURE_URL = \"https://pagure.io/\"\n+PAGURE_API_URL = \"https://pagure.io/api/0\"\n+\n+# Range before sleeping until rate limit reset\n+MIN_RATE_LIMIT = 10\n+MAX_RATE_LIMIT = 500\n+\n+MAX_CATEGORY_ITEMS_PER_PAGE = 100\n+PER_PAGE = 100\n+\n+# Default sleep time and retries to deal with connection/server problems\n+DEFAULT_SLEEP_TIME = 1\n+MAX_RETRIES = 5\n+\n+TARGET_ISSUE_FIELDS = ['user', 'assignee']\n+\n+logger = logging.getLogger(__name__)\n+\n+\n+class Pagure(Backend):\n+    \"\"\"Pagure backend for Perceval.\n+\n+    This class allows the fetch the issues stored in Pagure\n+    repository. Note that api token is needed to perform\n+    certain API calls\n+\n+    :param namespace: Pagure namespace\n+    :param repository: Pagure repository; in case the repository is within a namespace\n+    :param api_token: Pagure API token to access the API\n+    :param base_url: when no value is set the backend will be fetch\n+     the data from the Pagure public site.\n+    :param tag: label used to mark the data\n+    :param archive: archive to store/retrieve items\n+    :param sleep_for_rate: sleep until rate limit is reset\n+    :param min_rate_to_sleep: minimum rate needed to sleep until\n+         it will be reset\n+    :param max_retries: number of max retries to a data source\n+        before raising a RetryError exception\n+    :param max_items: max number of category items (e.g., issues,\n+        pull requests) per query\n+    :param sleep_time: time to sleep in case\n+        of connection problems\n+    \"\"\"\n+    version = '0.29'\n+\n+    CATEGORIES = [CATEGORY_ISSUE]\n+    CLASSIFIED_FIELDS = [\n+        ['user_data'],\n+        ['assignee_data']\n+    ]\n+\n+    def __init__(self, namespace=None, repository=None,\n+                 api_token=None, base_url=None,\n+                 tag=None, archive=None,\n+                 sleep_for_rate=False, min_rate_to_sleep=MIN_RATE_LIMIT,\n+                 max_retries=MAX_RETRIES, sleep_time=DEFAULT_SLEEP_TIME,\n+                 max_items=MAX_CATEGORY_ITEMS_PER_PAGE):\n+        if api_token is None:\n+            api_token = []\n+        origin = base_url if base_url else PAGURE_URL\n+        origin = urijoin(origin, namespace, repository)\n+\n+        super().__init__(origin, tag=tag, archive=archive)\n+\n+        self.namespace = namespace\n+        self.repository = repository\n+        self.api_token = api_token\n+        self.base_url = base_url\n+\n+        self.sleep_for_rate = sleep_for_rate\n+        self.min_rate_to_sleep = min_rate_to_sleep\n+        self.max_retries = max_retries\n+        self.sleep_time = sleep_time\n+        self.max_items = max_items\n+\n+        self.client = None\n+        self.exclude_user_data = False\n+        self._users = {}  # internal users cache\n+\n+    def search_fields(self, item):\n+        \"\"\"Add search fields to an item.\n+\n+        It adds the values of `metadata_id` plus the `namespace` and `repo`.\n+\n+        :param item: the item to extract the search fields values\n+\n+        :returns: a dict of search fields\n+        \"\"\"\n+        search_fields = {\n+            DEFAULT_SEARCH_FIELD: self.metadata_id(item),\n+            'namespace': self.namespace,\n+            'repo': self.repository\n+        }\n+\n+        return search_fields\n+\n+    def fetch(self, category=CATEGORY_ISSUE, from_date=DEFAULT_DATETIME, to_date=DEFAULT_LAST_DATETIME,\n+              filter_classified=False):\n+        \"\"\"Fetch the issues from the repository.\n+\n+        The method retrieves, from a Pagure repository, the issues\n+        updated since the given date.\n+\n+        :param category: the category of items to fetch\n+        :param from_date: obtain issues updated since this date\n+        :param to_date: obtain issues until a until a specific date (included)\n+        :param filter_classified: remove classified fields from the resulting items\n+\n+        :returns: a generator of issues\n+        \"\"\"\n+        self.exclude_user_data = filter_classified\n+\n+        if self.exclude_user_data:\n+            logger.info(\"Excluding user data. Personal user information won't be collected from the API.\")\n+\n+        if not from_date:\n+            from_date = DEFAULT_DATETIME\n+\n+        if not to_date:\n+            to_date = DEFAULT_LAST_DATETIME\n+\n+        from_date = from_date.strftime('%Y-%m-%d')\n+        to_date = to_date.strftime('%Y-%m-%d')\n+        kwargs = {\n+            'from_date': from_date,\n+            'to_date': to_date\n+        }\n+        items = super().fetch(category,\n+                              filter_classified=filter_classified,\n+                              **kwargs)\n+\n+        return items\n+\n+    def fetch_items(self, category, **kwargs):\n+        \"\"\"Fetch the items (issues)\n+\n+        :param category: the category of items to fetch\n+        :param kwargs: backend arguments\n+\n+        :returns: a generator of items\n+        \"\"\"\n+        from_date = kwargs['from_date']\n+        to_date = kwargs['to_date']\n+        items = self.__fetch_issues(from_date, to_date)\n+        return items\n+\n+    @classmethod\n+    def has_archiving(cls):\n+        \"\"\"Returns whether it supports archiving items on the fetch process.\n+\n+        :returns: this backend supports items archive\n+        \"\"\"\n+        return True\n+\n+    @classmethod\n+    def has_resuming(cls):\n+        \"\"\"Returns whether it supports to resume the fetch process.\n+\n+        :returns: this backend supports items resuming\n+        \"\"\"\n+        return True\n+\n+    @staticmethod\n+    def metadata_id(item):\n+        \"\"\"Extracts the identifier from a Pagure item.\"\"\"\n+\n+        return str(item['id'])\n+\n+    @staticmethod\n+    def metadata_updated_on(item):\n+        \"\"\"Extracts the update time from a Pagure item.\n+\n+        The timestamp used is extracted from 'last_updated' field.\n+        This date is converted to UNIX timestamp format. As Pagure\n+        dates are in timestamp format the conversion is straightforward.\n+\n+        :param item: item generated by the backend\n+\n+        :returns: a UNIX timestamp\n+        \"\"\"\n+        if \"forks_count\" in item:\n+            return item['fetched_on']\n+        else:\n+            ts = int(item['last_updated'])\n+            ts = datetime.fromtimestamp(ts).timestamp()\n+\n+            return ts\n+\n+    @staticmethod\n+    def metadata_category(item):\n+        \"\"\"Extracts the category from a Pagure item.\n+\n+        This backend generates one type of item which is\n+        'issue'.\n+        \"\"\"\n+\n+        category = CATEGORY_ISSUE\n+\n+        return category\n+\n+    def _init_client(self, from_archive=False):\n+        \"\"\"Init client\"\"\"\n+\n+        return PagureClient(self.namespace, self.repository, self.api_token, self.base_url,\n+                            self.sleep_for_rate, self.min_rate_to_sleep,\n+                            self.sleep_time, self.max_retries, self.max_items,\n+                            self.archive, from_archive)\n+\n+    def __fetch_issues(self, from_date, to_date):\n+        \"\"\"Fetch the issues\n+        :param from_date: starting date from which issues are fetched\n+        :param to_date: ending date till which issues are fetched\n+\n+        :returns: an issue object\n+        \"\"\"\n+\n+        issues_groups = self.client.issues(from_date=from_date)\n+\n+        for raw_issues in issues_groups:\n+            issues = json.loads(raw_issues)\n+            issues = issues['issues']\n+            for issue in issues:\n+\n+                if int(issue['last_updated']) > str_to_datetime(to_date).timestamp():\n+                    return\n+\n+                self.__init_extra_issue_fields(issue)\n+                for field in TARGET_ISSUE_FIELDS:\n+\n+                    if not issue[field]:\n+                        continue\n+\n+                    if field == 'user':\n+                        issue[field + '_data'] = self.__get_user(issue[field]['name'])\n+                    elif field == 'assignee':\n+                        issue[field + '_data'] = self.__get_issue_assignee(issue[field])\n+\n+                yield issue\n+\n+    def __get_issue_assignee(self, raw_assignee):\n+        \"\"\"Get issue assignee\"\"\"\n+        if not raw_assignee:\n+            return None\n+        assignee = self.__get_user(raw_assignee['name'])\n+\n+        return assignee\n+\n+    def __get_user(self, login):\n+        \"\"\"Get user data for the login\"\"\"\n+\n+        if not login or self.exclude_user_data:\n+            return None\n+\n+        user_raw = self.client.user(login)\n+        user = json.loads(user_raw)\n+\n+        return user\n+\n+    def __init_extra_issue_fields(self, issue):\n+        \"\"\"Add fields to an issue\"\"\"\n+\n+        issue['user_data'] = {}\n+        issue['assignee_data'] = {}\n+\n+\n+class PagureClient(HttpClient, RateLimitHandler):\n+    \"\"\"Client for retieving information from Pagure API\n+\n+    :param namespace: Pagure namespace\n+    :param repository: Pagure repository; incase the repository is within a namespace\n+    :param tokens: Pagure API token to access the API\n+    :param base_url: When no value is set the backend will be fetch the data\n+        from the Pagure public site.\n+    :param sleep_for_rate: sleep until rate limit is reset\n+    :param min_rate_to_sleep: minimun rate needed to sleep until\n+         it will be reset\n+    :param sleep_time: time to sleep in case\n+        of connection problems\n+    :param max_retries: number of max retries to a data source\n+        before raising a RetryError exception\n+    :param max_items: max number of category items (e.g., issues,\n+        pull requests) per query\n+    :param archive: collect issues already retrieved from an archive\n+    :param from_archive: it tells whether to write/read the archive\n+    \"\"\"\n+    EXTRA_STATUS_FORCELIST = [403, 500, 502, 503]\n+\n+    _users = {}  # users cache\n+\n+    def __init__(self, namespace, repository, tokens,\n+                 base_url=None, sleep_for_rate=False, min_rate_to_sleep=MIN_RATE_LIMIT,",
        "path": "perceval/backends/core/pagure.py",
        "position": null,
        "original_position": 331,
        "commit_id": "70a89aa1dccc5152ed4a52cb4c5e4e327ba3595a",
        "original_commit_id": "4ffb87bbb10fd5eaf6125f39c09c04e803a1c8c7",
        "user": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "base_url can be removed if there is no way of deploying an instance of pagure",
        "created_at": "2020-03-05T10:48:08Z",
        "updated_at": "2020-03-08T18:21:42Z",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r388215268",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621",
        "author_association": "MEMBER",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388215268"
          },
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r388215268"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388215268/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "user_data": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false,
          "name": "valerio",
          "company": "@Bitergia ",
          "blog": "http://valeriocos.github.io/",
          "location": "Madrid, Spain",
          "email": "valcos@bitergia.com",
          "hireable": true,
          "bio": null,
          "public_repos": 57,
          "public_gists": 28,
          "followers": 34,
          "following": 5,
          "created_at": "2014-01-27T14:30:30Z",
          "updated_at": "2020-03-17T10:02:44Z",
          "organizations": [
            {
              "login": "Bitergia",
              "id": 1918070,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=",
              "url": "https://api.github.com/orgs/Bitergia",
              "repos_url": "https://api.github.com/orgs/Bitergia/repos",
              "events_url": "https://api.github.com/orgs/Bitergia/events",
              "hooks_url": "https://api.github.com/orgs/Bitergia/hooks",
              "issues_url": "https://api.github.com/orgs/Bitergia/issues",
              "members_url": "https://api.github.com/orgs/Bitergia/members{/member}",
              "public_members_url": "https://api.github.com/orgs/Bitergia/public_members{/member}",
              "avatar_url": "https://avatars3.githubusercontent.com/u/1918070?v=4",
              "description": null
            },
            {
              "login": "grimoirelab",
              "id": 16151805,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1",
              "url": "https://api.github.com/orgs/grimoirelab",
              "repos_url": "https://api.github.com/orgs/grimoirelab/repos",
              "events_url": "https://api.github.com/orgs/grimoirelab/events",
              "hooks_url": "https://api.github.com/orgs/grimoirelab/hooks",
              "issues_url": "https://api.github.com/orgs/grimoirelab/issues",
              "members_url": "https://api.github.com/orgs/grimoirelab/members{/member}",
              "public_members_url": "https://api.github.com/orgs/grimoirelab/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/16151805?v=4",
              "description": ""
            },
            {
              "login": "chaoss",
              "id": 29740296,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
              "url": "https://api.github.com/orgs/chaoss",
              "repos_url": "https://api.github.com/orgs/chaoss/repos",
              "events_url": "https://api.github.com/orgs/chaoss/events",
              "hooks_url": "https://api.github.com/orgs/chaoss/hooks",
              "issues_url": "https://api.github.com/orgs/chaoss/issues",
              "members_url": "https://api.github.com/orgs/chaoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/chaoss/public_members{/member}",
              "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
              "description": ""
            }
          ]
        },
        "reactions_data": []
      },
      {
        "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388216245",
        "pull_request_review_id": 369439055,
        "id": 388216245,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIxNjI0NQ==",
        "diff_hunk": "@@ -0,0 +1,528 @@\n+# -*- coding: utf-8 -*-\n+#\n+# Copyright (C) 2015-2019 Bitergia\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program. If not, see <http://www.gnu.org/licenses/>.\n+#\n+# Authors:\n+#     Valerio Cosentino <valcos@bitergia.com>\n+#\n+\n+import json\n+import logging\n+import datetime\n+import requests\n+from grimoirelab_toolkit.datetime import (datetime_to_utc,\n+                                          datetime_utcnow,\n+                                          str_to_datetime)\n+from grimoirelab_toolkit.uris import urijoin\n+\n+from ...backend import (Backend,\n+                        BackendCommand,\n+                        BackendCommandArgumentParser,\n+                        DEFAULT_SEARCH_FIELD)\n+from ...client import HttpClient, RateLimitHandler\n+from ...utils import DEFAULT_DATETIME, DEFAULT_LAST_DATETIME\n+from datetime import datetime\n+\n+CATEGORY_ISSUE = \"issue\"\n+\n+PAGURE_URL = \"https://pagure.io/\"\n+PAGURE_API_URL = \"https://pagure.io/api/0\"\n+\n+# Range before sleeping until rate limit reset\n+MIN_RATE_LIMIT = 10\n+MAX_RATE_LIMIT = 500\n+\n+MAX_CATEGORY_ITEMS_PER_PAGE = 100\n+PER_PAGE = 100\n+\n+# Default sleep time and retries to deal with connection/server problems\n+DEFAULT_SLEEP_TIME = 1\n+MAX_RETRIES = 5\n+\n+TARGET_ISSUE_FIELDS = ['user', 'assignee']\n+\n+logger = logging.getLogger(__name__)\n+\n+\n+class Pagure(Backend):\n+    \"\"\"Pagure backend for Perceval.\n+\n+    This class allows the fetch the issues stored in Pagure\n+    repository. Note that api token is needed to perform\n+    certain API calls\n+\n+    :param namespace: Pagure namespace\n+    :param repository: Pagure repository; in case the repository is within a namespace\n+    :param api_token: Pagure API token to access the API\n+    :param base_url: when no value is set the backend will be fetch\n+     the data from the Pagure public site.\n+    :param tag: label used to mark the data\n+    :param archive: archive to store/retrieve items\n+    :param sleep_for_rate: sleep until rate limit is reset\n+    :param min_rate_to_sleep: minimum rate needed to sleep until\n+         it will be reset\n+    :param max_retries: number of max retries to a data source\n+        before raising a RetryError exception\n+    :param max_items: max number of category items (e.g., issues,\n+        pull requests) per query\n+    :param sleep_time: time to sleep in case\n+        of connection problems\n+    \"\"\"\n+    version = '0.29'\n+\n+    CATEGORIES = [CATEGORY_ISSUE]\n+    CLASSIFIED_FIELDS = [\n+        ['user_data'],\n+        ['assignee_data']\n+    ]\n+\n+    def __init__(self, namespace=None, repository=None,\n+                 api_token=None, base_url=None,\n+                 tag=None, archive=None,\n+                 sleep_for_rate=False, min_rate_to_sleep=MIN_RATE_LIMIT,\n+                 max_retries=MAX_RETRIES, sleep_time=DEFAULT_SLEEP_TIME,\n+                 max_items=MAX_CATEGORY_ITEMS_PER_PAGE):\n+        if api_token is None:\n+            api_token = []\n+        origin = base_url if base_url else PAGURE_URL\n+        origin = urijoin(origin, namespace, repository)\n+\n+        super().__init__(origin, tag=tag, archive=archive)\n+\n+        self.namespace = namespace\n+        self.repository = repository\n+        self.api_token = api_token\n+        self.base_url = base_url\n+\n+        self.sleep_for_rate = sleep_for_rate\n+        self.min_rate_to_sleep = min_rate_to_sleep\n+        self.max_retries = max_retries\n+        self.sleep_time = sleep_time\n+        self.max_items = max_items\n+\n+        self.client = None\n+        self.exclude_user_data = False\n+        self._users = {}  # internal users cache\n+\n+    def search_fields(self, item):\n+        \"\"\"Add search fields to an item.\n+\n+        It adds the values of `metadata_id` plus the `namespace` and `repo`.\n+\n+        :param item: the item to extract the search fields values\n+\n+        :returns: a dict of search fields\n+        \"\"\"\n+        search_fields = {\n+            DEFAULT_SEARCH_FIELD: self.metadata_id(item),\n+            'namespace': self.namespace,\n+            'repo': self.repository\n+        }\n+\n+        return search_fields\n+\n+    def fetch(self, category=CATEGORY_ISSUE, from_date=DEFAULT_DATETIME, to_date=DEFAULT_LAST_DATETIME,\n+              filter_classified=False):\n+        \"\"\"Fetch the issues from the repository.\n+\n+        The method retrieves, from a Pagure repository, the issues\n+        updated since the given date.\n+\n+        :param category: the category of items to fetch\n+        :param from_date: obtain issues updated since this date\n+        :param to_date: obtain issues until a until a specific date (included)\n+        :param filter_classified: remove classified fields from the resulting items\n+\n+        :returns: a generator of issues\n+        \"\"\"\n+        self.exclude_user_data = filter_classified\n+\n+        if self.exclude_user_data:\n+            logger.info(\"Excluding user data. Personal user information won't be collected from the API.\")\n+\n+        if not from_date:\n+            from_date = DEFAULT_DATETIME\n+\n+        if not to_date:\n+            to_date = DEFAULT_LAST_DATETIME\n+\n+        from_date = from_date.strftime('%Y-%m-%d')\n+        to_date = to_date.strftime('%Y-%m-%d')\n+        kwargs = {\n+            'from_date': from_date,\n+            'to_date': to_date\n+        }\n+        items = super().fetch(category,\n+                              filter_classified=filter_classified,\n+                              **kwargs)\n+\n+        return items\n+\n+    def fetch_items(self, category, **kwargs):\n+        \"\"\"Fetch the items (issues)\n+\n+        :param category: the category of items to fetch\n+        :param kwargs: backend arguments\n+\n+        :returns: a generator of items\n+        \"\"\"\n+        from_date = kwargs['from_date']\n+        to_date = kwargs['to_date']\n+        items = self.__fetch_issues(from_date, to_date)\n+        return items\n+\n+    @classmethod\n+    def has_archiving(cls):\n+        \"\"\"Returns whether it supports archiving items on the fetch process.\n+\n+        :returns: this backend supports items archive\n+        \"\"\"\n+        return True\n+\n+    @classmethod\n+    def has_resuming(cls):\n+        \"\"\"Returns whether it supports to resume the fetch process.\n+\n+        :returns: this backend supports items resuming\n+        \"\"\"\n+        return True\n+\n+    @staticmethod\n+    def metadata_id(item):\n+        \"\"\"Extracts the identifier from a Pagure item.\"\"\"\n+\n+        return str(item['id'])\n+\n+    @staticmethod\n+    def metadata_updated_on(item):\n+        \"\"\"Extracts the update time from a Pagure item.\n+\n+        The timestamp used is extracted from 'last_updated' field.\n+        This date is converted to UNIX timestamp format. As Pagure\n+        dates are in timestamp format the conversion is straightforward.\n+\n+        :param item: item generated by the backend\n+\n+        :returns: a UNIX timestamp\n+        \"\"\"\n+        if \"forks_count\" in item:\n+            return item['fetched_on']\n+        else:\n+            ts = int(item['last_updated'])\n+            ts = datetime.fromtimestamp(ts).timestamp()\n+\n+            return ts\n+\n+    @staticmethod\n+    def metadata_category(item):\n+        \"\"\"Extracts the category from a Pagure item.\n+\n+        This backend generates one type of item which is\n+        'issue'.\n+        \"\"\"\n+\n+        category = CATEGORY_ISSUE\n+\n+        return category\n+\n+    def _init_client(self, from_archive=False):\n+        \"\"\"Init client\"\"\"\n+\n+        return PagureClient(self.namespace, self.repository, self.api_token, self.base_url,\n+                            self.sleep_for_rate, self.min_rate_to_sleep,\n+                            self.sleep_time, self.max_retries, self.max_items,\n+                            self.archive, from_archive)\n+\n+    def __fetch_issues(self, from_date, to_date):\n+        \"\"\"Fetch the issues\n+        :param from_date: starting date from which issues are fetched\n+        :param to_date: ending date till which issues are fetched\n+\n+        :returns: an issue object\n+        \"\"\"\n+\n+        issues_groups = self.client.issues(from_date=from_date)\n+\n+        for raw_issues in issues_groups:\n+            issues = json.loads(raw_issues)\n+            issues = issues['issues']\n+            for issue in issues:\n+\n+                if int(issue['last_updated']) > str_to_datetime(to_date).timestamp():\n+                    return\n+\n+                self.__init_extra_issue_fields(issue)\n+                for field in TARGET_ISSUE_FIELDS:\n+\n+                    if not issue[field]:\n+                        continue\n+\n+                    if field == 'user':\n+                        issue[field + '_data'] = self.__get_user(issue[field]['name'])\n+                    elif field == 'assignee':\n+                        issue[field + '_data'] = self.__get_issue_assignee(issue[field])\n+\n+                yield issue\n+\n+    def __get_issue_assignee(self, raw_assignee):\n+        \"\"\"Get issue assignee\"\"\"\n+        if not raw_assignee:\n+            return None\n+        assignee = self.__get_user(raw_assignee['name'])\n+\n+        return assignee\n+\n+    def __get_user(self, login):\n+        \"\"\"Get user data for the login\"\"\"\n+\n+        if not login or self.exclude_user_data:\n+            return None\n+\n+        user_raw = self.client.user(login)\n+        user = json.loads(user_raw)\n+\n+        return user\n+\n+    def __init_extra_issue_fields(self, issue):\n+        \"\"\"Add fields to an issue\"\"\"\n+\n+        issue['user_data'] = {}\n+        issue['assignee_data'] = {}\n+\n+\n+class PagureClient(HttpClient, RateLimitHandler):\n+    \"\"\"Client for retieving information from Pagure API\n+\n+    :param namespace: Pagure namespace\n+    :param repository: Pagure repository; incase the repository is within a namespace\n+    :param tokens: Pagure API token to access the API\n+    :param base_url: When no value is set the backend will be fetch the data\n+        from the Pagure public site.\n+    :param sleep_for_rate: sleep until rate limit is reset\n+    :param min_rate_to_sleep: minimun rate needed to sleep until\n+         it will be reset\n+    :param sleep_time: time to sleep in case\n+        of connection problems\n+    :param max_retries: number of max retries to a data source\n+        before raising a RetryError exception\n+    :param max_items: max number of category items (e.g., issues,\n+        pull requests) per query\n+    :param archive: collect issues already retrieved from an archive\n+    :param from_archive: it tells whether to write/read the archive\n+    \"\"\"\n+    EXTRA_STATUS_FORCELIST = [403, 500, 502, 503]\n+\n+    _users = {}  # users cache\n+\n+    def __init__(self, namespace, repository, tokens,\n+                 base_url=None, sleep_for_rate=False, min_rate_to_sleep=MIN_RATE_LIMIT,\n+                 sleep_time=DEFAULT_SLEEP_TIME, max_retries=MAX_RETRIES,\n+                 max_items=MAX_CATEGORY_ITEMS_PER_PAGE, archive=None, from_archive=False):\n+        self.namespace = namespace\n+        self.repository = repository\n+        self.tokens = tokens\n+        self.n_tokens = len(self.tokens)\n+        self.current_token = None\n+        self.last_rate_limit_checked = None",
        "path": "perceval/backends/core/pagure.py",
        "position": null,
        "original_position": 339,
        "commit_id": "70a89aa1dccc5152ed4a52cb4c5e4e327ba3595a",
        "original_commit_id": "4ffb87bbb10fd5eaf6125f39c09c04e803a1c8c7",
        "user": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "this can be removed since we are using only one token",
        "created_at": "2020-03-05T10:49:57Z",
        "updated_at": "2020-03-08T18:21:42Z",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r388216245",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621",
        "author_association": "MEMBER",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388216245"
          },
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r388216245"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388216245/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "user_data": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false,
          "name": "valerio",
          "company": "@Bitergia ",
          "blog": "http://valeriocos.github.io/",
          "location": "Madrid, Spain",
          "email": "valcos@bitergia.com",
          "hireable": true,
          "bio": null,
          "public_repos": 57,
          "public_gists": 28,
          "followers": 34,
          "following": 5,
          "created_at": "2014-01-27T14:30:30Z",
          "updated_at": "2020-03-17T10:02:44Z",
          "organizations": [
            {
              "login": "Bitergia",
              "id": 1918070,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=",
              "url": "https://api.github.com/orgs/Bitergia",
              "repos_url": "https://api.github.com/orgs/Bitergia/repos",
              "events_url": "https://api.github.com/orgs/Bitergia/events",
              "hooks_url": "https://api.github.com/orgs/Bitergia/hooks",
              "issues_url": "https://api.github.com/orgs/Bitergia/issues",
              "members_url": "https://api.github.com/orgs/Bitergia/members{/member}",
              "public_members_url": "https://api.github.com/orgs/Bitergia/public_members{/member}",
              "avatar_url": "https://avatars3.githubusercontent.com/u/1918070?v=4",
              "description": null
            },
            {
              "login": "grimoirelab",
              "id": 16151805,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1",
              "url": "https://api.github.com/orgs/grimoirelab",
              "repos_url": "https://api.github.com/orgs/grimoirelab/repos",
              "events_url": "https://api.github.com/orgs/grimoirelab/events",
              "hooks_url": "https://api.github.com/orgs/grimoirelab/hooks",
              "issues_url": "https://api.github.com/orgs/grimoirelab/issues",
              "members_url": "https://api.github.com/orgs/grimoirelab/members{/member}",
              "public_members_url": "https://api.github.com/orgs/grimoirelab/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/16151805?v=4",
              "description": ""
            },
            {
              "login": "chaoss",
              "id": 29740296,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
              "url": "https://api.github.com/orgs/chaoss",
              "repos_url": "https://api.github.com/orgs/chaoss/repos",
              "events_url": "https://api.github.com/orgs/chaoss/events",
              "hooks_url": "https://api.github.com/orgs/chaoss/hooks",
              "issues_url": "https://api.github.com/orgs/chaoss/issues",
              "members_url": "https://api.github.com/orgs/chaoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/chaoss/public_members{/member}",
              "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
              "description": ""
            }
          ]
        },
        "reactions_data": []
      },
      {
        "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388219312",
        "pull_request_review_id": 369439055,
        "id": 388219312,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIxOTMxMg==",
        "diff_hunk": "@@ -0,0 +1,528 @@\n+# -*- coding: utf-8 -*-\n+#\n+# Copyright (C) 2015-2019 Bitergia\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program. If not, see <http://www.gnu.org/licenses/>.\n+#\n+# Authors:\n+#     Valerio Cosentino <valcos@bitergia.com>\n+#\n+\n+import json\n+import logging\n+import datetime\n+import requests\n+from grimoirelab_toolkit.datetime import (datetime_to_utc,\n+                                          datetime_utcnow,\n+                                          str_to_datetime)\n+from grimoirelab_toolkit.uris import urijoin\n+\n+from ...backend import (Backend,\n+                        BackendCommand,\n+                        BackendCommandArgumentParser,\n+                        DEFAULT_SEARCH_FIELD)\n+from ...client import HttpClient, RateLimitHandler\n+from ...utils import DEFAULT_DATETIME, DEFAULT_LAST_DATETIME\n+from datetime import datetime\n+\n+CATEGORY_ISSUE = \"issue\"\n+\n+PAGURE_URL = \"https://pagure.io/\"\n+PAGURE_API_URL = \"https://pagure.io/api/0\"\n+\n+# Range before sleeping until rate limit reset\n+MIN_RATE_LIMIT = 10\n+MAX_RATE_LIMIT = 500\n+\n+MAX_CATEGORY_ITEMS_PER_PAGE = 100\n+PER_PAGE = 100\n+\n+# Default sleep time and retries to deal with connection/server problems\n+DEFAULT_SLEEP_TIME = 1\n+MAX_RETRIES = 5\n+\n+TARGET_ISSUE_FIELDS = ['user', 'assignee']\n+\n+logger = logging.getLogger(__name__)\n+\n+\n+class Pagure(Backend):\n+    \"\"\"Pagure backend for Perceval.\n+\n+    This class allows the fetch the issues stored in Pagure\n+    repository. Note that api token is needed to perform\n+    certain API calls\n+\n+    :param namespace: Pagure namespace\n+    :param repository: Pagure repository; in case the repository is within a namespace\n+    :param api_token: Pagure API token to access the API\n+    :param base_url: when no value is set the backend will be fetch\n+     the data from the Pagure public site.\n+    :param tag: label used to mark the data\n+    :param archive: archive to store/retrieve items\n+    :param sleep_for_rate: sleep until rate limit is reset\n+    :param min_rate_to_sleep: minimum rate needed to sleep until\n+         it will be reset\n+    :param max_retries: number of max retries to a data source\n+        before raising a RetryError exception\n+    :param max_items: max number of category items (e.g., issues,\n+        pull requests) per query\n+    :param sleep_time: time to sleep in case\n+        of connection problems\n+    \"\"\"\n+    version = '0.29'\n+\n+    CATEGORIES = [CATEGORY_ISSUE]\n+    CLASSIFIED_FIELDS = [\n+        ['user_data'],\n+        ['assignee_data']\n+    ]\n+\n+    def __init__(self, namespace=None, repository=None,\n+                 api_token=None, base_url=None,\n+                 tag=None, archive=None,\n+                 sleep_for_rate=False, min_rate_to_sleep=MIN_RATE_LIMIT,\n+                 max_retries=MAX_RETRIES, sleep_time=DEFAULT_SLEEP_TIME,\n+                 max_items=MAX_CATEGORY_ITEMS_PER_PAGE):\n+        if api_token is None:\n+            api_token = []\n+        origin = base_url if base_url else PAGURE_URL\n+        origin = urijoin(origin, namespace, repository)\n+\n+        super().__init__(origin, tag=tag, archive=archive)\n+\n+        self.namespace = namespace\n+        self.repository = repository\n+        self.api_token = api_token\n+        self.base_url = base_url\n+\n+        self.sleep_for_rate = sleep_for_rate\n+        self.min_rate_to_sleep = min_rate_to_sleep\n+        self.max_retries = max_retries\n+        self.sleep_time = sleep_time\n+        self.max_items = max_items\n+\n+        self.client = None\n+        self.exclude_user_data = False\n+        self._users = {}  # internal users cache\n+\n+    def search_fields(self, item):\n+        \"\"\"Add search fields to an item.\n+\n+        It adds the values of `metadata_id` plus the `namespace` and `repo`.\n+\n+        :param item: the item to extract the search fields values\n+\n+        :returns: a dict of search fields\n+        \"\"\"\n+        search_fields = {\n+            DEFAULT_SEARCH_FIELD: self.metadata_id(item),\n+            'namespace': self.namespace,\n+            'repo': self.repository\n+        }\n+\n+        return search_fields\n+\n+    def fetch(self, category=CATEGORY_ISSUE, from_date=DEFAULT_DATETIME, to_date=DEFAULT_LAST_DATETIME,\n+              filter_classified=False):\n+        \"\"\"Fetch the issues from the repository.\n+\n+        The method retrieves, from a Pagure repository, the issues\n+        updated since the given date.\n+\n+        :param category: the category of items to fetch\n+        :param from_date: obtain issues updated since this date\n+        :param to_date: obtain issues until a until a specific date (included)\n+        :param filter_classified: remove classified fields from the resulting items\n+\n+        :returns: a generator of issues\n+        \"\"\"\n+        self.exclude_user_data = filter_classified\n+\n+        if self.exclude_user_data:\n+            logger.info(\"Excluding user data. Personal user information won't be collected from the API.\")\n+\n+        if not from_date:\n+            from_date = DEFAULT_DATETIME\n+\n+        if not to_date:\n+            to_date = DEFAULT_LAST_DATETIME\n+\n+        from_date = from_date.strftime('%Y-%m-%d')\n+        to_date = to_date.strftime('%Y-%m-%d')\n+        kwargs = {\n+            'from_date': from_date,\n+            'to_date': to_date\n+        }\n+        items = super().fetch(category,\n+                              filter_classified=filter_classified,\n+                              **kwargs)\n+\n+        return items\n+\n+    def fetch_items(self, category, **kwargs):\n+        \"\"\"Fetch the items (issues)\n+\n+        :param category: the category of items to fetch\n+        :param kwargs: backend arguments\n+\n+        :returns: a generator of items\n+        \"\"\"\n+        from_date = kwargs['from_date']\n+        to_date = kwargs['to_date']\n+        items = self.__fetch_issues(from_date, to_date)\n+        return items\n+\n+    @classmethod\n+    def has_archiving(cls):\n+        \"\"\"Returns whether it supports archiving items on the fetch process.\n+\n+        :returns: this backend supports items archive\n+        \"\"\"\n+        return True\n+\n+    @classmethod\n+    def has_resuming(cls):\n+        \"\"\"Returns whether it supports to resume the fetch process.\n+\n+        :returns: this backend supports items resuming\n+        \"\"\"\n+        return True\n+\n+    @staticmethod\n+    def metadata_id(item):\n+        \"\"\"Extracts the identifier from a Pagure item.\"\"\"\n+\n+        return str(item['id'])\n+\n+    @staticmethod\n+    def metadata_updated_on(item):\n+        \"\"\"Extracts the update time from a Pagure item.\n+\n+        The timestamp used is extracted from 'last_updated' field.\n+        This date is converted to UNIX timestamp format. As Pagure\n+        dates are in timestamp format the conversion is straightforward.\n+\n+        :param item: item generated by the backend\n+\n+        :returns: a UNIX timestamp\n+        \"\"\"\n+        if \"forks_count\" in item:\n+            return item['fetched_on']\n+        else:\n+            ts = int(item['last_updated'])\n+            ts = datetime.fromtimestamp(ts).timestamp()\n+\n+            return ts\n+\n+    @staticmethod\n+    def metadata_category(item):\n+        \"\"\"Extracts the category from a Pagure item.\n+\n+        This backend generates one type of item which is\n+        'issue'.\n+        \"\"\"\n+\n+        category = CATEGORY_ISSUE\n+\n+        return category\n+\n+    def _init_client(self, from_archive=False):\n+        \"\"\"Init client\"\"\"\n+\n+        return PagureClient(self.namespace, self.repository, self.api_token, self.base_url,\n+                            self.sleep_for_rate, self.min_rate_to_sleep,\n+                            self.sleep_time, self.max_retries, self.max_items,\n+                            self.archive, from_archive)\n+\n+    def __fetch_issues(self, from_date, to_date):\n+        \"\"\"Fetch the issues\n+        :param from_date: starting date from which issues are fetched\n+        :param to_date: ending date till which issues are fetched\n+\n+        :returns: an issue object\n+        \"\"\"\n+\n+        issues_groups = self.client.issues(from_date=from_date)\n+\n+        for raw_issues in issues_groups:\n+            issues = json.loads(raw_issues)\n+            issues = issues['issues']\n+            for issue in issues:\n+\n+                if int(issue['last_updated']) > str_to_datetime(to_date).timestamp():\n+                    return\n+\n+                self.__init_extra_issue_fields(issue)\n+                for field in TARGET_ISSUE_FIELDS:\n+\n+                    if not issue[field]:\n+                        continue\n+\n+                    if field == 'user':\n+                        issue[field + '_data'] = self.__get_user(issue[field]['name'])\n+                    elif field == 'assignee':\n+                        issue[field + '_data'] = self.__get_issue_assignee(issue[field])\n+\n+                yield issue\n+\n+    def __get_issue_assignee(self, raw_assignee):\n+        \"\"\"Get issue assignee\"\"\"\n+        if not raw_assignee:\n+            return None\n+        assignee = self.__get_user(raw_assignee['name'])\n+\n+        return assignee\n+\n+    def __get_user(self, login):\n+        \"\"\"Get user data for the login\"\"\"\n+\n+        if not login or self.exclude_user_data:\n+            return None\n+\n+        user_raw = self.client.user(login)\n+        user = json.loads(user_raw)\n+\n+        return user\n+\n+    def __init_extra_issue_fields(self, issue):\n+        \"\"\"Add fields to an issue\"\"\"\n+\n+        issue['user_data'] = {}\n+        issue['assignee_data'] = {}\n+\n+\n+class PagureClient(HttpClient, RateLimitHandler):\n+    \"\"\"Client for retieving information from Pagure API\n+\n+    :param namespace: Pagure namespace\n+    :param repository: Pagure repository; incase the repository is within a namespace\n+    :param tokens: Pagure API token to access the API\n+    :param base_url: When no value is set the backend will be fetch the data\n+        from the Pagure public site.\n+    :param sleep_for_rate: sleep until rate limit is reset\n+    :param min_rate_to_sleep: minimun rate needed to sleep until\n+         it will be reset\n+    :param sleep_time: time to sleep in case\n+        of connection problems\n+    :param max_retries: number of max retries to a data source\n+        before raising a RetryError exception\n+    :param max_items: max number of category items (e.g., issues,\n+        pull requests) per query\n+    :param archive: collect issues already retrieved from an archive\n+    :param from_archive: it tells whether to write/read the archive\n+    \"\"\"\n+    EXTRA_STATUS_FORCELIST = [403, 500, 502, 503]\n+\n+    _users = {}  # users cache\n+\n+    def __init__(self, namespace, repository, tokens,\n+                 base_url=None, sleep_for_rate=False, min_rate_to_sleep=MIN_RATE_LIMIT,\n+                 sleep_time=DEFAULT_SLEEP_TIME, max_retries=MAX_RETRIES,\n+                 max_items=MAX_CATEGORY_ITEMS_PER_PAGE, archive=None, from_archive=False):\n+        self.namespace = namespace\n+        self.repository = repository\n+        self.tokens = tokens\n+        self.n_tokens = len(self.tokens)\n+        self.current_token = None\n+        self.last_rate_limit_checked = None\n+        self.max_items = max_items\n+\n+        base_url = PAGURE_API_URL\n+\n+        super().__init__(base_url, sleep_time=sleep_time, max_retries=max_retries,\n+                         extra_headers=self._set_extra_headers(),\n+                         extra_status_forcelist=self.EXTRA_STATUS_FORCELIST,\n+                         archive=archive, from_archive=from_archive)\n+        super().setup_rate_limit_handler(sleep_for_rate=sleep_for_rate, min_rate_to_sleep=min_rate_to_sleep)\n+\n+    def calculate_time_to_reset(self):\n+        \"\"\"Calculate the seconds to reset the token requests, by obtaining the different\n+        between the current date and the next date when the token is fully regenerated.\n+        \"\"\"\n+\n+        time_to_reset = self.rate_limit_reset_ts - (datetime_utcnow().replace(microsecond=0).timestamp() + 1)\n+        time_to_reset = 0 if time_to_reset < 0 else time_to_reset\n+\n+        return time_to_reset\n+\n+    def issues(self, from_date=None):\n+        \"\"\"Fetch the issues from the repository.\n+\n+        The method retrieves, from a Pagure repository, the issues\n+        updated since the given date.\n+\n+        :param from_date: obtain issues updated since this date\n+\n+        :returns: a generator of issues\n+        \"\"\"\n+        payload = {\n+            'status': 'all',\n+            'per_page': self.max_items,\n+            'order': 'asc',\n+        }\n+\n+        if from_date:\n+            payload['since'] = from_date\n+\n+        path = urijoin(\"issues\")\n+        return self.fetch_items(path, payload)\n+\n+    def user(self, name):\n+        \"\"\"Get the user information and update the user cache\n+\n+        :param name: username of the user\n+\n+        :returns: a user object\n+        \"\"\"\n+        user = None\n+\n+        if name in self._users:\n+            return self._users[name]\n+\n+        url_user = urijoin(self.base_url, 'user', name)\n+\n+        logger.debug(\"Getting info for %s\" % url_user)\n+\n+        r = self.fetch(url_user)\n+        user = r.text\n+        self._users[name] = user\n+\n+        return user\n+\n+    def fetch(self, url, payload=None, headers=None, method=HttpClient.GET, stream=False, auth=True):",
        "path": "perceval/backends/core/pagure.py",
        "position": null,
        "original_position": 404,
        "commit_id": "70a89aa1dccc5152ed4a52cb4c5e4e327ba3595a",
        "original_commit_id": "4ffb87bbb10fd5eaf6125f39c09c04e803a1c8c7",
        "user": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "you can remove method, stream and auth since they are not needed. If you want to keep them auth should be set to None (the token is passed via the header)",
        "created_at": "2020-03-05T10:55:51Z",
        "updated_at": "2020-03-08T18:21:42Z",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r388219312",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621",
        "author_association": "MEMBER",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388219312"
          },
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r388219312"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388219312/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "user_data": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false,
          "name": "valerio",
          "company": "@Bitergia ",
          "blog": "http://valeriocos.github.io/",
          "location": "Madrid, Spain",
          "email": "valcos@bitergia.com",
          "hireable": true,
          "bio": null,
          "public_repos": 57,
          "public_gists": 28,
          "followers": 34,
          "following": 5,
          "created_at": "2014-01-27T14:30:30Z",
          "updated_at": "2020-03-17T10:02:44Z",
          "organizations": [
            {
              "login": "Bitergia",
              "id": 1918070,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=",
              "url": "https://api.github.com/orgs/Bitergia",
              "repos_url": "https://api.github.com/orgs/Bitergia/repos",
              "events_url": "https://api.github.com/orgs/Bitergia/events",
              "hooks_url": "https://api.github.com/orgs/Bitergia/hooks",
              "issues_url": "https://api.github.com/orgs/Bitergia/issues",
              "members_url": "https://api.github.com/orgs/Bitergia/members{/member}",
              "public_members_url": "https://api.github.com/orgs/Bitergia/public_members{/member}",
              "avatar_url": "https://avatars3.githubusercontent.com/u/1918070?v=4",
              "description": null
            },
            {
              "login": "grimoirelab",
              "id": 16151805,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1",
              "url": "https://api.github.com/orgs/grimoirelab",
              "repos_url": "https://api.github.com/orgs/grimoirelab/repos",
              "events_url": "https://api.github.com/orgs/grimoirelab/events",
              "hooks_url": "https://api.github.com/orgs/grimoirelab/hooks",
              "issues_url": "https://api.github.com/orgs/grimoirelab/issues",
              "members_url": "https://api.github.com/orgs/grimoirelab/members{/member}",
              "public_members_url": "https://api.github.com/orgs/grimoirelab/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/16151805?v=4",
              "description": ""
            },
            {
              "login": "chaoss",
              "id": 29740296,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
              "url": "https://api.github.com/orgs/chaoss",
              "repos_url": "https://api.github.com/orgs/chaoss/repos",
              "events_url": "https://api.github.com/orgs/chaoss/events",
              "hooks_url": "https://api.github.com/orgs/chaoss/hooks",
              "issues_url": "https://api.github.com/orgs/chaoss/issues",
              "members_url": "https://api.github.com/orgs/chaoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/chaoss/public_members{/member}",
              "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
              "description": ""
            }
          ]
        },
        "reactions_data": []
      },
      {
        "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388220793",
        "pull_request_review_id": 369439055,
        "id": 388220793,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIyMDc5Mw==",
        "diff_hunk": "@@ -0,0 +1,528 @@\n+# -*- coding: utf-8 -*-\n+#\n+# Copyright (C) 2015-2019 Bitergia\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program. If not, see <http://www.gnu.org/licenses/>.\n+#\n+# Authors:\n+#     Valerio Cosentino <valcos@bitergia.com>\n+#\n+\n+import json\n+import logging\n+import datetime\n+import requests\n+from grimoirelab_toolkit.datetime import (datetime_to_utc,\n+                                          datetime_utcnow,\n+                                          str_to_datetime)\n+from grimoirelab_toolkit.uris import urijoin\n+\n+from ...backend import (Backend,\n+                        BackendCommand,\n+                        BackendCommandArgumentParser,\n+                        DEFAULT_SEARCH_FIELD)\n+from ...client import HttpClient, RateLimitHandler\n+from ...utils import DEFAULT_DATETIME, DEFAULT_LAST_DATETIME\n+from datetime import datetime\n+\n+CATEGORY_ISSUE = \"issue\"\n+\n+PAGURE_URL = \"https://pagure.io/\"\n+PAGURE_API_URL = \"https://pagure.io/api/0\"\n+\n+# Range before sleeping until rate limit reset\n+MIN_RATE_LIMIT = 10\n+MAX_RATE_LIMIT = 500\n+\n+MAX_CATEGORY_ITEMS_PER_PAGE = 100\n+PER_PAGE = 100\n+\n+# Default sleep time and retries to deal with connection/server problems\n+DEFAULT_SLEEP_TIME = 1\n+MAX_RETRIES = 5\n+\n+TARGET_ISSUE_FIELDS = ['user', 'assignee']\n+\n+logger = logging.getLogger(__name__)\n+\n+\n+class Pagure(Backend):\n+    \"\"\"Pagure backend for Perceval.\n+\n+    This class allows the fetch the issues stored in Pagure\n+    repository. Note that api token is needed to perform\n+    certain API calls\n+\n+    :param namespace: Pagure namespace\n+    :param repository: Pagure repository; in case the repository is within a namespace\n+    :param api_token: Pagure API token to access the API\n+    :param base_url: when no value is set the backend will be fetch\n+     the data from the Pagure public site.\n+    :param tag: label used to mark the data\n+    :param archive: archive to store/retrieve items\n+    :param sleep_for_rate: sleep until rate limit is reset\n+    :param min_rate_to_sleep: minimum rate needed to sleep until\n+         it will be reset\n+    :param max_retries: number of max retries to a data source\n+        before raising a RetryError exception\n+    :param max_items: max number of category items (e.g., issues,\n+        pull requests) per query\n+    :param sleep_time: time to sleep in case\n+        of connection problems\n+    \"\"\"\n+    version = '0.29'\n+\n+    CATEGORIES = [CATEGORY_ISSUE]\n+    CLASSIFIED_FIELDS = [\n+        ['user_data'],\n+        ['assignee_data']\n+    ]\n+\n+    def __init__(self, namespace=None, repository=None,\n+                 api_token=None, base_url=None,\n+                 tag=None, archive=None,\n+                 sleep_for_rate=False, min_rate_to_sleep=MIN_RATE_LIMIT,\n+                 max_retries=MAX_RETRIES, sleep_time=DEFAULT_SLEEP_TIME,\n+                 max_items=MAX_CATEGORY_ITEMS_PER_PAGE):\n+        if api_token is None:\n+            api_token = []\n+        origin = base_url if base_url else PAGURE_URL\n+        origin = urijoin(origin, namespace, repository)\n+\n+        super().__init__(origin, tag=tag, archive=archive)\n+\n+        self.namespace = namespace\n+        self.repository = repository\n+        self.api_token = api_token\n+        self.base_url = base_url\n+\n+        self.sleep_for_rate = sleep_for_rate\n+        self.min_rate_to_sleep = min_rate_to_sleep\n+        self.max_retries = max_retries\n+        self.sleep_time = sleep_time\n+        self.max_items = max_items\n+\n+        self.client = None\n+        self.exclude_user_data = False\n+        self._users = {}  # internal users cache\n+\n+    def search_fields(self, item):\n+        \"\"\"Add search fields to an item.\n+\n+        It adds the values of `metadata_id` plus the `namespace` and `repo`.\n+\n+        :param item: the item to extract the search fields values\n+\n+        :returns: a dict of search fields\n+        \"\"\"\n+        search_fields = {\n+            DEFAULT_SEARCH_FIELD: self.metadata_id(item),\n+            'namespace': self.namespace,\n+            'repo': self.repository\n+        }\n+\n+        return search_fields\n+\n+    def fetch(self, category=CATEGORY_ISSUE, from_date=DEFAULT_DATETIME, to_date=DEFAULT_LAST_DATETIME,\n+              filter_classified=False):\n+        \"\"\"Fetch the issues from the repository.\n+\n+        The method retrieves, from a Pagure repository, the issues\n+        updated since the given date.\n+\n+        :param category: the category of items to fetch\n+        :param from_date: obtain issues updated since this date\n+        :param to_date: obtain issues until a until a specific date (included)\n+        :param filter_classified: remove classified fields from the resulting items\n+\n+        :returns: a generator of issues\n+        \"\"\"\n+        self.exclude_user_data = filter_classified\n+\n+        if self.exclude_user_data:\n+            logger.info(\"Excluding user data. Personal user information won't be collected from the API.\")\n+\n+        if not from_date:\n+            from_date = DEFAULT_DATETIME\n+\n+        if not to_date:\n+            to_date = DEFAULT_LAST_DATETIME\n+\n+        from_date = from_date.strftime('%Y-%m-%d')\n+        to_date = to_date.strftime('%Y-%m-%d')\n+        kwargs = {\n+            'from_date': from_date,\n+            'to_date': to_date\n+        }\n+        items = super().fetch(category,\n+                              filter_classified=filter_classified,\n+                              **kwargs)\n+\n+        return items\n+\n+    def fetch_items(self, category, **kwargs):\n+        \"\"\"Fetch the items (issues)\n+\n+        :param category: the category of items to fetch\n+        :param kwargs: backend arguments\n+\n+        :returns: a generator of items\n+        \"\"\"\n+        from_date = kwargs['from_date']\n+        to_date = kwargs['to_date']\n+        items = self.__fetch_issues(from_date, to_date)\n+        return items\n+\n+    @classmethod\n+    def has_archiving(cls):\n+        \"\"\"Returns whether it supports archiving items on the fetch process.\n+\n+        :returns: this backend supports items archive\n+        \"\"\"\n+        return True\n+\n+    @classmethod\n+    def has_resuming(cls):\n+        \"\"\"Returns whether it supports to resume the fetch process.\n+\n+        :returns: this backend supports items resuming\n+        \"\"\"\n+        return True\n+\n+    @staticmethod\n+    def metadata_id(item):\n+        \"\"\"Extracts the identifier from a Pagure item.\"\"\"\n+\n+        return str(item['id'])\n+\n+    @staticmethod\n+    def metadata_updated_on(item):\n+        \"\"\"Extracts the update time from a Pagure item.\n+\n+        The timestamp used is extracted from 'last_updated' field.\n+        This date is converted to UNIX timestamp format. As Pagure\n+        dates are in timestamp format the conversion is straightforward.\n+\n+        :param item: item generated by the backend\n+\n+        :returns: a UNIX timestamp\n+        \"\"\"\n+        if \"forks_count\" in item:\n+            return item['fetched_on']\n+        else:\n+            ts = int(item['last_updated'])\n+            ts = datetime.fromtimestamp(ts).timestamp()\n+\n+            return ts\n+\n+    @staticmethod\n+    def metadata_category(item):\n+        \"\"\"Extracts the category from a Pagure item.\n+\n+        This backend generates one type of item which is\n+        'issue'.\n+        \"\"\"\n+\n+        category = CATEGORY_ISSUE\n+\n+        return category\n+\n+    def _init_client(self, from_archive=False):\n+        \"\"\"Init client\"\"\"\n+\n+        return PagureClient(self.namespace, self.repository, self.api_token, self.base_url,\n+                            self.sleep_for_rate, self.min_rate_to_sleep,\n+                            self.sleep_time, self.max_retries, self.max_items,\n+                            self.archive, from_archive)\n+\n+    def __fetch_issues(self, from_date, to_date):\n+        \"\"\"Fetch the issues\n+        :param from_date: starting date from which issues are fetched\n+        :param to_date: ending date till which issues are fetched\n+\n+        :returns: an issue object\n+        \"\"\"\n+\n+        issues_groups = self.client.issues(from_date=from_date)\n+\n+        for raw_issues in issues_groups:\n+            issues = json.loads(raw_issues)\n+            issues = issues['issues']\n+            for issue in issues:\n+\n+                if int(issue['last_updated']) > str_to_datetime(to_date).timestamp():\n+                    return\n+\n+                self.__init_extra_issue_fields(issue)\n+                for field in TARGET_ISSUE_FIELDS:\n+\n+                    if not issue[field]:\n+                        continue\n+\n+                    if field == 'user':\n+                        issue[field + '_data'] = self.__get_user(issue[field]['name'])\n+                    elif field == 'assignee':\n+                        issue[field + '_data'] = self.__get_issue_assignee(issue[field])\n+\n+                yield issue\n+\n+    def __get_issue_assignee(self, raw_assignee):\n+        \"\"\"Get issue assignee\"\"\"\n+        if not raw_assignee:\n+            return None\n+        assignee = self.__get_user(raw_assignee['name'])\n+\n+        return assignee\n+\n+    def __get_user(self, login):\n+        \"\"\"Get user data for the login\"\"\"\n+\n+        if not login or self.exclude_user_data:\n+            return None\n+\n+        user_raw = self.client.user(login)\n+        user = json.loads(user_raw)\n+\n+        return user\n+\n+    def __init_extra_issue_fields(self, issue):\n+        \"\"\"Add fields to an issue\"\"\"\n+\n+        issue['user_data'] = {}\n+        issue['assignee_data'] = {}\n+\n+\n+class PagureClient(HttpClient, RateLimitHandler):\n+    \"\"\"Client for retieving information from Pagure API\n+\n+    :param namespace: Pagure namespace\n+    :param repository: Pagure repository; incase the repository is within a namespace\n+    :param tokens: Pagure API token to access the API\n+    :param base_url: When no value is set the backend will be fetch the data\n+        from the Pagure public site.\n+    :param sleep_for_rate: sleep until rate limit is reset\n+    :param min_rate_to_sleep: minimun rate needed to sleep until\n+         it will be reset\n+    :param sleep_time: time to sleep in case\n+        of connection problems\n+    :param max_retries: number of max retries to a data source\n+        before raising a RetryError exception\n+    :param max_items: max number of category items (e.g., issues,\n+        pull requests) per query\n+    :param archive: collect issues already retrieved from an archive\n+    :param from_archive: it tells whether to write/read the archive\n+    \"\"\"\n+    EXTRA_STATUS_FORCELIST = [403, 500, 502, 503]\n+\n+    _users = {}  # users cache\n+\n+    def __init__(self, namespace, repository, tokens,\n+                 base_url=None, sleep_for_rate=False, min_rate_to_sleep=MIN_RATE_LIMIT,\n+                 sleep_time=DEFAULT_SLEEP_TIME, max_retries=MAX_RETRIES,\n+                 max_items=MAX_CATEGORY_ITEMS_PER_PAGE, archive=None, from_archive=False):\n+        self.namespace = namespace\n+        self.repository = repository\n+        self.tokens = tokens\n+        self.n_tokens = len(self.tokens)\n+        self.current_token = None\n+        self.last_rate_limit_checked = None\n+        self.max_items = max_items\n+\n+        base_url = PAGURE_API_URL\n+\n+        super().__init__(base_url, sleep_time=sleep_time, max_retries=max_retries,\n+                         extra_headers=self._set_extra_headers(),\n+                         extra_status_forcelist=self.EXTRA_STATUS_FORCELIST,\n+                         archive=archive, from_archive=from_archive)\n+        super().setup_rate_limit_handler(sleep_for_rate=sleep_for_rate, min_rate_to_sleep=min_rate_to_sleep)\n+\n+    def calculate_time_to_reset(self):\n+        \"\"\"Calculate the seconds to reset the token requests, by obtaining the different\n+        between the current date and the next date when the token is fully regenerated.\n+        \"\"\"\n+\n+        time_to_reset = self.rate_limit_reset_ts - (datetime_utcnow().replace(microsecond=0).timestamp() + 1)\n+        time_to_reset = 0 if time_to_reset < 0 else time_to_reset\n+\n+        return time_to_reset\n+\n+    def issues(self, from_date=None):\n+        \"\"\"Fetch the issues from the repository.\n+\n+        The method retrieves, from a Pagure repository, the issues\n+        updated since the given date.\n+\n+        :param from_date: obtain issues updated since this date\n+\n+        :returns: a generator of issues\n+        \"\"\"\n+        payload = {\n+            'status': 'all',\n+            'per_page': self.max_items,\n+            'order': 'asc',\n+        }\n+\n+        if from_date:\n+            payload['since'] = from_date\n+\n+        path = urijoin(\"issues\")\n+        return self.fetch_items(path, payload)\n+\n+    def user(self, name):\n+        \"\"\"Get the user information and update the user cache\n+\n+        :param name: username of the user\n+\n+        :returns: a user object\n+        \"\"\"\n+        user = None\n+\n+        if name in self._users:\n+            return self._users[name]\n+\n+        url_user = urijoin(self.base_url, 'user', name)\n+\n+        logger.debug(\"Getting info for %s\" % url_user)\n+\n+        r = self.fetch(url_user)\n+        user = r.text\n+        self._users[name] = user\n+\n+        return user\n+\n+    def fetch(self, url, payload=None, headers=None, method=HttpClient.GET, stream=False, auth=True):\n+        \"\"\"Fetch the data from a given URL.\n+\n+        :param url: link to the resource\n+        :param payload: payload of the request\n+        :param headers: headers of the request\n+        :param method: type of request call (GET or POST)\n+        :param stream: defer downloading the response body until the response content is available\n+        :param auth: auth of the request\n+\n+        :returns a response object\n+        \"\"\"\n+        if not self.from_archive:\n+            self.sleep_for_rate_limit()\n+\n+        # In case the issue tracker is disabled for a repository\n+        # an HTTP 404 response is returned\n+        try:\n+            response = super().fetch(url, payload, headers, method, stream, auth)\n+        except requests.exceptions.HTTPError:\n+            print(\"The issue tracker is disabled please enable the feature for the repository\")\n+            exit(1)\n+            return\n+\n+        if not self.from_archive:\n+            self.update_rate_limit(response)\n+\n+        return response\n+\n+    def fetch_items(self, path, payload):\n+        \"\"\"Return the items from Pagure API using links pagination\n+\n+        :param path: Path from which the item is to be fetched\n+        :param payload: Payload to be added to the request\n+\n+        :returns: an item object\n+        \"\"\"\n+\n+        page = 0  # current page\n+        last_page = None  # last page\n+        if self.namespace:  # if project is under a namspace",
        "path": "perceval/backends/core/pagure.py",
        "position": null,
        "original_position": 444,
        "commit_id": "70a89aa1dccc5152ed4a52cb4c5e4e327ba3595a",
        "original_commit_id": "4ffb87bbb10fd5eaf6125f39c09c04e803a1c8c7",
        "user": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "small typo in namspace",
        "created_at": "2020-03-05T10:58:38Z",
        "updated_at": "2020-03-08T18:21:42Z",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r388220793",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621",
        "author_association": "MEMBER",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388220793"
          },
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r388220793"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388220793/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "user_data": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false,
          "name": "valerio",
          "company": "@Bitergia ",
          "blog": "http://valeriocos.github.io/",
          "location": "Madrid, Spain",
          "email": "valcos@bitergia.com",
          "hireable": true,
          "bio": null,
          "public_repos": 57,
          "public_gists": 28,
          "followers": 34,
          "following": 5,
          "created_at": "2014-01-27T14:30:30Z",
          "updated_at": "2020-03-17T10:02:44Z",
          "organizations": [
            {
              "login": "Bitergia",
              "id": 1918070,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=",
              "url": "https://api.github.com/orgs/Bitergia",
              "repos_url": "https://api.github.com/orgs/Bitergia/repos",
              "events_url": "https://api.github.com/orgs/Bitergia/events",
              "hooks_url": "https://api.github.com/orgs/Bitergia/hooks",
              "issues_url": "https://api.github.com/orgs/Bitergia/issues",
              "members_url": "https://api.github.com/orgs/Bitergia/members{/member}",
              "public_members_url": "https://api.github.com/orgs/Bitergia/public_members{/member}",
              "avatar_url": "https://avatars3.githubusercontent.com/u/1918070?v=4",
              "description": null
            },
            {
              "login": "grimoirelab",
              "id": 16151805,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1",
              "url": "https://api.github.com/orgs/grimoirelab",
              "repos_url": "https://api.github.com/orgs/grimoirelab/repos",
              "events_url": "https://api.github.com/orgs/grimoirelab/events",
              "hooks_url": "https://api.github.com/orgs/grimoirelab/hooks",
              "issues_url": "https://api.github.com/orgs/grimoirelab/issues",
              "members_url": "https://api.github.com/orgs/grimoirelab/members{/member}",
              "public_members_url": "https://api.github.com/orgs/grimoirelab/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/16151805?v=4",
              "description": ""
            },
            {
              "login": "chaoss",
              "id": 29740296,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
              "url": "https://api.github.com/orgs/chaoss",
              "repos_url": "https://api.github.com/orgs/chaoss/repos",
              "events_url": "https://api.github.com/orgs/chaoss/events",
              "hooks_url": "https://api.github.com/orgs/chaoss/hooks",
              "issues_url": "https://api.github.com/orgs/chaoss/issues",
              "members_url": "https://api.github.com/orgs/chaoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/chaoss/public_members{/member}",
              "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
              "description": ""
            }
          ]
        },
        "reactions_data": []
      },
      {
        "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388222104",
        "pull_request_review_id": 369439055,
        "id": 388222104,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIyMjEwNA==",
        "diff_hunk": "@@ -0,0 +1,528 @@\n+# -*- coding: utf-8 -*-\n+#\n+# Copyright (C) 2015-2019 Bitergia\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program. If not, see <http://www.gnu.org/licenses/>.\n+#\n+# Authors:\n+#     Valerio Cosentino <valcos@bitergia.com>\n+#\n+\n+import json\n+import logging\n+import datetime\n+import requests\n+from grimoirelab_toolkit.datetime import (datetime_to_utc,\n+                                          datetime_utcnow,\n+                                          str_to_datetime)\n+from grimoirelab_toolkit.uris import urijoin\n+\n+from ...backend import (Backend,\n+                        BackendCommand,\n+                        BackendCommandArgumentParser,\n+                        DEFAULT_SEARCH_FIELD)\n+from ...client import HttpClient, RateLimitHandler\n+from ...utils import DEFAULT_DATETIME, DEFAULT_LAST_DATETIME\n+from datetime import datetime\n+\n+CATEGORY_ISSUE = \"issue\"\n+\n+PAGURE_URL = \"https://pagure.io/\"\n+PAGURE_API_URL = \"https://pagure.io/api/0\"\n+\n+# Range before sleeping until rate limit reset\n+MIN_RATE_LIMIT = 10\n+MAX_RATE_LIMIT = 500\n+\n+MAX_CATEGORY_ITEMS_PER_PAGE = 100\n+PER_PAGE = 100\n+\n+# Default sleep time and retries to deal with connection/server problems\n+DEFAULT_SLEEP_TIME = 1\n+MAX_RETRIES = 5\n+\n+TARGET_ISSUE_FIELDS = ['user', 'assignee']\n+\n+logger = logging.getLogger(__name__)\n+\n+\n+class Pagure(Backend):\n+    \"\"\"Pagure backend for Perceval.\n+\n+    This class allows the fetch the issues stored in Pagure\n+    repository. Note that api token is needed to perform\n+    certain API calls\n+\n+    :param namespace: Pagure namespace\n+    :param repository: Pagure repository; in case the repository is within a namespace\n+    :param api_token: Pagure API token to access the API\n+    :param base_url: when no value is set the backend will be fetch\n+     the data from the Pagure public site.\n+    :param tag: label used to mark the data\n+    :param archive: archive to store/retrieve items\n+    :param sleep_for_rate: sleep until rate limit is reset\n+    :param min_rate_to_sleep: minimum rate needed to sleep until\n+         it will be reset\n+    :param max_retries: number of max retries to a data source\n+        before raising a RetryError exception\n+    :param max_items: max number of category items (e.g., issues,\n+        pull requests) per query\n+    :param sleep_time: time to sleep in case\n+        of connection problems\n+    \"\"\"\n+    version = '0.29'\n+\n+    CATEGORIES = [CATEGORY_ISSUE]\n+    CLASSIFIED_FIELDS = [\n+        ['user_data'],\n+        ['assignee_data']\n+    ]\n+\n+    def __init__(self, namespace=None, repository=None,\n+                 api_token=None, base_url=None,\n+                 tag=None, archive=None,\n+                 sleep_for_rate=False, min_rate_to_sleep=MIN_RATE_LIMIT,\n+                 max_retries=MAX_RETRIES, sleep_time=DEFAULT_SLEEP_TIME,\n+                 max_items=MAX_CATEGORY_ITEMS_PER_PAGE):\n+        if api_token is None:\n+            api_token = []\n+        origin = base_url if base_url else PAGURE_URL\n+        origin = urijoin(origin, namespace, repository)\n+\n+        super().__init__(origin, tag=tag, archive=archive)\n+\n+        self.namespace = namespace\n+        self.repository = repository\n+        self.api_token = api_token\n+        self.base_url = base_url\n+\n+        self.sleep_for_rate = sleep_for_rate\n+        self.min_rate_to_sleep = min_rate_to_sleep\n+        self.max_retries = max_retries\n+        self.sleep_time = sleep_time\n+        self.max_items = max_items\n+\n+        self.client = None\n+        self.exclude_user_data = False\n+        self._users = {}  # internal users cache\n+\n+    def search_fields(self, item):\n+        \"\"\"Add search fields to an item.\n+\n+        It adds the values of `metadata_id` plus the `namespace` and `repo`.\n+\n+        :param item: the item to extract the search fields values\n+\n+        :returns: a dict of search fields\n+        \"\"\"\n+        search_fields = {\n+            DEFAULT_SEARCH_FIELD: self.metadata_id(item),\n+            'namespace': self.namespace,\n+            'repo': self.repository\n+        }\n+\n+        return search_fields\n+\n+    def fetch(self, category=CATEGORY_ISSUE, from_date=DEFAULT_DATETIME, to_date=DEFAULT_LAST_DATETIME,\n+              filter_classified=False):\n+        \"\"\"Fetch the issues from the repository.\n+\n+        The method retrieves, from a Pagure repository, the issues\n+        updated since the given date.\n+\n+        :param category: the category of items to fetch\n+        :param from_date: obtain issues updated since this date\n+        :param to_date: obtain issues until a until a specific date (included)\n+        :param filter_classified: remove classified fields from the resulting items\n+\n+        :returns: a generator of issues\n+        \"\"\"\n+        self.exclude_user_data = filter_classified\n+\n+        if self.exclude_user_data:\n+            logger.info(\"Excluding user data. Personal user information won't be collected from the API.\")\n+\n+        if not from_date:\n+            from_date = DEFAULT_DATETIME\n+\n+        if not to_date:\n+            to_date = DEFAULT_LAST_DATETIME\n+\n+        from_date = from_date.strftime('%Y-%m-%d')\n+        to_date = to_date.strftime('%Y-%m-%d')\n+        kwargs = {\n+            'from_date': from_date,\n+            'to_date': to_date\n+        }\n+        items = super().fetch(category,\n+                              filter_classified=filter_classified,\n+                              **kwargs)\n+\n+        return items\n+\n+    def fetch_items(self, category, **kwargs):\n+        \"\"\"Fetch the items (issues)\n+\n+        :param category: the category of items to fetch\n+        :param kwargs: backend arguments\n+\n+        :returns: a generator of items\n+        \"\"\"\n+        from_date = kwargs['from_date']\n+        to_date = kwargs['to_date']\n+        items = self.__fetch_issues(from_date, to_date)\n+        return items\n+\n+    @classmethod\n+    def has_archiving(cls):\n+        \"\"\"Returns whether it supports archiving items on the fetch process.\n+\n+        :returns: this backend supports items archive\n+        \"\"\"\n+        return True\n+\n+    @classmethod\n+    def has_resuming(cls):\n+        \"\"\"Returns whether it supports to resume the fetch process.\n+\n+        :returns: this backend supports items resuming\n+        \"\"\"\n+        return True\n+\n+    @staticmethod\n+    def metadata_id(item):\n+        \"\"\"Extracts the identifier from a Pagure item.\"\"\"\n+\n+        return str(item['id'])\n+\n+    @staticmethod\n+    def metadata_updated_on(item):\n+        \"\"\"Extracts the update time from a Pagure item.\n+\n+        The timestamp used is extracted from 'last_updated' field.\n+        This date is converted to UNIX timestamp format. As Pagure\n+        dates are in timestamp format the conversion is straightforward.\n+\n+        :param item: item generated by the backend\n+\n+        :returns: a UNIX timestamp\n+        \"\"\"\n+        if \"forks_count\" in item:\n+            return item['fetched_on']\n+        else:\n+            ts = int(item['last_updated'])\n+            ts = datetime.fromtimestamp(ts).timestamp()\n+\n+            return ts\n+\n+    @staticmethod\n+    def metadata_category(item):\n+        \"\"\"Extracts the category from a Pagure item.\n+\n+        This backend generates one type of item which is\n+        'issue'.\n+        \"\"\"\n+\n+        category = CATEGORY_ISSUE\n+\n+        return category\n+\n+    def _init_client(self, from_archive=False):\n+        \"\"\"Init client\"\"\"\n+\n+        return PagureClient(self.namespace, self.repository, self.api_token, self.base_url,\n+                            self.sleep_for_rate, self.min_rate_to_sleep,\n+                            self.sleep_time, self.max_retries, self.max_items,\n+                            self.archive, from_archive)\n+\n+    def __fetch_issues(self, from_date, to_date):\n+        \"\"\"Fetch the issues\n+        :param from_date: starting date from which issues are fetched\n+        :param to_date: ending date till which issues are fetched\n+\n+        :returns: an issue object\n+        \"\"\"\n+",
        "path": "perceval/backends/core/pagure.py",
        "position": null,
        "original_position": 256,
        "commit_id": "70a89aa1dccc5152ed4a52cb4c5e4e327ba3595a",
        "original_commit_id": "4ffb87bbb10fd5eaf6125f39c09c04e803a1c8c7",
        "user": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "please remove the empty line (this applies also to other methods). If the docstring is larger than 1 line, the code shouldn't be separated from the docstring. If the docstring fits in 1 line, there should be a blank line between the code and the docstring. This is the general rule we use in Perceval :)",
        "created_at": "2020-03-05T11:01:02Z",
        "updated_at": "2020-03-08T18:21:42Z",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r388222104",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621",
        "author_association": "MEMBER",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388222104"
          },
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r388222104"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388222104/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "user_data": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false,
          "name": "valerio",
          "company": "@Bitergia ",
          "blog": "http://valeriocos.github.io/",
          "location": "Madrid, Spain",
          "email": "valcos@bitergia.com",
          "hireable": true,
          "bio": null,
          "public_repos": 57,
          "public_gists": 28,
          "followers": 34,
          "following": 5,
          "created_at": "2014-01-27T14:30:30Z",
          "updated_at": "2020-03-17T10:02:44Z",
          "organizations": [
            {
              "login": "Bitergia",
              "id": 1918070,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=",
              "url": "https://api.github.com/orgs/Bitergia",
              "repos_url": "https://api.github.com/orgs/Bitergia/repos",
              "events_url": "https://api.github.com/orgs/Bitergia/events",
              "hooks_url": "https://api.github.com/orgs/Bitergia/hooks",
              "issues_url": "https://api.github.com/orgs/Bitergia/issues",
              "members_url": "https://api.github.com/orgs/Bitergia/members{/member}",
              "public_members_url": "https://api.github.com/orgs/Bitergia/public_members{/member}",
              "avatar_url": "https://avatars3.githubusercontent.com/u/1918070?v=4",
              "description": null
            },
            {
              "login": "grimoirelab",
              "id": 16151805,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1",
              "url": "https://api.github.com/orgs/grimoirelab",
              "repos_url": "https://api.github.com/orgs/grimoirelab/repos",
              "events_url": "https://api.github.com/orgs/grimoirelab/events",
              "hooks_url": "https://api.github.com/orgs/grimoirelab/hooks",
              "issues_url": "https://api.github.com/orgs/grimoirelab/issues",
              "members_url": "https://api.github.com/orgs/grimoirelab/members{/member}",
              "public_members_url": "https://api.github.com/orgs/grimoirelab/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/16151805?v=4",
              "description": ""
            },
            {
              "login": "chaoss",
              "id": 29740296,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
              "url": "https://api.github.com/orgs/chaoss",
              "repos_url": "https://api.github.com/orgs/chaoss/repos",
              "events_url": "https://api.github.com/orgs/chaoss/events",
              "hooks_url": "https://api.github.com/orgs/chaoss/hooks",
              "issues_url": "https://api.github.com/orgs/chaoss/issues",
              "members_url": "https://api.github.com/orgs/chaoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/chaoss/public_members{/member}",
              "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
              "description": ""
            }
          ]
        },
        "reactions_data": []
      },
      {
        "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388222420",
        "pull_request_review_id": 369439055,
        "id": 388222420,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIyMjQyMA==",
        "diff_hunk": "@@ -0,0 +1,528 @@\n+# -*- coding: utf-8 -*-\n+#\n+# Copyright (C) 2015-2019 Bitergia\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program. If not, see <http://www.gnu.org/licenses/>.\n+#\n+# Authors:\n+#     Valerio Cosentino <valcos@bitergia.com>\n+#\n+\n+import json\n+import logging\n+import datetime\n+import requests\n+from grimoirelab_toolkit.datetime import (datetime_to_utc,\n+                                          datetime_utcnow,\n+                                          str_to_datetime)\n+from grimoirelab_toolkit.uris import urijoin\n+\n+from ...backend import (Backend,\n+                        BackendCommand,\n+                        BackendCommandArgumentParser,\n+                        DEFAULT_SEARCH_FIELD)\n+from ...client import HttpClient, RateLimitHandler\n+from ...utils import DEFAULT_DATETIME, DEFAULT_LAST_DATETIME\n+from datetime import datetime\n+\n+CATEGORY_ISSUE = \"issue\"\n+\n+PAGURE_URL = \"https://pagure.io/\"\n+PAGURE_API_URL = \"https://pagure.io/api/0\"\n+\n+# Range before sleeping until rate limit reset\n+MIN_RATE_LIMIT = 10\n+MAX_RATE_LIMIT = 500\n+\n+MAX_CATEGORY_ITEMS_PER_PAGE = 100\n+PER_PAGE = 100\n+\n+# Default sleep time and retries to deal with connection/server problems\n+DEFAULT_SLEEP_TIME = 1\n+MAX_RETRIES = 5\n+\n+TARGET_ISSUE_FIELDS = ['user', 'assignee']\n+\n+logger = logging.getLogger(__name__)\n+\n+\n+class Pagure(Backend):\n+    \"\"\"Pagure backend for Perceval.\n+\n+    This class allows the fetch the issues stored in Pagure\n+    repository. Note that api token is needed to perform\n+    certain API calls\n+\n+    :param namespace: Pagure namespace\n+    :param repository: Pagure repository; in case the repository is within a namespace\n+    :param api_token: Pagure API token to access the API\n+    :param base_url: when no value is set the backend will be fetch\n+     the data from the Pagure public site.\n+    :param tag: label used to mark the data\n+    :param archive: archive to store/retrieve items\n+    :param sleep_for_rate: sleep until rate limit is reset\n+    :param min_rate_to_sleep: minimum rate needed to sleep until\n+         it will be reset\n+    :param max_retries: number of max retries to a data source\n+        before raising a RetryError exception\n+    :param max_items: max number of category items (e.g., issues,\n+        pull requests) per query\n+    :param sleep_time: time to sleep in case\n+        of connection problems\n+    \"\"\"\n+    version = '0.29'\n+\n+    CATEGORIES = [CATEGORY_ISSUE]\n+    CLASSIFIED_FIELDS = [\n+        ['user_data'],\n+        ['assignee_data']\n+    ]\n+\n+    def __init__(self, namespace=None, repository=None,\n+                 api_token=None, base_url=None,\n+                 tag=None, archive=None,\n+                 sleep_for_rate=False, min_rate_to_sleep=MIN_RATE_LIMIT,\n+                 max_retries=MAX_RETRIES, sleep_time=DEFAULT_SLEEP_TIME,\n+                 max_items=MAX_CATEGORY_ITEMS_PER_PAGE):\n+        if api_token is None:\n+            api_token = []\n+        origin = base_url if base_url else PAGURE_URL\n+        origin = urijoin(origin, namespace, repository)\n+\n+        super().__init__(origin, tag=tag, archive=archive)\n+\n+        self.namespace = namespace\n+        self.repository = repository\n+        self.api_token = api_token\n+        self.base_url = base_url\n+\n+        self.sleep_for_rate = sleep_for_rate\n+        self.min_rate_to_sleep = min_rate_to_sleep\n+        self.max_retries = max_retries\n+        self.sleep_time = sleep_time\n+        self.max_items = max_items\n+\n+        self.client = None\n+        self.exclude_user_data = False\n+        self._users = {}  # internal users cache\n+\n+    def search_fields(self, item):\n+        \"\"\"Add search fields to an item.\n+\n+        It adds the values of `metadata_id` plus the `namespace` and `repo`.\n+\n+        :param item: the item to extract the search fields values\n+\n+        :returns: a dict of search fields\n+        \"\"\"\n+        search_fields = {\n+            DEFAULT_SEARCH_FIELD: self.metadata_id(item),\n+            'namespace': self.namespace,\n+            'repo': self.repository\n+        }\n+\n+        return search_fields\n+\n+    def fetch(self, category=CATEGORY_ISSUE, from_date=DEFAULT_DATETIME, to_date=DEFAULT_LAST_DATETIME,\n+              filter_classified=False):\n+        \"\"\"Fetch the issues from the repository.\n+\n+        The method retrieves, from a Pagure repository, the issues\n+        updated since the given date.\n+\n+        :param category: the category of items to fetch\n+        :param from_date: obtain issues updated since this date\n+        :param to_date: obtain issues until a until a specific date (included)\n+        :param filter_classified: remove classified fields from the resulting items\n+\n+        :returns: a generator of issues\n+        \"\"\"\n+        self.exclude_user_data = filter_classified\n+\n+        if self.exclude_user_data:\n+            logger.info(\"Excluding user data. Personal user information won't be collected from the API.\")\n+\n+        if not from_date:\n+            from_date = DEFAULT_DATETIME\n+\n+        if not to_date:\n+            to_date = DEFAULT_LAST_DATETIME\n+\n+        from_date = from_date.strftime('%Y-%m-%d')\n+        to_date = to_date.strftime('%Y-%m-%d')\n+        kwargs = {\n+            'from_date': from_date,\n+            'to_date': to_date\n+        }\n+        items = super().fetch(category,\n+                              filter_classified=filter_classified,\n+                              **kwargs)\n+\n+        return items\n+\n+    def fetch_items(self, category, **kwargs):\n+        \"\"\"Fetch the items (issues)\n+\n+        :param category: the category of items to fetch\n+        :param kwargs: backend arguments\n+\n+        :returns: a generator of items\n+        \"\"\"\n+        from_date = kwargs['from_date']\n+        to_date = kwargs['to_date']\n+        items = self.__fetch_issues(from_date, to_date)\n+        return items\n+\n+    @classmethod\n+    def has_archiving(cls):\n+        \"\"\"Returns whether it supports archiving items on the fetch process.\n+\n+        :returns: this backend supports items archive\n+        \"\"\"\n+        return True\n+\n+    @classmethod\n+    def has_resuming(cls):\n+        \"\"\"Returns whether it supports to resume the fetch process.\n+\n+        :returns: this backend supports items resuming\n+        \"\"\"\n+        return True\n+\n+    @staticmethod\n+    def metadata_id(item):\n+        \"\"\"Extracts the identifier from a Pagure item.\"\"\"\n+\n+        return str(item['id'])\n+\n+    @staticmethod\n+    def metadata_updated_on(item):\n+        \"\"\"Extracts the update time from a Pagure item.\n+\n+        The timestamp used is extracted from 'last_updated' field.\n+        This date is converted to UNIX timestamp format. As Pagure\n+        dates are in timestamp format the conversion is straightforward.\n+\n+        :param item: item generated by the backend\n+\n+        :returns: a UNIX timestamp\n+        \"\"\"\n+        if \"forks_count\" in item:\n+            return item['fetched_on']\n+        else:\n+            ts = int(item['last_updated'])\n+            ts = datetime.fromtimestamp(ts).timestamp()\n+\n+            return ts\n+\n+    @staticmethod\n+    def metadata_category(item):\n+        \"\"\"Extracts the category from a Pagure item.\n+\n+        This backend generates one type of item which is\n+        'issue'.\n+        \"\"\"\n+\n+        category = CATEGORY_ISSUE\n+\n+        return category\n+\n+    def _init_client(self, from_archive=False):\n+        \"\"\"Init client\"\"\"\n+\n+        return PagureClient(self.namespace, self.repository, self.api_token, self.base_url,\n+                            self.sleep_for_rate, self.min_rate_to_sleep,\n+                            self.sleep_time, self.max_retries, self.max_items,\n+                            self.archive, from_archive)\n+\n+    def __fetch_issues(self, from_date, to_date):\n+        \"\"\"Fetch the issues\n+        :param from_date: starting date from which issues are fetched\n+        :param to_date: ending date till which issues are fetched\n+\n+        :returns: an issue object\n+        \"\"\"\n+\n+        issues_groups = self.client.issues(from_date=from_date)\n+\n+        for raw_issues in issues_groups:\n+            issues = json.loads(raw_issues)\n+            issues = issues['issues']\n+            for issue in issues:\n+\n+                if int(issue['last_updated']) > str_to_datetime(to_date).timestamp():\n+                    return\n+\n+                self.__init_extra_issue_fields(issue)\n+                for field in TARGET_ISSUE_FIELDS:\n+\n+                    if not issue[field]:\n+                        continue\n+\n+                    if field == 'user':\n+                        issue[field + '_data'] = self.__get_user(issue[field]['name'])\n+                    elif field == 'assignee':\n+                        issue[field + '_data'] = self.__get_issue_assignee(issue[field])\n+\n+                yield issue\n+\n+    def __get_issue_assignee(self, raw_assignee):\n+        \"\"\"Get issue assignee\"\"\"\n+        if not raw_assignee:",
        "path": "perceval/backends/core/pagure.py",
        "position": null,
        "original_position": 282,
        "commit_id": "70a89aa1dccc5152ed4a52cb4c5e4e327ba3595a",
        "original_commit_id": "4ffb87bbb10fd5eaf6125f39c09c04e803a1c8c7",
        "user": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "add a blank line between the code and the docstring",
        "created_at": "2020-03-05T11:01:39Z",
        "updated_at": "2020-03-08T18:21:42Z",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r388222420",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621",
        "author_association": "MEMBER",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388222420"
          },
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r388222420"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388222420/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "user_data": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false,
          "name": "valerio",
          "company": "@Bitergia ",
          "blog": "http://valeriocos.github.io/",
          "location": "Madrid, Spain",
          "email": "valcos@bitergia.com",
          "hireable": true,
          "bio": null,
          "public_repos": 57,
          "public_gists": 28,
          "followers": 34,
          "following": 5,
          "created_at": "2014-01-27T14:30:30Z",
          "updated_at": "2020-03-17T10:02:44Z",
          "organizations": [
            {
              "login": "Bitergia",
              "id": 1918070,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=",
              "url": "https://api.github.com/orgs/Bitergia",
              "repos_url": "https://api.github.com/orgs/Bitergia/repos",
              "events_url": "https://api.github.com/orgs/Bitergia/events",
              "hooks_url": "https://api.github.com/orgs/Bitergia/hooks",
              "issues_url": "https://api.github.com/orgs/Bitergia/issues",
              "members_url": "https://api.github.com/orgs/Bitergia/members{/member}",
              "public_members_url": "https://api.github.com/orgs/Bitergia/public_members{/member}",
              "avatar_url": "https://avatars3.githubusercontent.com/u/1918070?v=4",
              "description": null
            },
            {
              "login": "grimoirelab",
              "id": 16151805,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1",
              "url": "https://api.github.com/orgs/grimoirelab",
              "repos_url": "https://api.github.com/orgs/grimoirelab/repos",
              "events_url": "https://api.github.com/orgs/grimoirelab/events",
              "hooks_url": "https://api.github.com/orgs/grimoirelab/hooks",
              "issues_url": "https://api.github.com/orgs/grimoirelab/issues",
              "members_url": "https://api.github.com/orgs/grimoirelab/members{/member}",
              "public_members_url": "https://api.github.com/orgs/grimoirelab/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/16151805?v=4",
              "description": ""
            },
            {
              "login": "chaoss",
              "id": 29740296,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
              "url": "https://api.github.com/orgs/chaoss",
              "repos_url": "https://api.github.com/orgs/chaoss/repos",
              "events_url": "https://api.github.com/orgs/chaoss/events",
              "hooks_url": "https://api.github.com/orgs/chaoss/hooks",
              "issues_url": "https://api.github.com/orgs/chaoss/issues",
              "members_url": "https://api.github.com/orgs/chaoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/chaoss/public_members{/member}",
              "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
              "description": ""
            }
          ]
        },
        "reactions_data": []
      },
      {
        "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388224443",
        "pull_request_review_id": 369439055,
        "id": 388224443,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIyNDQ0Mw==",
        "diff_hunk": "@@ -0,0 +1,528 @@\n+# -*- coding: utf-8 -*-\n+#\n+# Copyright (C) 2015-2019 Bitergia\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program. If not, see <http://www.gnu.org/licenses/>.\n+#\n+# Authors:\n+#     Valerio Cosentino <valcos@bitergia.com>\n+#\n+\n+import json\n+import logging\n+import datetime\n+import requests\n+from grimoirelab_toolkit.datetime import (datetime_to_utc,\n+                                          datetime_utcnow,\n+                                          str_to_datetime)\n+from grimoirelab_toolkit.uris import urijoin\n+\n+from ...backend import (Backend,\n+                        BackendCommand,\n+                        BackendCommandArgumentParser,\n+                        DEFAULT_SEARCH_FIELD)\n+from ...client import HttpClient, RateLimitHandler\n+from ...utils import DEFAULT_DATETIME, DEFAULT_LAST_DATETIME\n+from datetime import datetime\n+\n+CATEGORY_ISSUE = \"issue\"\n+\n+PAGURE_URL = \"https://pagure.io/\"\n+PAGURE_API_URL = \"https://pagure.io/api/0\"\n+\n+# Range before sleeping until rate limit reset\n+MIN_RATE_LIMIT = 10\n+MAX_RATE_LIMIT = 500\n+\n+MAX_CATEGORY_ITEMS_PER_PAGE = 100\n+PER_PAGE = 100\n+\n+# Default sleep time and retries to deal with connection/server problems\n+DEFAULT_SLEEP_TIME = 1\n+MAX_RETRIES = 5\n+\n+TARGET_ISSUE_FIELDS = ['user', 'assignee']\n+\n+logger = logging.getLogger(__name__)\n+\n+\n+class Pagure(Backend):\n+    \"\"\"Pagure backend for Perceval.\n+\n+    This class allows the fetch the issues stored in Pagure\n+    repository. Note that api token is needed to perform\n+    certain API calls\n+\n+    :param namespace: Pagure namespace\n+    :param repository: Pagure repository; in case the repository is within a namespace\n+    :param api_token: Pagure API token to access the API\n+    :param base_url: when no value is set the backend will be fetch\n+     the data from the Pagure public site.\n+    :param tag: label used to mark the data\n+    :param archive: archive to store/retrieve items\n+    :param sleep_for_rate: sleep until rate limit is reset\n+    :param min_rate_to_sleep: minimum rate needed to sleep until\n+         it will be reset\n+    :param max_retries: number of max retries to a data source\n+        before raising a RetryError exception\n+    :param max_items: max number of category items (e.g., issues,\n+        pull requests) per query\n+    :param sleep_time: time to sleep in case\n+        of connection problems\n+    \"\"\"\n+    version = '0.29'\n+\n+    CATEGORIES = [CATEGORY_ISSUE]\n+    CLASSIFIED_FIELDS = [\n+        ['user_data'],\n+        ['assignee_data']\n+    ]\n+\n+    def __init__(self, namespace=None, repository=None,\n+                 api_token=None, base_url=None,\n+                 tag=None, archive=None,\n+                 sleep_for_rate=False, min_rate_to_sleep=MIN_RATE_LIMIT,\n+                 max_retries=MAX_RETRIES, sleep_time=DEFAULT_SLEEP_TIME,\n+                 max_items=MAX_CATEGORY_ITEMS_PER_PAGE):\n+        if api_token is None:\n+            api_token = []\n+        origin = base_url if base_url else PAGURE_URL\n+        origin = urijoin(origin, namespace, repository)",
        "path": "perceval/backends/core/pagure.py",
        "position": null,
        "original_position": 101,
        "commit_id": "70a89aa1dccc5152ed4a52cb4c5e4e327ba3595a",
        "original_commit_id": "4ffb87bbb10fd5eaf6125f39c09c04e803a1c8c7",
        "user": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "if the namespace is empty, there is an error: `perceval pagure Project-textbase`\r\n\r\nMaybe the origin could be calculated as: `origin = urijoin(origin, namespace, repository) if namespace else urijoin(origin, repository)`",
        "created_at": "2020-03-05T11:05:44Z",
        "updated_at": "2020-03-08T18:21:42Z",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r388224443",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621",
        "author_association": "MEMBER",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388224443"
          },
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r388224443"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388224443/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "user_data": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false,
          "name": "valerio",
          "company": "@Bitergia ",
          "blog": "http://valeriocos.github.io/",
          "location": "Madrid, Spain",
          "email": "valcos@bitergia.com",
          "hireable": true,
          "bio": null,
          "public_repos": 57,
          "public_gists": 28,
          "followers": 34,
          "following": 5,
          "created_at": "2014-01-27T14:30:30Z",
          "updated_at": "2020-03-17T10:02:44Z",
          "organizations": [
            {
              "login": "Bitergia",
              "id": 1918070,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=",
              "url": "https://api.github.com/orgs/Bitergia",
              "repos_url": "https://api.github.com/orgs/Bitergia/repos",
              "events_url": "https://api.github.com/orgs/Bitergia/events",
              "hooks_url": "https://api.github.com/orgs/Bitergia/hooks",
              "issues_url": "https://api.github.com/orgs/Bitergia/issues",
              "members_url": "https://api.github.com/orgs/Bitergia/members{/member}",
              "public_members_url": "https://api.github.com/orgs/Bitergia/public_members{/member}",
              "avatar_url": "https://avatars3.githubusercontent.com/u/1918070?v=4",
              "description": null
            },
            {
              "login": "grimoirelab",
              "id": 16151805,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1",
              "url": "https://api.github.com/orgs/grimoirelab",
              "repos_url": "https://api.github.com/orgs/grimoirelab/repos",
              "events_url": "https://api.github.com/orgs/grimoirelab/events",
              "hooks_url": "https://api.github.com/orgs/grimoirelab/hooks",
              "issues_url": "https://api.github.com/orgs/grimoirelab/issues",
              "members_url": "https://api.github.com/orgs/grimoirelab/members{/member}",
              "public_members_url": "https://api.github.com/orgs/grimoirelab/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/16151805?v=4",
              "description": ""
            },
            {
              "login": "chaoss",
              "id": 29740296,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
              "url": "https://api.github.com/orgs/chaoss",
              "repos_url": "https://api.github.com/orgs/chaoss/repos",
              "events_url": "https://api.github.com/orgs/chaoss/events",
              "hooks_url": "https://api.github.com/orgs/chaoss/hooks",
              "issues_url": "https://api.github.com/orgs/chaoss/issues",
              "members_url": "https://api.github.com/orgs/chaoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/chaoss/public_members{/member}",
              "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
              "description": ""
            }
          ]
        },
        "reactions_data": []
      },
      {
        "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388226918",
        "pull_request_review_id": 369439055,
        "id": 388226918,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIyNjkxOA==",
        "diff_hunk": "@@ -0,0 +1,528 @@\n+# -*- coding: utf-8 -*-\n+#\n+# Copyright (C) 2015-2019 Bitergia\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program. If not, see <http://www.gnu.org/licenses/>.\n+#\n+# Authors:\n+#     Valerio Cosentino <valcos@bitergia.com>\n+#\n+\n+import json\n+import logging\n+import datetime\n+import requests\n+from grimoirelab_toolkit.datetime import (datetime_to_utc,\n+                                          datetime_utcnow,\n+                                          str_to_datetime)\n+from grimoirelab_toolkit.uris import urijoin\n+\n+from ...backend import (Backend,\n+                        BackendCommand,\n+                        BackendCommandArgumentParser,\n+                        DEFAULT_SEARCH_FIELD)\n+from ...client import HttpClient, RateLimitHandler\n+from ...utils import DEFAULT_DATETIME, DEFAULT_LAST_DATETIME\n+from datetime import datetime\n+\n+CATEGORY_ISSUE = \"issue\"\n+\n+PAGURE_URL = \"https://pagure.io/\"\n+PAGURE_API_URL = \"https://pagure.io/api/0\"\n+\n+# Range before sleeping until rate limit reset\n+MIN_RATE_LIMIT = 10\n+MAX_RATE_LIMIT = 500\n+\n+MAX_CATEGORY_ITEMS_PER_PAGE = 100\n+PER_PAGE = 100\n+\n+# Default sleep time and retries to deal with connection/server problems\n+DEFAULT_SLEEP_TIME = 1\n+MAX_RETRIES = 5\n+\n+TARGET_ISSUE_FIELDS = ['user', 'assignee']\n+\n+logger = logging.getLogger(__name__)\n+\n+\n+class Pagure(Backend):\n+    \"\"\"Pagure backend for Perceval.\n+\n+    This class allows the fetch the issues stored in Pagure\n+    repository. Note that api token is needed to perform\n+    certain API calls\n+\n+    :param namespace: Pagure namespace\n+    :param repository: Pagure repository; in case the repository is within a namespace\n+    :param api_token: Pagure API token to access the API\n+    :param base_url: when no value is set the backend will be fetch\n+     the data from the Pagure public site.\n+    :param tag: label used to mark the data\n+    :param archive: archive to store/retrieve items\n+    :param sleep_for_rate: sleep until rate limit is reset\n+    :param min_rate_to_sleep: minimum rate needed to sleep until\n+         it will be reset\n+    :param max_retries: number of max retries to a data source\n+        before raising a RetryError exception\n+    :param max_items: max number of category items (e.g., issues,\n+        pull requests) per query\n+    :param sleep_time: time to sleep in case\n+        of connection problems\n+    \"\"\"\n+    version = '0.29'\n+\n+    CATEGORIES = [CATEGORY_ISSUE]\n+    CLASSIFIED_FIELDS = [\n+        ['user_data'],\n+        ['assignee_data']\n+    ]\n+\n+    def __init__(self, namespace=None, repository=None,\n+                 api_token=None, base_url=None,\n+                 tag=None, archive=None,\n+                 sleep_for_rate=False, min_rate_to_sleep=MIN_RATE_LIMIT,\n+                 max_retries=MAX_RETRIES, sleep_time=DEFAULT_SLEEP_TIME,\n+                 max_items=MAX_CATEGORY_ITEMS_PER_PAGE):\n+        if api_token is None:\n+            api_token = []\n+        origin = base_url if base_url else PAGURE_URL\n+        origin = urijoin(origin, namespace, repository)\n+\n+        super().__init__(origin, tag=tag, archive=archive)\n+\n+        self.namespace = namespace\n+        self.repository = repository\n+        self.api_token = api_token\n+        self.base_url = base_url\n+\n+        self.sleep_for_rate = sleep_for_rate\n+        self.min_rate_to_sleep = min_rate_to_sleep\n+        self.max_retries = max_retries\n+        self.sleep_time = sleep_time\n+        self.max_items = max_items\n+\n+        self.client = None\n+        self.exclude_user_data = False\n+        self._users = {}  # internal users cache\n+\n+    def search_fields(self, item):\n+        \"\"\"Add search fields to an item.\n+\n+        It adds the values of `metadata_id` plus the `namespace` and `repo`.\n+\n+        :param item: the item to extract the search fields values\n+\n+        :returns: a dict of search fields\n+        \"\"\"\n+        search_fields = {\n+            DEFAULT_SEARCH_FIELD: self.metadata_id(item),\n+            'namespace': self.namespace,\n+            'repo': self.repository\n+        }\n+\n+        return search_fields\n+\n+    def fetch(self, category=CATEGORY_ISSUE, from_date=DEFAULT_DATETIME, to_date=DEFAULT_LAST_DATETIME,\n+              filter_classified=False):\n+        \"\"\"Fetch the issues from the repository.\n+\n+        The method retrieves, from a Pagure repository, the issues\n+        updated since the given date.\n+\n+        :param category: the category of items to fetch\n+        :param from_date: obtain issues updated since this date\n+        :param to_date: obtain issues until a until a specific date (included)\n+        :param filter_classified: remove classified fields from the resulting items\n+\n+        :returns: a generator of issues\n+        \"\"\"\n+        self.exclude_user_data = filter_classified\n+\n+        if self.exclude_user_data:\n+            logger.info(\"Excluding user data. Personal user information won't be collected from the API.\")\n+\n+        if not from_date:\n+            from_date = DEFAULT_DATETIME\n+\n+        if not to_date:\n+            to_date = DEFAULT_LAST_DATETIME\n+\n+        from_date = from_date.strftime('%Y-%m-%d')\n+        to_date = to_date.strftime('%Y-%m-%d')\n+        kwargs = {\n+            'from_date': from_date,\n+            'to_date': to_date\n+        }\n+        items = super().fetch(category,\n+                              filter_classified=filter_classified,\n+                              **kwargs)\n+\n+        return items\n+\n+    def fetch_items(self, category, **kwargs):\n+        \"\"\"Fetch the items (issues)\n+\n+        :param category: the category of items to fetch\n+        :param kwargs: backend arguments\n+\n+        :returns: a generator of items\n+        \"\"\"\n+        from_date = kwargs['from_date']\n+        to_date = kwargs['to_date']\n+        items = self.__fetch_issues(from_date, to_date)\n+        return items\n+\n+    @classmethod\n+    def has_archiving(cls):\n+        \"\"\"Returns whether it supports archiving items on the fetch process.\n+\n+        :returns: this backend supports items archive\n+        \"\"\"\n+        return True\n+\n+    @classmethod\n+    def has_resuming(cls):\n+        \"\"\"Returns whether it supports to resume the fetch process.\n+\n+        :returns: this backend supports items resuming\n+        \"\"\"\n+        return True\n+\n+    @staticmethod\n+    def metadata_id(item):\n+        \"\"\"Extracts the identifier from a Pagure item.\"\"\"\n+\n+        return str(item['id'])\n+\n+    @staticmethod\n+    def metadata_updated_on(item):\n+        \"\"\"Extracts the update time from a Pagure item.\n+\n+        The timestamp used is extracted from 'last_updated' field.\n+        This date is converted to UNIX timestamp format. As Pagure\n+        dates are in timestamp format the conversion is straightforward.\n+\n+        :param item: item generated by the backend\n+\n+        :returns: a UNIX timestamp\n+        \"\"\"\n+        if \"forks_count\" in item:",
        "path": "perceval/backends/core/pagure.py",
        "position": null,
        "original_position": 221,
        "commit_id": "70a89aa1dccc5152ed4a52cb4c5e4e327ba3595a",
        "original_commit_id": "4ffb87bbb10fd5eaf6125f39c09c04e803a1c8c7",
        "user": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "The content of the else statement is needed, the rest can be removed since it seems to come from the github backend.",
        "created_at": "2020-03-05T11:10:45Z",
        "updated_at": "2020-03-08T18:21:42Z",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r388226918",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621",
        "author_association": "MEMBER",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388226918"
          },
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r388226918"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388226918/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "user_data": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false,
          "name": "valerio",
          "company": "@Bitergia ",
          "blog": "http://valeriocos.github.io/",
          "location": "Madrid, Spain",
          "email": "valcos@bitergia.com",
          "hireable": true,
          "bio": null,
          "public_repos": 57,
          "public_gists": 28,
          "followers": 34,
          "following": 5,
          "created_at": "2014-01-27T14:30:30Z",
          "updated_at": "2020-03-17T10:02:44Z",
          "organizations": [
            {
              "login": "Bitergia",
              "id": 1918070,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=",
              "url": "https://api.github.com/orgs/Bitergia",
              "repos_url": "https://api.github.com/orgs/Bitergia/repos",
              "events_url": "https://api.github.com/orgs/Bitergia/events",
              "hooks_url": "https://api.github.com/orgs/Bitergia/hooks",
              "issues_url": "https://api.github.com/orgs/Bitergia/issues",
              "members_url": "https://api.github.com/orgs/Bitergia/members{/member}",
              "public_members_url": "https://api.github.com/orgs/Bitergia/public_members{/member}",
              "avatar_url": "https://avatars3.githubusercontent.com/u/1918070?v=4",
              "description": null
            },
            {
              "login": "grimoirelab",
              "id": 16151805,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1",
              "url": "https://api.github.com/orgs/grimoirelab",
              "repos_url": "https://api.github.com/orgs/grimoirelab/repos",
              "events_url": "https://api.github.com/orgs/grimoirelab/events",
              "hooks_url": "https://api.github.com/orgs/grimoirelab/hooks",
              "issues_url": "https://api.github.com/orgs/grimoirelab/issues",
              "members_url": "https://api.github.com/orgs/grimoirelab/members{/member}",
              "public_members_url": "https://api.github.com/orgs/grimoirelab/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/16151805?v=4",
              "description": ""
            },
            {
              "login": "chaoss",
              "id": 29740296,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
              "url": "https://api.github.com/orgs/chaoss",
              "repos_url": "https://api.github.com/orgs/chaoss/repos",
              "events_url": "https://api.github.com/orgs/chaoss/events",
              "hooks_url": "https://api.github.com/orgs/chaoss/hooks",
              "issues_url": "https://api.github.com/orgs/chaoss/issues",
              "members_url": "https://api.github.com/orgs/chaoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/chaoss/public_members{/member}",
              "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
              "description": ""
            }
          ]
        },
        "reactions_data": []
      },
      {
        "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388228752",
        "pull_request_review_id": 369439055,
        "id": 388228752,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIyODc1Mg==",
        "diff_hunk": "@@ -0,0 +1,528 @@\n+# -*- coding: utf-8 -*-\n+#\n+# Copyright (C) 2015-2019 Bitergia\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program. If not, see <http://www.gnu.org/licenses/>.\n+#\n+# Authors:\n+#     Valerio Cosentino <valcos@bitergia.com>\n+#\n+\n+import json\n+import logging\n+import datetime\n+import requests\n+from grimoirelab_toolkit.datetime import (datetime_to_utc,\n+                                          datetime_utcnow,\n+                                          str_to_datetime)\n+from grimoirelab_toolkit.uris import urijoin\n+\n+from ...backend import (Backend,\n+                        BackendCommand,\n+                        BackendCommandArgumentParser,\n+                        DEFAULT_SEARCH_FIELD)\n+from ...client import HttpClient, RateLimitHandler\n+from ...utils import DEFAULT_DATETIME, DEFAULT_LAST_DATETIME\n+from datetime import datetime\n+\n+CATEGORY_ISSUE = \"issue\"\n+\n+PAGURE_URL = \"https://pagure.io/\"\n+PAGURE_API_URL = \"https://pagure.io/api/0\"\n+\n+# Range before sleeping until rate limit reset\n+MIN_RATE_LIMIT = 10\n+MAX_RATE_LIMIT = 500\n+\n+MAX_CATEGORY_ITEMS_PER_PAGE = 100\n+PER_PAGE = 100\n+\n+# Default sleep time and retries to deal with connection/server problems\n+DEFAULT_SLEEP_TIME = 1\n+MAX_RETRIES = 5\n+\n+TARGET_ISSUE_FIELDS = ['user', 'assignee']\n+\n+logger = logging.getLogger(__name__)\n+\n+\n+class Pagure(Backend):\n+    \"\"\"Pagure backend for Perceval.\n+\n+    This class allows the fetch the issues stored in Pagure\n+    repository. Note that api token is needed to perform\n+    certain API calls\n+\n+    :param namespace: Pagure namespace\n+    :param repository: Pagure repository; in case the repository is within a namespace\n+    :param api_token: Pagure API token to access the API\n+    :param base_url: when no value is set the backend will be fetch\n+     the data from the Pagure public site.\n+    :param tag: label used to mark the data\n+    :param archive: archive to store/retrieve items\n+    :param sleep_for_rate: sleep until rate limit is reset\n+    :param min_rate_to_sleep: minimum rate needed to sleep until\n+         it will be reset\n+    :param max_retries: number of max retries to a data source\n+        before raising a RetryError exception\n+    :param max_items: max number of category items (e.g., issues,\n+        pull requests) per query\n+    :param sleep_time: time to sleep in case\n+        of connection problems\n+    \"\"\"\n+    version = '0.29'\n+\n+    CATEGORIES = [CATEGORY_ISSUE]\n+    CLASSIFIED_FIELDS = [\n+        ['user_data'],\n+        ['assignee_data']\n+    ]\n+\n+    def __init__(self, namespace=None, repository=None,\n+                 api_token=None, base_url=None,\n+                 tag=None, archive=None,\n+                 sleep_for_rate=False, min_rate_to_sleep=MIN_RATE_LIMIT,\n+                 max_retries=MAX_RETRIES, sleep_time=DEFAULT_SLEEP_TIME,\n+                 max_items=MAX_CATEGORY_ITEMS_PER_PAGE):\n+        if api_token is None:\n+            api_token = []\n+        origin = base_url if base_url else PAGURE_URL\n+        origin = urijoin(origin, namespace, repository)\n+\n+        super().__init__(origin, tag=tag, archive=archive)\n+\n+        self.namespace = namespace\n+        self.repository = repository\n+        self.api_token = api_token\n+        self.base_url = base_url\n+\n+        self.sleep_for_rate = sleep_for_rate\n+        self.min_rate_to_sleep = min_rate_to_sleep\n+        self.max_retries = max_retries\n+        self.sleep_time = sleep_time\n+        self.max_items = max_items\n+\n+        self.client = None\n+        self.exclude_user_data = False\n+        self._users = {}  # internal users cache\n+\n+    def search_fields(self, item):\n+        \"\"\"Add search fields to an item.\n+\n+        It adds the values of `metadata_id` plus the `namespace` and `repo`.\n+\n+        :param item: the item to extract the search fields values\n+\n+        :returns: a dict of search fields\n+        \"\"\"\n+        search_fields = {\n+            DEFAULT_SEARCH_FIELD: self.metadata_id(item),\n+            'namespace': self.namespace,\n+            'repo': self.repository\n+        }\n+\n+        return search_fields\n+\n+    def fetch(self, category=CATEGORY_ISSUE, from_date=DEFAULT_DATETIME, to_date=DEFAULT_LAST_DATETIME,\n+              filter_classified=False):\n+        \"\"\"Fetch the issues from the repository.\n+\n+        The method retrieves, from a Pagure repository, the issues\n+        updated since the given date.\n+\n+        :param category: the category of items to fetch\n+        :param from_date: obtain issues updated since this date\n+        :param to_date: obtain issues until a until a specific date (included)\n+        :param filter_classified: remove classified fields from the resulting items\n+\n+        :returns: a generator of issues\n+        \"\"\"\n+        self.exclude_user_data = filter_classified\n+\n+        if self.exclude_user_data:\n+            logger.info(\"Excluding user data. Personal user information won't be collected from the API.\")\n+\n+        if not from_date:\n+            from_date = DEFAULT_DATETIME\n+\n+        if not to_date:\n+            to_date = DEFAULT_LAST_DATETIME\n+\n+        from_date = from_date.strftime('%Y-%m-%d')\n+        to_date = to_date.strftime('%Y-%m-%d')\n+        kwargs = {\n+            'from_date': from_date,\n+            'to_date': to_date\n+        }\n+        items = super().fetch(category,\n+                              filter_classified=filter_classified,\n+                              **kwargs)\n+\n+        return items\n+\n+    def fetch_items(self, category, **kwargs):\n+        \"\"\"Fetch the items (issues)\n+\n+        :param category: the category of items to fetch\n+        :param kwargs: backend arguments\n+\n+        :returns: a generator of items\n+        \"\"\"\n+        from_date = kwargs['from_date']\n+        to_date = kwargs['to_date']\n+        items = self.__fetch_issues(from_date, to_date)\n+        return items\n+\n+    @classmethod\n+    def has_archiving(cls):\n+        \"\"\"Returns whether it supports archiving items on the fetch process.\n+\n+        :returns: this backend supports items archive\n+        \"\"\"\n+        return True\n+\n+    @classmethod\n+    def has_resuming(cls):\n+        \"\"\"Returns whether it supports to resume the fetch process.\n+\n+        :returns: this backend supports items resuming\n+        \"\"\"\n+        return True\n+\n+    @staticmethod\n+    def metadata_id(item):\n+        \"\"\"Extracts the identifier from a Pagure item.\"\"\"\n+\n+        return str(item['id'])\n+\n+    @staticmethod\n+    def metadata_updated_on(item):\n+        \"\"\"Extracts the update time from a Pagure item.\n+\n+        The timestamp used is extracted from 'last_updated' field.\n+        This date is converted to UNIX timestamp format. As Pagure\n+        dates are in timestamp format the conversion is straightforward.\n+\n+        :param item: item generated by the backend\n+\n+        :returns: a UNIX timestamp\n+        \"\"\"\n+        if \"forks_count\" in item:\n+            return item['fetched_on']\n+        else:\n+            ts = int(item['last_updated'])\n+            ts = datetime.fromtimestamp(ts).timestamp()\n+\n+            return ts\n+\n+    @staticmethod\n+    def metadata_category(item):\n+        \"\"\"Extracts the category from a Pagure item.\n+\n+        This backend generates one type of item which is\n+        'issue'.\n+        \"\"\"\n+\n+        category = CATEGORY_ISSUE\n+\n+        return category\n+\n+    def _init_client(self, from_archive=False):\n+        \"\"\"Init client\"\"\"\n+\n+        return PagureClient(self.namespace, self.repository, self.api_token, self.base_url,\n+                            self.sleep_for_rate, self.min_rate_to_sleep,\n+                            self.sleep_time, self.max_retries, self.max_items,\n+                            self.archive, from_archive)\n+\n+    def __fetch_issues(self, from_date, to_date):\n+        \"\"\"Fetch the issues\n+        :param from_date: starting date from which issues are fetched\n+        :param to_date: ending date till which issues are fetched\n+\n+        :returns: an issue object\n+        \"\"\"\n+\n+        issues_groups = self.client.issues(from_date=from_date)\n+\n+        for raw_issues in issues_groups:\n+            issues = json.loads(raw_issues)\n+            issues = issues['issues']\n+            for issue in issues:\n+\n+                if int(issue['last_updated']) > str_to_datetime(to_date).timestamp():\n+                    return\n+\n+                self.__init_extra_issue_fields(issue)",
        "path": "perceval/backends/core/pagure.py",
        "position": null,
        "original_position": 267,
        "commit_id": "70a89aa1dccc5152ed4a52cb4c5e4e327ba3595a",
        "original_commit_id": "4ffb87bbb10fd5eaf6125f39c09c04e803a1c8c7",
        "user": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "I would remove the code from 267 and 276. The data returned from the user endpoint doesn't give any extra information about the user identity (i.e., name and fullname).",
        "created_at": "2020-03-05T11:14:36Z",
        "updated_at": "2020-03-08T18:21:42Z",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r388228752",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621",
        "author_association": "MEMBER",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388228752"
          },
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r388228752"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388228752/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "user_data": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false,
          "name": "valerio",
          "company": "@Bitergia ",
          "blog": "http://valeriocos.github.io/",
          "location": "Madrid, Spain",
          "email": "valcos@bitergia.com",
          "hireable": true,
          "bio": null,
          "public_repos": 57,
          "public_gists": 28,
          "followers": 34,
          "following": 5,
          "created_at": "2014-01-27T14:30:30Z",
          "updated_at": "2020-03-17T10:02:44Z",
          "organizations": [
            {
              "login": "Bitergia",
              "id": 1918070,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=",
              "url": "https://api.github.com/orgs/Bitergia",
              "repos_url": "https://api.github.com/orgs/Bitergia/repos",
              "events_url": "https://api.github.com/orgs/Bitergia/events",
              "hooks_url": "https://api.github.com/orgs/Bitergia/hooks",
              "issues_url": "https://api.github.com/orgs/Bitergia/issues",
              "members_url": "https://api.github.com/orgs/Bitergia/members{/member}",
              "public_members_url": "https://api.github.com/orgs/Bitergia/public_members{/member}",
              "avatar_url": "https://avatars3.githubusercontent.com/u/1918070?v=4",
              "description": null
            },
            {
              "login": "grimoirelab",
              "id": 16151805,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1",
              "url": "https://api.github.com/orgs/grimoirelab",
              "repos_url": "https://api.github.com/orgs/grimoirelab/repos",
              "events_url": "https://api.github.com/orgs/grimoirelab/events",
              "hooks_url": "https://api.github.com/orgs/grimoirelab/hooks",
              "issues_url": "https://api.github.com/orgs/grimoirelab/issues",
              "members_url": "https://api.github.com/orgs/grimoirelab/members{/member}",
              "public_members_url": "https://api.github.com/orgs/grimoirelab/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/16151805?v=4",
              "description": ""
            },
            {
              "login": "chaoss",
              "id": 29740296,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
              "url": "https://api.github.com/orgs/chaoss",
              "repos_url": "https://api.github.com/orgs/chaoss/repos",
              "events_url": "https://api.github.com/orgs/chaoss/events",
              "hooks_url": "https://api.github.com/orgs/chaoss/hooks",
              "issues_url": "https://api.github.com/orgs/chaoss/issues",
              "members_url": "https://api.github.com/orgs/chaoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/chaoss/public_members{/member}",
              "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
              "description": ""
            }
          ]
        },
        "reactions_data": []
      },
      {
        "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388269742",
        "pull_request_review_id": 369439055,
        "id": 388269742,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI2OTc0Mg==",
        "diff_hunk": "@@ -0,0 +1,528 @@\n+# -*- coding: utf-8 -*-\n+#\n+# Copyright (C) 2015-2019 Bitergia\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program. If not, see <http://www.gnu.org/licenses/>.\n+#\n+# Authors:\n+#     Valerio Cosentino <valcos@bitergia.com>\n+#\n+\n+import json\n+import logging\n+import datetime\n+import requests\n+from grimoirelab_toolkit.datetime import (datetime_to_utc,\n+                                          datetime_utcnow,\n+                                          str_to_datetime)\n+from grimoirelab_toolkit.uris import urijoin\n+\n+from ...backend import (Backend,\n+                        BackendCommand,\n+                        BackendCommandArgumentParser,\n+                        DEFAULT_SEARCH_FIELD)\n+from ...client import HttpClient, RateLimitHandler\n+from ...utils import DEFAULT_DATETIME, DEFAULT_LAST_DATETIME\n+from datetime import datetime\n+\n+CATEGORY_ISSUE = \"issue\"\n+\n+PAGURE_URL = \"https://pagure.io/\"\n+PAGURE_API_URL = \"https://pagure.io/api/0\"\n+\n+# Range before sleeping until rate limit reset\n+MIN_RATE_LIMIT = 10\n+MAX_RATE_LIMIT = 500\n+\n+MAX_CATEGORY_ITEMS_PER_PAGE = 100\n+PER_PAGE = 100\n+\n+# Default sleep time and retries to deal with connection/server problems\n+DEFAULT_SLEEP_TIME = 1\n+MAX_RETRIES = 5\n+\n+TARGET_ISSUE_FIELDS = ['user', 'assignee']\n+\n+logger = logging.getLogger(__name__)\n+\n+\n+class Pagure(Backend):\n+    \"\"\"Pagure backend for Perceval.\n+\n+    This class allows the fetch the issues stored in Pagure\n+    repository. Note that api token is needed to perform\n+    certain API calls\n+\n+    :param namespace: Pagure namespace\n+    :param repository: Pagure repository; in case the repository is within a namespace\n+    :param api_token: Pagure API token to access the API\n+    :param base_url: when no value is set the backend will be fetch\n+     the data from the Pagure public site.\n+    :param tag: label used to mark the data\n+    :param archive: archive to store/retrieve items\n+    :param sleep_for_rate: sleep until rate limit is reset\n+    :param min_rate_to_sleep: minimum rate needed to sleep until\n+         it will be reset\n+    :param max_retries: number of max retries to a data source\n+        before raising a RetryError exception\n+    :param max_items: max number of category items (e.g., issues,\n+        pull requests) per query\n+    :param sleep_time: time to sleep in case\n+        of connection problems\n+    \"\"\"\n+    version = '0.29'\n+\n+    CATEGORIES = [CATEGORY_ISSUE]\n+    CLASSIFIED_FIELDS = [\n+        ['user_data'],\n+        ['assignee_data']\n+    ]\n+\n+    def __init__(self, namespace=None, repository=None,\n+                 api_token=None, base_url=None,\n+                 tag=None, archive=None,\n+                 sleep_for_rate=False, min_rate_to_sleep=MIN_RATE_LIMIT,\n+                 max_retries=MAX_RETRIES, sleep_time=DEFAULT_SLEEP_TIME,\n+                 max_items=MAX_CATEGORY_ITEMS_PER_PAGE):\n+        if api_token is None:\n+            api_token = []\n+        origin = base_url if base_url else PAGURE_URL\n+        origin = urijoin(origin, namespace, repository)\n+\n+        super().__init__(origin, tag=tag, archive=archive)\n+\n+        self.namespace = namespace\n+        self.repository = repository\n+        self.api_token = api_token\n+        self.base_url = base_url\n+\n+        self.sleep_for_rate = sleep_for_rate\n+        self.min_rate_to_sleep = min_rate_to_sleep\n+        self.max_retries = max_retries\n+        self.sleep_time = sleep_time\n+        self.max_items = max_items\n+\n+        self.client = None\n+        self.exclude_user_data = False\n+        self._users = {}  # internal users cache\n+\n+    def search_fields(self, item):\n+        \"\"\"Add search fields to an item.\n+\n+        It adds the values of `metadata_id` plus the `namespace` and `repo`.\n+\n+        :param item: the item to extract the search fields values\n+\n+        :returns: a dict of search fields\n+        \"\"\"\n+        search_fields = {\n+            DEFAULT_SEARCH_FIELD: self.metadata_id(item),\n+            'namespace': self.namespace,\n+            'repo': self.repository\n+        }\n+\n+        return search_fields\n+\n+    def fetch(self, category=CATEGORY_ISSUE, from_date=DEFAULT_DATETIME, to_date=DEFAULT_LAST_DATETIME,\n+              filter_classified=False):\n+        \"\"\"Fetch the issues from the repository.\n+\n+        The method retrieves, from a Pagure repository, the issues\n+        updated since the given date.\n+\n+        :param category: the category of items to fetch\n+        :param from_date: obtain issues updated since this date\n+        :param to_date: obtain issues until a until a specific date (included)\n+        :param filter_classified: remove classified fields from the resulting items\n+\n+        :returns: a generator of issues\n+        \"\"\"\n+        self.exclude_user_data = filter_classified\n+\n+        if self.exclude_user_data:\n+            logger.info(\"Excluding user data. Personal user information won't be collected from the API.\")\n+\n+        if not from_date:\n+            from_date = DEFAULT_DATETIME\n+\n+        if not to_date:\n+            to_date = DEFAULT_LAST_DATETIME\n+\n+        from_date = from_date.strftime('%Y-%m-%d')\n+        to_date = to_date.strftime('%Y-%m-%d')\n+        kwargs = {\n+            'from_date': from_date,\n+            'to_date': to_date\n+        }\n+        items = super().fetch(category,\n+                              filter_classified=filter_classified,\n+                              **kwargs)\n+\n+        return items\n+\n+    def fetch_items(self, category, **kwargs):\n+        \"\"\"Fetch the items (issues)\n+\n+        :param category: the category of items to fetch\n+        :param kwargs: backend arguments\n+\n+        :returns: a generator of items\n+        \"\"\"\n+        from_date = kwargs['from_date']\n+        to_date = kwargs['to_date']\n+        items = self.__fetch_issues(from_date, to_date)\n+        return items\n+\n+    @classmethod\n+    def has_archiving(cls):\n+        \"\"\"Returns whether it supports archiving items on the fetch process.\n+\n+        :returns: this backend supports items archive\n+        \"\"\"\n+        return True\n+\n+    @classmethod\n+    def has_resuming(cls):\n+        \"\"\"Returns whether it supports to resume the fetch process.\n+\n+        :returns: this backend supports items resuming\n+        \"\"\"\n+        return True\n+\n+    @staticmethod\n+    def metadata_id(item):\n+        \"\"\"Extracts the identifier from a Pagure item.\"\"\"\n+\n+        return str(item['id'])\n+\n+    @staticmethod\n+    def metadata_updated_on(item):\n+        \"\"\"Extracts the update time from a Pagure item.\n+\n+        The timestamp used is extracted from 'last_updated' field.\n+        This date is converted to UNIX timestamp format. As Pagure\n+        dates are in timestamp format the conversion is straightforward.\n+\n+        :param item: item generated by the backend\n+\n+        :returns: a UNIX timestamp\n+        \"\"\"\n+        if \"forks_count\" in item:\n+            return item['fetched_on']\n+        else:\n+            ts = int(item['last_updated'])\n+            ts = datetime.fromtimestamp(ts).timestamp()\n+\n+            return ts\n+\n+    @staticmethod\n+    def metadata_category(item):\n+        \"\"\"Extracts the category from a Pagure item.\n+\n+        This backend generates one type of item which is\n+        'issue'.\n+        \"\"\"\n+\n+        category = CATEGORY_ISSUE\n+\n+        return category\n+\n+    def _init_client(self, from_archive=False):\n+        \"\"\"Init client\"\"\"\n+\n+        return PagureClient(self.namespace, self.repository, self.api_token, self.base_url,\n+                            self.sleep_for_rate, self.min_rate_to_sleep,\n+                            self.sleep_time, self.max_retries, self.max_items,\n+                            self.archive, from_archive)\n+\n+    def __fetch_issues(self, from_date, to_date):\n+        \"\"\"Fetch the issues\n+        :param from_date: starting date from which issues are fetched\n+        :param to_date: ending date till which issues are fetched\n+\n+        :returns: an issue object\n+        \"\"\"\n+\n+        issues_groups = self.client.issues(from_date=from_date)\n+\n+        for raw_issues in issues_groups:\n+            issues = json.loads(raw_issues)\n+            issues = issues['issues']\n+            for issue in issues:\n+\n+                if int(issue['last_updated']) > str_to_datetime(to_date).timestamp():\n+                    return\n+\n+                self.__init_extra_issue_fields(issue)\n+                for field in TARGET_ISSUE_FIELDS:\n+\n+                    if not issue[field]:\n+                        continue\n+\n+                    if field == 'user':\n+                        issue[field + '_data'] = self.__get_user(issue[field]['name'])\n+                    elif field == 'assignee':\n+                        issue[field + '_data'] = self.__get_issue_assignee(issue[field])\n+\n+                yield issue\n+\n+    def __get_issue_assignee(self, raw_assignee):\n+        \"\"\"Get issue assignee\"\"\"\n+        if not raw_assignee:\n+            return None\n+        assignee = self.__get_user(raw_assignee['name'])\n+\n+        return assignee\n+\n+    def __get_user(self, login):\n+        \"\"\"Get user data for the login\"\"\"\n+\n+        if not login or self.exclude_user_data:\n+            return None\n+\n+        user_raw = self.client.user(login)\n+        user = json.loads(user_raw)\n+\n+        return user\n+\n+    def __init_extra_issue_fields(self, issue):\n+        \"\"\"Add fields to an issue\"\"\"\n+\n+        issue['user_data'] = {}\n+        issue['assignee_data'] = {}\n+\n+\n+class PagureClient(HttpClient, RateLimitHandler):\n+    \"\"\"Client for retieving information from Pagure API\n+\n+    :param namespace: Pagure namespace\n+    :param repository: Pagure repository; incase the repository is within a namespace\n+    :param tokens: Pagure API token to access the API\n+    :param base_url: When no value is set the backend will be fetch the data\n+        from the Pagure public site.\n+    :param sleep_for_rate: sleep until rate limit is reset\n+    :param min_rate_to_sleep: minimun rate needed to sleep until\n+         it will be reset\n+    :param sleep_time: time to sleep in case\n+        of connection problems\n+    :param max_retries: number of max retries to a data source\n+        before raising a RetryError exception\n+    :param max_items: max number of category items (e.g., issues,\n+        pull requests) per query\n+    :param archive: collect issues already retrieved from an archive\n+    :param from_archive: it tells whether to write/read the archive\n+    \"\"\"\n+    EXTRA_STATUS_FORCELIST = [403, 500, 502, 503]\n+\n+    _users = {}  # users cache\n+\n+    def __init__(self, namespace, repository, tokens,\n+                 base_url=None, sleep_for_rate=False, min_rate_to_sleep=MIN_RATE_LIMIT,\n+                 sleep_time=DEFAULT_SLEEP_TIME, max_retries=MAX_RETRIES,\n+                 max_items=MAX_CATEGORY_ITEMS_PER_PAGE, archive=None, from_archive=False):\n+        self.namespace = namespace\n+        self.repository = repository\n+        self.tokens = tokens\n+        self.n_tokens = len(self.tokens)\n+        self.current_token = None\n+        self.last_rate_limit_checked = None\n+        self.max_items = max_items\n+\n+        base_url = PAGURE_API_URL\n+\n+        super().__init__(base_url, sleep_time=sleep_time, max_retries=max_retries,\n+                         extra_headers=self._set_extra_headers(),\n+                         extra_status_forcelist=self.EXTRA_STATUS_FORCELIST,\n+                         archive=archive, from_archive=from_archive)\n+        super().setup_rate_limit_handler(sleep_for_rate=sleep_for_rate, min_rate_to_sleep=min_rate_to_sleep)",
        "path": "perceval/backends/core/pagure.py",
        "position": null,
        "original_position": 348,
        "commit_id": "70a89aa1dccc5152ed4a52cb4c5e4e327ba3595a",
        "original_commit_id": "4ffb87bbb10fd5eaf6125f39c09c04e803a1c8c7",
        "user": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "I'm not sure about this part of the code. Do the API calls return rate limit information? I'm checking the responses and I don't find any rate limit related headers.",
        "created_at": "2020-03-05T12:44:27Z",
        "updated_at": "2020-03-08T18:21:42Z",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r388269742",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621",
        "author_association": "MEMBER",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388269742"
          },
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r388269742"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388269742/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "user_data": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false,
          "name": "valerio",
          "company": "@Bitergia ",
          "blog": "http://valeriocos.github.io/",
          "location": "Madrid, Spain",
          "email": "valcos@bitergia.com",
          "hireable": true,
          "bio": null,
          "public_repos": 57,
          "public_gists": 28,
          "followers": 34,
          "following": 5,
          "created_at": "2014-01-27T14:30:30Z",
          "updated_at": "2020-03-17T10:02:44Z",
          "organizations": [
            {
              "login": "Bitergia",
              "id": 1918070,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=",
              "url": "https://api.github.com/orgs/Bitergia",
              "repos_url": "https://api.github.com/orgs/Bitergia/repos",
              "events_url": "https://api.github.com/orgs/Bitergia/events",
              "hooks_url": "https://api.github.com/orgs/Bitergia/hooks",
              "issues_url": "https://api.github.com/orgs/Bitergia/issues",
              "members_url": "https://api.github.com/orgs/Bitergia/members{/member}",
              "public_members_url": "https://api.github.com/orgs/Bitergia/public_members{/member}",
              "avatar_url": "https://avatars3.githubusercontent.com/u/1918070?v=4",
              "description": null
            },
            {
              "login": "grimoirelab",
              "id": 16151805,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1",
              "url": "https://api.github.com/orgs/grimoirelab",
              "repos_url": "https://api.github.com/orgs/grimoirelab/repos",
              "events_url": "https://api.github.com/orgs/grimoirelab/events",
              "hooks_url": "https://api.github.com/orgs/grimoirelab/hooks",
              "issues_url": "https://api.github.com/orgs/grimoirelab/issues",
              "members_url": "https://api.github.com/orgs/grimoirelab/members{/member}",
              "public_members_url": "https://api.github.com/orgs/grimoirelab/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/16151805?v=4",
              "description": ""
            },
            {
              "login": "chaoss",
              "id": 29740296,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
              "url": "https://api.github.com/orgs/chaoss",
              "repos_url": "https://api.github.com/orgs/chaoss/repos",
              "events_url": "https://api.github.com/orgs/chaoss/events",
              "hooks_url": "https://api.github.com/orgs/chaoss/hooks",
              "issues_url": "https://api.github.com/orgs/chaoss/issues",
              "members_url": "https://api.github.com/orgs/chaoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/chaoss/public_members{/member}",
              "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
              "description": ""
            }
          ]
        },
        "reactions_data": []
      },
      {
        "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388270638",
        "pull_request_review_id": 369439055,
        "id": 388270638,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI3MDYzOA==",
        "diff_hunk": "@@ -0,0 +1,528 @@\n+# -*- coding: utf-8 -*-\n+#\n+# Copyright (C) 2015-2019 Bitergia\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program. If not, see <http://www.gnu.org/licenses/>.\n+#\n+# Authors:\n+#     Valerio Cosentino <valcos@bitergia.com>\n+#\n+\n+import json\n+import logging\n+import datetime\n+import requests\n+from grimoirelab_toolkit.datetime import (datetime_to_utc,\n+                                          datetime_utcnow,\n+                                          str_to_datetime)\n+from grimoirelab_toolkit.uris import urijoin\n+\n+from ...backend import (Backend,\n+                        BackendCommand,\n+                        BackendCommandArgumentParser,\n+                        DEFAULT_SEARCH_FIELD)\n+from ...client import HttpClient, RateLimitHandler\n+from ...utils import DEFAULT_DATETIME, DEFAULT_LAST_DATETIME\n+from datetime import datetime\n+\n+CATEGORY_ISSUE = \"issue\"\n+\n+PAGURE_URL = \"https://pagure.io/\"\n+PAGURE_API_URL = \"https://pagure.io/api/0\"\n+\n+# Range before sleeping until rate limit reset\n+MIN_RATE_LIMIT = 10\n+MAX_RATE_LIMIT = 500\n+\n+MAX_CATEGORY_ITEMS_PER_PAGE = 100\n+PER_PAGE = 100\n+\n+# Default sleep time and retries to deal with connection/server problems\n+DEFAULT_SLEEP_TIME = 1\n+MAX_RETRIES = 5\n+\n+TARGET_ISSUE_FIELDS = ['user', 'assignee']\n+\n+logger = logging.getLogger(__name__)\n+\n+\n+class Pagure(Backend):\n+    \"\"\"Pagure backend for Perceval.\n+\n+    This class allows the fetch the issues stored in Pagure\n+    repository. Note that api token is needed to perform\n+    certain API calls\n+\n+    :param namespace: Pagure namespace\n+    :param repository: Pagure repository; in case the repository is within a namespace\n+    :param api_token: Pagure API token to access the API\n+    :param base_url: when no value is set the backend will be fetch\n+     the data from the Pagure public site.\n+    :param tag: label used to mark the data\n+    :param archive: archive to store/retrieve items\n+    :param sleep_for_rate: sleep until rate limit is reset\n+    :param min_rate_to_sleep: minimum rate needed to sleep until\n+         it will be reset\n+    :param max_retries: number of max retries to a data source\n+        before raising a RetryError exception\n+    :param max_items: max number of category items (e.g., issues,\n+        pull requests) per query\n+    :param sleep_time: time to sleep in case\n+        of connection problems\n+    \"\"\"\n+    version = '0.29'\n+\n+    CATEGORIES = [CATEGORY_ISSUE]\n+    CLASSIFIED_FIELDS = [\n+        ['user_data'],\n+        ['assignee_data']\n+    ]\n+\n+    def __init__(self, namespace=None, repository=None,\n+                 api_token=None, base_url=None,\n+                 tag=None, archive=None,\n+                 sleep_for_rate=False, min_rate_to_sleep=MIN_RATE_LIMIT,\n+                 max_retries=MAX_RETRIES, sleep_time=DEFAULT_SLEEP_TIME,\n+                 max_items=MAX_CATEGORY_ITEMS_PER_PAGE):\n+        if api_token is None:\n+            api_token = []\n+        origin = base_url if base_url else PAGURE_URL\n+        origin = urijoin(origin, namespace, repository)\n+\n+        super().__init__(origin, tag=tag, archive=archive)\n+\n+        self.namespace = namespace\n+        self.repository = repository\n+        self.api_token = api_token\n+        self.base_url = base_url\n+\n+        self.sleep_for_rate = sleep_for_rate\n+        self.min_rate_to_sleep = min_rate_to_sleep\n+        self.max_retries = max_retries\n+        self.sleep_time = sleep_time\n+        self.max_items = max_items\n+\n+        self.client = None\n+        self.exclude_user_data = False\n+        self._users = {}  # internal users cache\n+\n+    def search_fields(self, item):\n+        \"\"\"Add search fields to an item.\n+\n+        It adds the values of `metadata_id` plus the `namespace` and `repo`.\n+\n+        :param item: the item to extract the search fields values\n+\n+        :returns: a dict of search fields\n+        \"\"\"\n+        search_fields = {\n+            DEFAULT_SEARCH_FIELD: self.metadata_id(item),\n+            'namespace': self.namespace,\n+            'repo': self.repository\n+        }\n+\n+        return search_fields\n+\n+    def fetch(self, category=CATEGORY_ISSUE, from_date=DEFAULT_DATETIME, to_date=DEFAULT_LAST_DATETIME,\n+              filter_classified=False):\n+        \"\"\"Fetch the issues from the repository.\n+\n+        The method retrieves, from a Pagure repository, the issues\n+        updated since the given date.\n+\n+        :param category: the category of items to fetch\n+        :param from_date: obtain issues updated since this date\n+        :param to_date: obtain issues until a until a specific date (included)\n+        :param filter_classified: remove classified fields from the resulting items\n+\n+        :returns: a generator of issues\n+        \"\"\"\n+        self.exclude_user_data = filter_classified",
        "path": "perceval/backends/core/pagure.py",
        "position": null,
        "original_position": 151,
        "commit_id": "70a89aa1dccc5152ed4a52cb4c5e4e327ba3595a",
        "original_commit_id": "4ffb87bbb10fd5eaf6125f39c09c04e803a1c8c7",
        "user": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "this can be removed if the calls to create the user_data and assignee_data attributes are removed.",
        "created_at": "2020-03-05T12:46:18Z",
        "updated_at": "2020-03-08T18:21:42Z",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r388270638",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621",
        "author_association": "MEMBER",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388270638"
          },
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r388270638"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388270638/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "user_data": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false,
          "name": "valerio",
          "company": "@Bitergia ",
          "blog": "http://valeriocos.github.io/",
          "location": "Madrid, Spain",
          "email": "valcos@bitergia.com",
          "hireable": true,
          "bio": null,
          "public_repos": 57,
          "public_gists": 28,
          "followers": 34,
          "following": 5,
          "created_at": "2014-01-27T14:30:30Z",
          "updated_at": "2020-03-17T10:02:44Z",
          "organizations": [
            {
              "login": "Bitergia",
              "id": 1918070,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=",
              "url": "https://api.github.com/orgs/Bitergia",
              "repos_url": "https://api.github.com/orgs/Bitergia/repos",
              "events_url": "https://api.github.com/orgs/Bitergia/events",
              "hooks_url": "https://api.github.com/orgs/Bitergia/hooks",
              "issues_url": "https://api.github.com/orgs/Bitergia/issues",
              "members_url": "https://api.github.com/orgs/Bitergia/members{/member}",
              "public_members_url": "https://api.github.com/orgs/Bitergia/public_members{/member}",
              "avatar_url": "https://avatars3.githubusercontent.com/u/1918070?v=4",
              "description": null
            },
            {
              "login": "grimoirelab",
              "id": 16151805,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1",
              "url": "https://api.github.com/orgs/grimoirelab",
              "repos_url": "https://api.github.com/orgs/grimoirelab/repos",
              "events_url": "https://api.github.com/orgs/grimoirelab/events",
              "hooks_url": "https://api.github.com/orgs/grimoirelab/hooks",
              "issues_url": "https://api.github.com/orgs/grimoirelab/issues",
              "members_url": "https://api.github.com/orgs/grimoirelab/members{/member}",
              "public_members_url": "https://api.github.com/orgs/grimoirelab/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/16151805?v=4",
              "description": ""
            },
            {
              "login": "chaoss",
              "id": 29740296,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
              "url": "https://api.github.com/orgs/chaoss",
              "repos_url": "https://api.github.com/orgs/chaoss/repos",
              "events_url": "https://api.github.com/orgs/chaoss/events",
              "hooks_url": "https://api.github.com/orgs/chaoss/hooks",
              "issues_url": "https://api.github.com/orgs/chaoss/issues",
              "members_url": "https://api.github.com/orgs/chaoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/chaoss/public_members{/member}",
              "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
              "description": ""
            }
          ]
        },
        "reactions_data": []
      },
      {
        "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388270743",
        "pull_request_review_id": 369439055,
        "id": 388270743,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI3MDc0Mw==",
        "diff_hunk": "@@ -0,0 +1,528 @@\n+# -*- coding: utf-8 -*-\n+#\n+# Copyright (C) 2015-2019 Bitergia\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program. If not, see <http://www.gnu.org/licenses/>.\n+#\n+# Authors:\n+#     Valerio Cosentino <valcos@bitergia.com>\n+#\n+\n+import json\n+import logging\n+import datetime\n+import requests\n+from grimoirelab_toolkit.datetime import (datetime_to_utc,\n+                                          datetime_utcnow,\n+                                          str_to_datetime)\n+from grimoirelab_toolkit.uris import urijoin\n+\n+from ...backend import (Backend,\n+                        BackendCommand,\n+                        BackendCommandArgumentParser,\n+                        DEFAULT_SEARCH_FIELD)\n+from ...client import HttpClient, RateLimitHandler\n+from ...utils import DEFAULT_DATETIME, DEFAULT_LAST_DATETIME\n+from datetime import datetime\n+\n+CATEGORY_ISSUE = \"issue\"\n+\n+PAGURE_URL = \"https://pagure.io/\"\n+PAGURE_API_URL = \"https://pagure.io/api/0\"\n+\n+# Range before sleeping until rate limit reset\n+MIN_RATE_LIMIT = 10\n+MAX_RATE_LIMIT = 500\n+\n+MAX_CATEGORY_ITEMS_PER_PAGE = 100\n+PER_PAGE = 100\n+\n+# Default sleep time and retries to deal with connection/server problems\n+DEFAULT_SLEEP_TIME = 1\n+MAX_RETRIES = 5\n+\n+TARGET_ISSUE_FIELDS = ['user', 'assignee']\n+\n+logger = logging.getLogger(__name__)\n+\n+\n+class Pagure(Backend):\n+    \"\"\"Pagure backend for Perceval.\n+\n+    This class allows the fetch the issues stored in Pagure\n+    repository. Note that api token is needed to perform\n+    certain API calls\n+\n+    :param namespace: Pagure namespace\n+    :param repository: Pagure repository; in case the repository is within a namespace\n+    :param api_token: Pagure API token to access the API\n+    :param base_url: when no value is set the backend will be fetch\n+     the data from the Pagure public site.\n+    :param tag: label used to mark the data\n+    :param archive: archive to store/retrieve items\n+    :param sleep_for_rate: sleep until rate limit is reset\n+    :param min_rate_to_sleep: minimum rate needed to sleep until\n+         it will be reset\n+    :param max_retries: number of max retries to a data source\n+        before raising a RetryError exception\n+    :param max_items: max number of category items (e.g., issues,\n+        pull requests) per query\n+    :param sleep_time: time to sleep in case\n+        of connection problems\n+    \"\"\"\n+    version = '0.29'\n+\n+    CATEGORIES = [CATEGORY_ISSUE]\n+    CLASSIFIED_FIELDS = [\n+        ['user_data'],\n+        ['assignee_data']\n+    ]\n+\n+    def __init__(self, namespace=None, repository=None,\n+                 api_token=None, base_url=None,\n+                 tag=None, archive=None,\n+                 sleep_for_rate=False, min_rate_to_sleep=MIN_RATE_LIMIT,\n+                 max_retries=MAX_RETRIES, sleep_time=DEFAULT_SLEEP_TIME,\n+                 max_items=MAX_CATEGORY_ITEMS_PER_PAGE):\n+        if api_token is None:\n+            api_token = []\n+        origin = base_url if base_url else PAGURE_URL\n+        origin = urijoin(origin, namespace, repository)\n+\n+        super().__init__(origin, tag=tag, archive=archive)\n+\n+        self.namespace = namespace\n+        self.repository = repository\n+        self.api_token = api_token\n+        self.base_url = base_url\n+\n+        self.sleep_for_rate = sleep_for_rate\n+        self.min_rate_to_sleep = min_rate_to_sleep\n+        self.max_retries = max_retries\n+        self.sleep_time = sleep_time\n+        self.max_items = max_items\n+\n+        self.client = None\n+        self.exclude_user_data = False\n+        self._users = {}  # internal users cache\n+\n+    def search_fields(self, item):\n+        \"\"\"Add search fields to an item.\n+\n+        It adds the values of `metadata_id` plus the `namespace` and `repo`.\n+\n+        :param item: the item to extract the search fields values\n+\n+        :returns: a dict of search fields\n+        \"\"\"\n+        search_fields = {\n+            DEFAULT_SEARCH_FIELD: self.metadata_id(item),\n+            'namespace': self.namespace,\n+            'repo': self.repository\n+        }\n+\n+        return search_fields\n+\n+    def fetch(self, category=CATEGORY_ISSUE, from_date=DEFAULT_DATETIME, to_date=DEFAULT_LAST_DATETIME,\n+              filter_classified=False):\n+        \"\"\"Fetch the issues from the repository.\n+\n+        The method retrieves, from a Pagure repository, the issues\n+        updated since the given date.\n+\n+        :param category: the category of items to fetch\n+        :param from_date: obtain issues updated since this date\n+        :param to_date: obtain issues until a until a specific date (included)\n+        :param filter_classified: remove classified fields from the resulting items\n+\n+        :returns: a generator of issues\n+        \"\"\"\n+        self.exclude_user_data = filter_classified\n+\n+        if self.exclude_user_data:",
        "path": "perceval/backends/core/pagure.py",
        "position": null,
        "original_position": 153,
        "commit_id": "70a89aa1dccc5152ed4a52cb4c5e4e327ba3595a",
        "original_commit_id": "4ffb87bbb10fd5eaf6125f39c09c04e803a1c8c7",
        "user": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "same as above",
        "created_at": "2020-03-05T12:46:29Z",
        "updated_at": "2020-03-08T18:21:42Z",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r388270743",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621",
        "author_association": "MEMBER",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388270743"
          },
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r388270743"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388270743/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "user_data": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false,
          "name": "valerio",
          "company": "@Bitergia ",
          "blog": "http://valeriocos.github.io/",
          "location": "Madrid, Spain",
          "email": "valcos@bitergia.com",
          "hireable": true,
          "bio": null,
          "public_repos": 57,
          "public_gists": 28,
          "followers": 34,
          "following": 5,
          "created_at": "2014-01-27T14:30:30Z",
          "updated_at": "2020-03-17T10:02:44Z",
          "organizations": [
            {
              "login": "Bitergia",
              "id": 1918070,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=",
              "url": "https://api.github.com/orgs/Bitergia",
              "repos_url": "https://api.github.com/orgs/Bitergia/repos",
              "events_url": "https://api.github.com/orgs/Bitergia/events",
              "hooks_url": "https://api.github.com/orgs/Bitergia/hooks",
              "issues_url": "https://api.github.com/orgs/Bitergia/issues",
              "members_url": "https://api.github.com/orgs/Bitergia/members{/member}",
              "public_members_url": "https://api.github.com/orgs/Bitergia/public_members{/member}",
              "avatar_url": "https://avatars3.githubusercontent.com/u/1918070?v=4",
              "description": null
            },
            {
              "login": "grimoirelab",
              "id": 16151805,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1",
              "url": "https://api.github.com/orgs/grimoirelab",
              "repos_url": "https://api.github.com/orgs/grimoirelab/repos",
              "events_url": "https://api.github.com/orgs/grimoirelab/events",
              "hooks_url": "https://api.github.com/orgs/grimoirelab/hooks",
              "issues_url": "https://api.github.com/orgs/grimoirelab/issues",
              "members_url": "https://api.github.com/orgs/grimoirelab/members{/member}",
              "public_members_url": "https://api.github.com/orgs/grimoirelab/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/16151805?v=4",
              "description": ""
            },
            {
              "login": "chaoss",
              "id": 29740296,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
              "url": "https://api.github.com/orgs/chaoss",
              "repos_url": "https://api.github.com/orgs/chaoss/repos",
              "events_url": "https://api.github.com/orgs/chaoss/events",
              "hooks_url": "https://api.github.com/orgs/chaoss/hooks",
              "issues_url": "https://api.github.com/orgs/chaoss/issues",
              "members_url": "https://api.github.com/orgs/chaoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/chaoss/public_members{/member}",
              "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
              "description": ""
            }
          ]
        },
        "reactions_data": []
      },
      {
        "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388309127",
        "pull_request_review_id": 369439055,
        "id": 388309127,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMwOTEyNw==",
        "diff_hunk": "@@ -0,0 +1,528 @@\n+# -*- coding: utf-8 -*-\n+#\n+# Copyright (C) 2015-2019 Bitergia\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program. If not, see <http://www.gnu.org/licenses/>.\n+#\n+# Authors:\n+#     Valerio Cosentino <valcos@bitergia.com>\n+#\n+\n+import json\n+import logging\n+import datetime\n+import requests\n+from grimoirelab_toolkit.datetime import (datetime_to_utc,\n+                                          datetime_utcnow,\n+                                          str_to_datetime)\n+from grimoirelab_toolkit.uris import urijoin\n+\n+from ...backend import (Backend,\n+                        BackendCommand,\n+                        BackendCommandArgumentParser,\n+                        DEFAULT_SEARCH_FIELD)\n+from ...client import HttpClient, RateLimitHandler\n+from ...utils import DEFAULT_DATETIME, DEFAULT_LAST_DATETIME\n+from datetime import datetime\n+\n+CATEGORY_ISSUE = \"issue\"\n+\n+PAGURE_URL = \"https://pagure.io/\"\n+PAGURE_API_URL = \"https://pagure.io/api/0\"\n+\n+# Range before sleeping until rate limit reset\n+MIN_RATE_LIMIT = 10\n+MAX_RATE_LIMIT = 500\n+\n+MAX_CATEGORY_ITEMS_PER_PAGE = 100\n+PER_PAGE = 100\n+\n+# Default sleep time and retries to deal with connection/server problems\n+DEFAULT_SLEEP_TIME = 1\n+MAX_RETRIES = 5\n+\n+TARGET_ISSUE_FIELDS = ['user', 'assignee']\n+\n+logger = logging.getLogger(__name__)\n+\n+\n+class Pagure(Backend):\n+    \"\"\"Pagure backend for Perceval.\n+\n+    This class allows the fetch the issues stored in Pagure\n+    repository. Note that api token is needed to perform\n+    certain API calls\n+\n+    :param namespace: Pagure namespace\n+    :param repository: Pagure repository; in case the repository is within a namespace\n+    :param api_token: Pagure API token to access the API\n+    :param base_url: when no value is set the backend will be fetch\n+     the data from the Pagure public site.\n+    :param tag: label used to mark the data\n+    :param archive: archive to store/retrieve items\n+    :param sleep_for_rate: sleep until rate limit is reset\n+    :param min_rate_to_sleep: minimum rate needed to sleep until\n+         it will be reset\n+    :param max_retries: number of max retries to a data source\n+        before raising a RetryError exception\n+    :param max_items: max number of category items (e.g., issues,\n+        pull requests) per query\n+    :param sleep_time: time to sleep in case\n+        of connection problems\n+    \"\"\"\n+    version = '0.29'\n+\n+    CATEGORIES = [CATEGORY_ISSUE]\n+    CLASSIFIED_FIELDS = [\n+        ['user_data'],\n+        ['assignee_data']\n+    ]\n+\n+    def __init__(self, namespace=None, repository=None,\n+                 api_token=None, base_url=None,\n+                 tag=None, archive=None,\n+                 sleep_for_rate=False, min_rate_to_sleep=MIN_RATE_LIMIT,\n+                 max_retries=MAX_RETRIES, sleep_time=DEFAULT_SLEEP_TIME,\n+                 max_items=MAX_CATEGORY_ITEMS_PER_PAGE):\n+        if api_token is None:\n+            api_token = []\n+        origin = base_url if base_url else PAGURE_URL\n+        origin = urijoin(origin, namespace, repository)\n+\n+        super().__init__(origin, tag=tag, archive=archive)\n+\n+        self.namespace = namespace\n+        self.repository = repository\n+        self.api_token = api_token\n+        self.base_url = base_url\n+\n+        self.sleep_for_rate = sleep_for_rate\n+        self.min_rate_to_sleep = min_rate_to_sleep\n+        self.max_retries = max_retries\n+        self.sleep_time = sleep_time\n+        self.max_items = max_items\n+\n+        self.client = None\n+        self.exclude_user_data = False\n+        self._users = {}  # internal users cache\n+\n+    def search_fields(self, item):\n+        \"\"\"Add search fields to an item.\n+\n+        It adds the values of `metadata_id` plus the `namespace` and `repo`.\n+\n+        :param item: the item to extract the search fields values\n+\n+        :returns: a dict of search fields\n+        \"\"\"\n+        search_fields = {\n+            DEFAULT_SEARCH_FIELD: self.metadata_id(item),\n+            'namespace': self.namespace,\n+            'repo': self.repository\n+        }\n+\n+        return search_fields\n+\n+    def fetch(self, category=CATEGORY_ISSUE, from_date=DEFAULT_DATETIME, to_date=DEFAULT_LAST_DATETIME,\n+              filter_classified=False):\n+        \"\"\"Fetch the issues from the repository.\n+\n+        The method retrieves, from a Pagure repository, the issues\n+        updated since the given date.\n+\n+        :param category: the category of items to fetch\n+        :param from_date: obtain issues updated since this date\n+        :param to_date: obtain issues until a until a specific date (included)\n+        :param filter_classified: remove classified fields from the resulting items\n+\n+        :returns: a generator of issues\n+        \"\"\"\n+        self.exclude_user_data = filter_classified\n+\n+        if self.exclude_user_data:\n+            logger.info(\"Excluding user data. Personal user information won't be collected from the API.\")\n+\n+        if not from_date:\n+            from_date = DEFAULT_DATETIME\n+\n+        if not to_date:\n+            to_date = DEFAULT_LAST_DATETIME\n+\n+        from_date = from_date.strftime('%Y-%m-%d')\n+        to_date = to_date.strftime('%Y-%m-%d')\n+        kwargs = {\n+            'from_date': from_date,\n+            'to_date': to_date\n+        }\n+        items = super().fetch(category,\n+                              filter_classified=filter_classified,\n+                              **kwargs)\n+\n+        return items\n+\n+    def fetch_items(self, category, **kwargs):\n+        \"\"\"Fetch the items (issues)\n+\n+        :param category: the category of items to fetch\n+        :param kwargs: backend arguments\n+\n+        :returns: a generator of items\n+        \"\"\"\n+        from_date = kwargs['from_date']\n+        to_date = kwargs['to_date']\n+        items = self.__fetch_issues(from_date, to_date)\n+        return items\n+\n+    @classmethod\n+    def has_archiving(cls):\n+        \"\"\"Returns whether it supports archiving items on the fetch process.\n+\n+        :returns: this backend supports items archive\n+        \"\"\"\n+        return True\n+\n+    @classmethod\n+    def has_resuming(cls):\n+        \"\"\"Returns whether it supports to resume the fetch process.\n+\n+        :returns: this backend supports items resuming\n+        \"\"\"\n+        return True\n+\n+    @staticmethod\n+    def metadata_id(item):\n+        \"\"\"Extracts the identifier from a Pagure item.\"\"\"\n+\n+        return str(item['id'])\n+\n+    @staticmethod\n+    def metadata_updated_on(item):\n+        \"\"\"Extracts the update time from a Pagure item.\n+\n+        The timestamp used is extracted from 'last_updated' field.\n+        This date is converted to UNIX timestamp format. As Pagure\n+        dates are in timestamp format the conversion is straightforward.\n+\n+        :param item: item generated by the backend\n+\n+        :returns: a UNIX timestamp\n+        \"\"\"\n+        if \"forks_count\" in item:\n+            return item['fetched_on']\n+        else:\n+            ts = int(item['last_updated'])\n+            ts = datetime.fromtimestamp(ts).timestamp()\n+\n+            return ts\n+\n+    @staticmethod\n+    def metadata_category(item):\n+        \"\"\"Extracts the category from a Pagure item.\n+\n+        This backend generates one type of item which is\n+        'issue'.\n+        \"\"\"\n+\n+        category = CATEGORY_ISSUE\n+\n+        return category\n+\n+    def _init_client(self, from_archive=False):\n+        \"\"\"Init client\"\"\"\n+\n+        return PagureClient(self.namespace, self.repository, self.api_token, self.base_url,\n+                            self.sleep_for_rate, self.min_rate_to_sleep,\n+                            self.sleep_time, self.max_retries, self.max_items,\n+                            self.archive, from_archive)\n+\n+    def __fetch_issues(self, from_date, to_date):\n+        \"\"\"Fetch the issues\n+        :param from_date: starting date from which issues are fetched\n+        :param to_date: ending date till which issues are fetched\n+\n+        :returns: an issue object\n+        \"\"\"\n+\n+        issues_groups = self.client.issues(from_date=from_date)\n+\n+        for raw_issues in issues_groups:\n+            issues = json.loads(raw_issues)\n+            issues = issues['issues']\n+            for issue in issues:\n+\n+                if int(issue['last_updated']) > str_to_datetime(to_date).timestamp():\n+                    return\n+\n+                self.__init_extra_issue_fields(issue)\n+                for field in TARGET_ISSUE_FIELDS:\n+\n+                    if not issue[field]:\n+                        continue\n+\n+                    if field == 'user':\n+                        issue[field + '_data'] = self.__get_user(issue[field]['name'])\n+                    elif field == 'assignee':\n+                        issue[field + '_data'] = self.__get_issue_assignee(issue[field])\n+\n+                yield issue\n+\n+    def __get_issue_assignee(self, raw_assignee):\n+        \"\"\"Get issue assignee\"\"\"\n+        if not raw_assignee:\n+            return None\n+        assignee = self.__get_user(raw_assignee['name'])\n+\n+        return assignee\n+\n+    def __get_user(self, login):\n+        \"\"\"Get user data for the login\"\"\"\n+\n+        if not login or self.exclude_user_data:\n+            return None\n+\n+        user_raw = self.client.user(login)\n+        user = json.loads(user_raw)\n+\n+        return user\n+\n+    def __init_extra_issue_fields(self, issue):\n+        \"\"\"Add fields to an issue\"\"\"\n+\n+        issue['user_data'] = {}\n+        issue['assignee_data'] = {}\n+\n+\n+class PagureClient(HttpClient, RateLimitHandler):\n+    \"\"\"Client for retieving information from Pagure API\n+\n+    :param namespace: Pagure namespace\n+    :param repository: Pagure repository; incase the repository is within a namespace\n+    :param tokens: Pagure API token to access the API\n+    :param base_url: When no value is set the backend will be fetch the data\n+        from the Pagure public site.\n+    :param sleep_for_rate: sleep until rate limit is reset\n+    :param min_rate_to_sleep: minimun rate needed to sleep until\n+         it will be reset\n+    :param sleep_time: time to sleep in case\n+        of connection problems\n+    :param max_retries: number of max retries to a data source\n+        before raising a RetryError exception\n+    :param max_items: max number of category items (e.g., issues,\n+        pull requests) per query\n+    :param archive: collect issues already retrieved from an archive\n+    :param from_archive: it tells whether to write/read the archive\n+    \"\"\"\n+    EXTRA_STATUS_FORCELIST = [403, 500, 502, 503]\n+\n+    _users = {}  # users cache\n+\n+    def __init__(self, namespace, repository, tokens,\n+                 base_url=None, sleep_for_rate=False, min_rate_to_sleep=MIN_RATE_LIMIT,\n+                 sleep_time=DEFAULT_SLEEP_TIME, max_retries=MAX_RETRIES,\n+                 max_items=MAX_CATEGORY_ITEMS_PER_PAGE, archive=None, from_archive=False):\n+        self.namespace = namespace\n+        self.repository = repository\n+        self.tokens = tokens\n+        self.n_tokens = len(self.tokens)\n+        self.current_token = None\n+        self.last_rate_limit_checked = None\n+        self.max_items = max_items\n+\n+        base_url = PAGURE_API_URL\n+\n+        super().__init__(base_url, sleep_time=sleep_time, max_retries=max_retries,\n+                         extra_headers=self._set_extra_headers(),\n+                         extra_status_forcelist=self.EXTRA_STATUS_FORCELIST,\n+                         archive=archive, from_archive=from_archive)\n+        super().setup_rate_limit_handler(sleep_for_rate=sleep_for_rate, min_rate_to_sleep=min_rate_to_sleep)\n+\n+    def calculate_time_to_reset(self):\n+        \"\"\"Calculate the seconds to reset the token requests, by obtaining the different\n+        between the current date and the next date when the token is fully regenerated.\n+        \"\"\"\n+\n+        time_to_reset = self.rate_limit_reset_ts - (datetime_utcnow().replace(microsecond=0).timestamp() + 1)\n+        time_to_reset = 0 if time_to_reset < 0 else time_to_reset\n+\n+        return time_to_reset\n+\n+    def issues(self, from_date=None):\n+        \"\"\"Fetch the issues from the repository.\n+\n+        The method retrieves, from a Pagure repository, the issues\n+        updated since the given date.\n+\n+        :param from_date: obtain issues updated since this date\n+\n+        :returns: a generator of issues\n+        \"\"\"\n+        payload = {\n+            'status': 'all',\n+            'per_page': self.max_items,\n+            'order': 'asc',\n+        }\n+\n+        if from_date:\n+            payload['since'] = from_date\n+\n+        path = urijoin(\"issues\")\n+        return self.fetch_items(path, payload)\n+\n+    def user(self, name):\n+        \"\"\"Get the user information and update the user cache\n+\n+        :param name: username of the user\n+\n+        :returns: a user object\n+        \"\"\"\n+        user = None\n+\n+        if name in self._users:\n+            return self._users[name]\n+\n+        url_user = urijoin(self.base_url, 'user', name)\n+\n+        logger.debug(\"Getting info for %s\" % url_user)\n+\n+        r = self.fetch(url_user)\n+        user = r.text\n+        self._users[name] = user\n+\n+        return user\n+\n+    def fetch(self, url, payload=None, headers=None, method=HttpClient.GET, stream=False, auth=True):\n+        \"\"\"Fetch the data from a given URL.\n+\n+        :param url: link to the resource\n+        :param payload: payload of the request\n+        :param headers: headers of the request\n+        :param method: type of request call (GET or POST)\n+        :param stream: defer downloading the response body until the response content is available\n+        :param auth: auth of the request\n+\n+        :returns a response object\n+        \"\"\"\n+        if not self.from_archive:\n+            self.sleep_for_rate_limit()\n+\n+        # In case the issue tracker is disabled for a repository\n+        # an HTTP 404 response is returned\n+        try:\n+            response = super().fetch(url, payload, headers, method, stream, auth)\n+        except requests.exceptions.HTTPError:",
        "path": "perceval/backends/core/pagure.py",
        "position": null,
        "original_position": 423,
        "commit_id": "70a89aa1dccc5152ed4a52cb4c5e4e327ba3595a",
        "original_commit_id": "4ffb87bbb10fd5eaf6125f39c09c04e803a1c8c7",
        "user": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "I would change this code with the code below. The reason is to avoid modifying the standard execution of perceval. The test for the code below should also easier to write.\r\n```\r\n        try:\r\n            response = super().fetch(url, payload, headers, method=method, stream=stream, auth=auth)\r\n        except requests.exceptions.HTTPError as error:\r\n            if error.response.status_code == 404 and error.response.reason == 'NOT FOUND':\r\n                logger.warning(\"...\")\r\n                return None\r\n            else:\r\n                raise error\r\n```",
        "created_at": "2020-03-05T13:58:36Z",
        "updated_at": "2020-03-08T18:21:42Z",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r388309127",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621",
        "author_association": "MEMBER",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388309127"
          },
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r388309127"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388309127/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "user_data": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false,
          "name": "valerio",
          "company": "@Bitergia ",
          "blog": "http://valeriocos.github.io/",
          "location": "Madrid, Spain",
          "email": "valcos@bitergia.com",
          "hireable": true,
          "bio": null,
          "public_repos": 57,
          "public_gists": 28,
          "followers": 34,
          "following": 5,
          "created_at": "2014-01-27T14:30:30Z",
          "updated_at": "2020-03-17T10:02:44Z",
          "organizations": [
            {
              "login": "Bitergia",
              "id": 1918070,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=",
              "url": "https://api.github.com/orgs/Bitergia",
              "repos_url": "https://api.github.com/orgs/Bitergia/repos",
              "events_url": "https://api.github.com/orgs/Bitergia/events",
              "hooks_url": "https://api.github.com/orgs/Bitergia/hooks",
              "issues_url": "https://api.github.com/orgs/Bitergia/issues",
              "members_url": "https://api.github.com/orgs/Bitergia/members{/member}",
              "public_members_url": "https://api.github.com/orgs/Bitergia/public_members{/member}",
              "avatar_url": "https://avatars3.githubusercontent.com/u/1918070?v=4",
              "description": null
            },
            {
              "login": "grimoirelab",
              "id": 16151805,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1",
              "url": "https://api.github.com/orgs/grimoirelab",
              "repos_url": "https://api.github.com/orgs/grimoirelab/repos",
              "events_url": "https://api.github.com/orgs/grimoirelab/events",
              "hooks_url": "https://api.github.com/orgs/grimoirelab/hooks",
              "issues_url": "https://api.github.com/orgs/grimoirelab/issues",
              "members_url": "https://api.github.com/orgs/grimoirelab/members{/member}",
              "public_members_url": "https://api.github.com/orgs/grimoirelab/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/16151805?v=4",
              "description": ""
            },
            {
              "login": "chaoss",
              "id": 29740296,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
              "url": "https://api.github.com/orgs/chaoss",
              "repos_url": "https://api.github.com/orgs/chaoss/repos",
              "events_url": "https://api.github.com/orgs/chaoss/events",
              "hooks_url": "https://api.github.com/orgs/chaoss/hooks",
              "issues_url": "https://api.github.com/orgs/chaoss/issues",
              "members_url": "https://api.github.com/orgs/chaoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/chaoss/public_members{/member}",
              "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
              "description": ""
            }
          ]
        },
        "reactions_data": []
      },
      {
        "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388310087",
        "pull_request_review_id": 369439055,
        "id": 388310087,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMxMDA4Nw==",
        "diff_hunk": "@@ -0,0 +1,528 @@\n+# -*- coding: utf-8 -*-\n+#\n+# Copyright (C) 2015-2019 Bitergia\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program. If not, see <http://www.gnu.org/licenses/>.\n+#\n+# Authors:\n+#     Valerio Cosentino <valcos@bitergia.com>\n+#\n+\n+import json\n+import logging\n+import datetime\n+import requests\n+from grimoirelab_toolkit.datetime import (datetime_to_utc,\n+                                          datetime_utcnow,\n+                                          str_to_datetime)\n+from grimoirelab_toolkit.uris import urijoin\n+\n+from ...backend import (Backend,\n+                        BackendCommand,\n+                        BackendCommandArgumentParser,\n+                        DEFAULT_SEARCH_FIELD)\n+from ...client import HttpClient, RateLimitHandler\n+from ...utils import DEFAULT_DATETIME, DEFAULT_LAST_DATETIME\n+from datetime import datetime\n+\n+CATEGORY_ISSUE = \"issue\"\n+\n+PAGURE_URL = \"https://pagure.io/\"\n+PAGURE_API_URL = \"https://pagure.io/api/0\"\n+\n+# Range before sleeping until rate limit reset\n+MIN_RATE_LIMIT = 10\n+MAX_RATE_LIMIT = 500\n+\n+MAX_CATEGORY_ITEMS_PER_PAGE = 100\n+PER_PAGE = 100\n+\n+# Default sleep time and retries to deal with connection/server problems\n+DEFAULT_SLEEP_TIME = 1\n+MAX_RETRIES = 5\n+\n+TARGET_ISSUE_FIELDS = ['user', 'assignee']\n+\n+logger = logging.getLogger(__name__)\n+\n+\n+class Pagure(Backend):\n+    \"\"\"Pagure backend for Perceval.\n+\n+    This class allows the fetch the issues stored in Pagure\n+    repository. Note that api token is needed to perform\n+    certain API calls\n+\n+    :param namespace: Pagure namespace\n+    :param repository: Pagure repository; in case the repository is within a namespace\n+    :param api_token: Pagure API token to access the API\n+    :param base_url: when no value is set the backend will be fetch\n+     the data from the Pagure public site.\n+    :param tag: label used to mark the data\n+    :param archive: archive to store/retrieve items\n+    :param sleep_for_rate: sleep until rate limit is reset\n+    :param min_rate_to_sleep: minimum rate needed to sleep until\n+         it will be reset\n+    :param max_retries: number of max retries to a data source\n+        before raising a RetryError exception\n+    :param max_items: max number of category items (e.g., issues,\n+        pull requests) per query\n+    :param sleep_time: time to sleep in case\n+        of connection problems\n+    \"\"\"\n+    version = '0.29'\n+\n+    CATEGORIES = [CATEGORY_ISSUE]\n+    CLASSIFIED_FIELDS = [\n+        ['user_data'],\n+        ['assignee_data']\n+    ]\n+\n+    def __init__(self, namespace=None, repository=None,\n+                 api_token=None, base_url=None,\n+                 tag=None, archive=None,\n+                 sleep_for_rate=False, min_rate_to_sleep=MIN_RATE_LIMIT,\n+                 max_retries=MAX_RETRIES, sleep_time=DEFAULT_SLEEP_TIME,\n+                 max_items=MAX_CATEGORY_ITEMS_PER_PAGE):\n+        if api_token is None:\n+            api_token = []\n+        origin = base_url if base_url else PAGURE_URL\n+        origin = urijoin(origin, namespace, repository)\n+\n+        super().__init__(origin, tag=tag, archive=archive)\n+\n+        self.namespace = namespace\n+        self.repository = repository\n+        self.api_token = api_token\n+        self.base_url = base_url\n+\n+        self.sleep_for_rate = sleep_for_rate\n+        self.min_rate_to_sleep = min_rate_to_sleep\n+        self.max_retries = max_retries\n+        self.sleep_time = sleep_time\n+        self.max_items = max_items\n+\n+        self.client = None\n+        self.exclude_user_data = False\n+        self._users = {}  # internal users cache\n+\n+    def search_fields(self, item):\n+        \"\"\"Add search fields to an item.\n+\n+        It adds the values of `metadata_id` plus the `namespace` and `repo`.\n+\n+        :param item: the item to extract the search fields values\n+\n+        :returns: a dict of search fields\n+        \"\"\"\n+        search_fields = {\n+            DEFAULT_SEARCH_FIELD: self.metadata_id(item),\n+            'namespace': self.namespace,\n+            'repo': self.repository\n+        }\n+\n+        return search_fields\n+\n+    def fetch(self, category=CATEGORY_ISSUE, from_date=DEFAULT_DATETIME, to_date=DEFAULT_LAST_DATETIME,\n+              filter_classified=False):\n+        \"\"\"Fetch the issues from the repository.\n+\n+        The method retrieves, from a Pagure repository, the issues\n+        updated since the given date.\n+\n+        :param category: the category of items to fetch\n+        :param from_date: obtain issues updated since this date\n+        :param to_date: obtain issues until a until a specific date (included)\n+        :param filter_classified: remove classified fields from the resulting items\n+\n+        :returns: a generator of issues\n+        \"\"\"\n+        self.exclude_user_data = filter_classified\n+\n+        if self.exclude_user_data:\n+            logger.info(\"Excluding user data. Personal user information won't be collected from the API.\")\n+\n+        if not from_date:\n+            from_date = DEFAULT_DATETIME\n+\n+        if not to_date:\n+            to_date = DEFAULT_LAST_DATETIME\n+\n+        from_date = from_date.strftime('%Y-%m-%d')\n+        to_date = to_date.strftime('%Y-%m-%d')\n+        kwargs = {\n+            'from_date': from_date,\n+            'to_date': to_date\n+        }\n+        items = super().fetch(category,\n+                              filter_classified=filter_classified,\n+                              **kwargs)\n+\n+        return items\n+\n+    def fetch_items(self, category, **kwargs):\n+        \"\"\"Fetch the items (issues)\n+\n+        :param category: the category of items to fetch\n+        :param kwargs: backend arguments\n+\n+        :returns: a generator of items\n+        \"\"\"\n+        from_date = kwargs['from_date']\n+        to_date = kwargs['to_date']\n+        items = self.__fetch_issues(from_date, to_date)\n+        return items\n+\n+    @classmethod\n+    def has_archiving(cls):\n+        \"\"\"Returns whether it supports archiving items on the fetch process.\n+\n+        :returns: this backend supports items archive\n+        \"\"\"\n+        return True\n+\n+    @classmethod\n+    def has_resuming(cls):\n+        \"\"\"Returns whether it supports to resume the fetch process.\n+\n+        :returns: this backend supports items resuming\n+        \"\"\"\n+        return True\n+\n+    @staticmethod\n+    def metadata_id(item):\n+        \"\"\"Extracts the identifier from a Pagure item.\"\"\"\n+\n+        return str(item['id'])\n+\n+    @staticmethod\n+    def metadata_updated_on(item):\n+        \"\"\"Extracts the update time from a Pagure item.\n+\n+        The timestamp used is extracted from 'last_updated' field.\n+        This date is converted to UNIX timestamp format. As Pagure\n+        dates are in timestamp format the conversion is straightforward.\n+\n+        :param item: item generated by the backend\n+\n+        :returns: a UNIX timestamp\n+        \"\"\"\n+        if \"forks_count\" in item:\n+            return item['fetched_on']\n+        else:\n+            ts = int(item['last_updated'])\n+            ts = datetime.fromtimestamp(ts).timestamp()\n+\n+            return ts\n+\n+    @staticmethod\n+    def metadata_category(item):\n+        \"\"\"Extracts the category from a Pagure item.\n+\n+        This backend generates one type of item which is\n+        'issue'.\n+        \"\"\"\n+\n+        category = CATEGORY_ISSUE\n+\n+        return category\n+\n+    def _init_client(self, from_archive=False):\n+        \"\"\"Init client\"\"\"\n+\n+        return PagureClient(self.namespace, self.repository, self.api_token, self.base_url,\n+                            self.sleep_for_rate, self.min_rate_to_sleep,\n+                            self.sleep_time, self.max_retries, self.max_items,\n+                            self.archive, from_archive)\n+\n+    def __fetch_issues(self, from_date, to_date):\n+        \"\"\"Fetch the issues\n+        :param from_date: starting date from which issues are fetched\n+        :param to_date: ending date till which issues are fetched\n+\n+        :returns: an issue object\n+        \"\"\"\n+\n+        issues_groups = self.client.issues(from_date=from_date)\n+\n+        for raw_issues in issues_groups:\n+            issues = json.loads(raw_issues)\n+            issues = issues['issues']\n+            for issue in issues:\n+\n+                if int(issue['last_updated']) > str_to_datetime(to_date).timestamp():\n+                    return\n+\n+                self.__init_extra_issue_fields(issue)\n+                for field in TARGET_ISSUE_FIELDS:\n+\n+                    if not issue[field]:\n+                        continue\n+\n+                    if field == 'user':\n+                        issue[field + '_data'] = self.__get_user(issue[field]['name'])\n+                    elif field == 'assignee':\n+                        issue[field + '_data'] = self.__get_issue_assignee(issue[field])\n+\n+                yield issue\n+\n+    def __get_issue_assignee(self, raw_assignee):\n+        \"\"\"Get issue assignee\"\"\"\n+        if not raw_assignee:\n+            return None\n+        assignee = self.__get_user(raw_assignee['name'])\n+\n+        return assignee\n+\n+    def __get_user(self, login):\n+        \"\"\"Get user data for the login\"\"\"\n+\n+        if not login or self.exclude_user_data:\n+            return None\n+\n+        user_raw = self.client.user(login)\n+        user = json.loads(user_raw)\n+\n+        return user\n+\n+    def __init_extra_issue_fields(self, issue):\n+        \"\"\"Add fields to an issue\"\"\"\n+\n+        issue['user_data'] = {}\n+        issue['assignee_data'] = {}\n+\n+\n+class PagureClient(HttpClient, RateLimitHandler):\n+    \"\"\"Client for retieving information from Pagure API\n+\n+    :param namespace: Pagure namespace\n+    :param repository: Pagure repository; incase the repository is within a namespace\n+    :param tokens: Pagure API token to access the API\n+    :param base_url: When no value is set the backend will be fetch the data\n+        from the Pagure public site.\n+    :param sleep_for_rate: sleep until rate limit is reset\n+    :param min_rate_to_sleep: minimun rate needed to sleep until\n+         it will be reset\n+    :param sleep_time: time to sleep in case\n+        of connection problems\n+    :param max_retries: number of max retries to a data source\n+        before raising a RetryError exception\n+    :param max_items: max number of category items (e.g., issues,\n+        pull requests) per query\n+    :param archive: collect issues already retrieved from an archive\n+    :param from_archive: it tells whether to write/read the archive\n+    \"\"\"\n+    EXTRA_STATUS_FORCELIST = [403, 500, 502, 503]\n+\n+    _users = {}  # users cache\n+\n+    def __init__(self, namespace, repository, tokens,\n+                 base_url=None, sleep_for_rate=False, min_rate_to_sleep=MIN_RATE_LIMIT,\n+                 sleep_time=DEFAULT_SLEEP_TIME, max_retries=MAX_RETRIES,\n+                 max_items=MAX_CATEGORY_ITEMS_PER_PAGE, archive=None, from_archive=False):\n+        self.namespace = namespace\n+        self.repository = repository\n+        self.tokens = tokens\n+        self.n_tokens = len(self.tokens)\n+        self.current_token = None\n+        self.last_rate_limit_checked = None\n+        self.max_items = max_items\n+\n+        base_url = PAGURE_API_URL\n+\n+        super().__init__(base_url, sleep_time=sleep_time, max_retries=max_retries,\n+                         extra_headers=self._set_extra_headers(),\n+                         extra_status_forcelist=self.EXTRA_STATUS_FORCELIST,\n+                         archive=archive, from_archive=from_archive)\n+        super().setup_rate_limit_handler(sleep_for_rate=sleep_for_rate, min_rate_to_sleep=min_rate_to_sleep)\n+\n+    def calculate_time_to_reset(self):\n+        \"\"\"Calculate the seconds to reset the token requests, by obtaining the different\n+        between the current date and the next date when the token is fully regenerated.\n+        \"\"\"\n+\n+        time_to_reset = self.rate_limit_reset_ts - (datetime_utcnow().replace(microsecond=0).timestamp() + 1)\n+        time_to_reset = 0 if time_to_reset < 0 else time_to_reset\n+\n+        return time_to_reset\n+\n+    def issues(self, from_date=None):\n+        \"\"\"Fetch the issues from the repository.\n+\n+        The method retrieves, from a Pagure repository, the issues\n+        updated since the given date.\n+\n+        :param from_date: obtain issues updated since this date\n+\n+        :returns: a generator of issues\n+        \"\"\"\n+        payload = {\n+            'status': 'all',\n+            'per_page': self.max_items,\n+            'order': 'asc',\n+        }\n+\n+        if from_date:\n+            payload['since'] = from_date\n+\n+        path = urijoin(\"issues\")\n+        return self.fetch_items(path, payload)\n+\n+    def user(self, name):\n+        \"\"\"Get the user information and update the user cache\n+\n+        :param name: username of the user\n+\n+        :returns: a user object\n+        \"\"\"\n+        user = None\n+\n+        if name in self._users:\n+            return self._users[name]\n+\n+        url_user = urijoin(self.base_url, 'user', name)\n+\n+        logger.debug(\"Getting info for %s\" % url_user)\n+\n+        r = self.fetch(url_user)\n+        user = r.text\n+        self._users[name] = user\n+\n+        return user\n+\n+    def fetch(self, url, payload=None, headers=None, method=HttpClient.GET, stream=False, auth=True):\n+        \"\"\"Fetch the data from a given URL.\n+\n+        :param url: link to the resource\n+        :param payload: payload of the request\n+        :param headers: headers of the request\n+        :param method: type of request call (GET or POST)\n+        :param stream: defer downloading the response body until the response content is available\n+        :param auth: auth of the request\n+\n+        :returns a response object\n+        \"\"\"\n+        if not self.from_archive:\n+            self.sleep_for_rate_limit()\n+\n+        # In case the issue tracker is disabled for a repository\n+        # an HTTP 404 response is returned\n+        try:\n+            response = super().fetch(url, payload, headers, method, stream, auth)\n+        except requests.exceptions.HTTPError:\n+            print(\"The issue tracker is disabled please enable the feature for the repository\")\n+            exit(1)\n+            return\n+\n+        if not self.from_archive:\n+            self.update_rate_limit(response)\n+\n+        return response\n+\n+    def fetch_items(self, path, payload):\n+        \"\"\"Return the items from Pagure API using links pagination\n+\n+        :param path: Path from which the item is to be fetched\n+        :param payload: Payload to be added to the request\n+\n+        :returns: an item object\n+        \"\"\"\n+\n+        page = 0  # current page\n+        last_page = None  # last page\n+        if self.namespace:  # if project is under a namspace\n+            url_next = urijoin(self.base_url, self.namespace, self.repository, path)\n+        else:  # if project is created without a namespace\n+            url_next = urijoin(self.base_url, self.repository, path)\n+        logger.debug(\"Get Pagure paginated items from \" + url_next)\n+\n+        response = self.fetch(url_next, payload=payload)",
        "path": "perceval/backends/core/pagure.py",
        "position": 319,
        "original_position": 450,
        "commit_id": "70a89aa1dccc5152ed4a52cb4c5e4e327ba3595a",
        "original_commit_id": "4ffb87bbb10fd5eaf6125f39c09c04e803a1c8c7",
        "user": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "after this line, the following code should be added:\r\n```\r\n        if not response:\r\n            return []\r\n```\r\n\r\nThis change is needed due to the comment at https://github.com/chaoss/grimoirelab-perceval/pull/621/files#diff-23aec446f77422330c2dcce453fbc909R423",
        "created_at": "2020-03-05T14:00:07Z",
        "updated_at": "2020-03-08T18:21:42Z",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r388310087",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621",
        "author_association": "MEMBER",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388310087"
          },
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r388310087"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388310087/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "user_data": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false,
          "name": "valerio",
          "company": "@Bitergia ",
          "blog": "http://valeriocos.github.io/",
          "location": "Madrid, Spain",
          "email": "valcos@bitergia.com",
          "hireable": true,
          "bio": null,
          "public_repos": 57,
          "public_gists": 28,
          "followers": 34,
          "following": 5,
          "created_at": "2014-01-27T14:30:30Z",
          "updated_at": "2020-03-17T10:02:44Z",
          "organizations": [
            {
              "login": "Bitergia",
              "id": 1918070,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=",
              "url": "https://api.github.com/orgs/Bitergia",
              "repos_url": "https://api.github.com/orgs/Bitergia/repos",
              "events_url": "https://api.github.com/orgs/Bitergia/events",
              "hooks_url": "https://api.github.com/orgs/Bitergia/hooks",
              "issues_url": "https://api.github.com/orgs/Bitergia/issues",
              "members_url": "https://api.github.com/orgs/Bitergia/members{/member}",
              "public_members_url": "https://api.github.com/orgs/Bitergia/public_members{/member}",
              "avatar_url": "https://avatars3.githubusercontent.com/u/1918070?v=4",
              "description": null
            },
            {
              "login": "grimoirelab",
              "id": 16151805,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1",
              "url": "https://api.github.com/orgs/grimoirelab",
              "repos_url": "https://api.github.com/orgs/grimoirelab/repos",
              "events_url": "https://api.github.com/orgs/grimoirelab/events",
              "hooks_url": "https://api.github.com/orgs/grimoirelab/hooks",
              "issues_url": "https://api.github.com/orgs/grimoirelab/issues",
              "members_url": "https://api.github.com/orgs/grimoirelab/members{/member}",
              "public_members_url": "https://api.github.com/orgs/grimoirelab/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/16151805?v=4",
              "description": ""
            },
            {
              "login": "chaoss",
              "id": 29740296,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
              "url": "https://api.github.com/orgs/chaoss",
              "repos_url": "https://api.github.com/orgs/chaoss/repos",
              "events_url": "https://api.github.com/orgs/chaoss/events",
              "hooks_url": "https://api.github.com/orgs/chaoss/hooks",
              "issues_url": "https://api.github.com/orgs/chaoss/issues",
              "members_url": "https://api.github.com/orgs/chaoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/chaoss/public_members{/member}",
              "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
              "description": ""
            }
          ]
        },
        "reactions_data": []
      },
      {
        "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388806937",
        "pull_request_review_id": 370199029,
        "id": 388806937,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgwNjkzNw==",
        "diff_hunk": "@@ -0,0 +1,528 @@\n+# -*- coding: utf-8 -*-\n+#\n+# Copyright (C) 2015-2019 Bitergia\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program. If not, see <http://www.gnu.org/licenses/>.\n+#\n+# Authors:\n+#     Valerio Cosentino <valcos@bitergia.com>\n+#\n+\n+import json\n+import logging\n+import datetime\n+import requests\n+from grimoirelab_toolkit.datetime import (datetime_to_utc,\n+                                          datetime_utcnow,\n+                                          str_to_datetime)\n+from grimoirelab_toolkit.uris import urijoin\n+\n+from ...backend import (Backend,\n+                        BackendCommand,\n+                        BackendCommandArgumentParser,\n+                        DEFAULT_SEARCH_FIELD)\n+from ...client import HttpClient, RateLimitHandler\n+from ...utils import DEFAULT_DATETIME, DEFAULT_LAST_DATETIME\n+from datetime import datetime\n+\n+CATEGORY_ISSUE = \"issue\"\n+\n+PAGURE_URL = \"https://pagure.io/\"\n+PAGURE_API_URL = \"https://pagure.io/api/0\"\n+\n+# Range before sleeping until rate limit reset\n+MIN_RATE_LIMIT = 10\n+MAX_RATE_LIMIT = 500\n+\n+MAX_CATEGORY_ITEMS_PER_PAGE = 100\n+PER_PAGE = 100\n+\n+# Default sleep time and retries to deal with connection/server problems\n+DEFAULT_SLEEP_TIME = 1\n+MAX_RETRIES = 5\n+\n+TARGET_ISSUE_FIELDS = ['user', 'assignee']\n+\n+logger = logging.getLogger(__name__)\n+\n+\n+class Pagure(Backend):\n+    \"\"\"Pagure backend for Perceval.\n+\n+    This class allows the fetch the issues stored in Pagure\n+    repository. Note that api token is needed to perform\n+    certain API calls\n+\n+    :param namespace: Pagure namespace\n+    :param repository: Pagure repository; in case the repository is within a namespace\n+    :param api_token: Pagure API token to access the API\n+    :param base_url: when no value is set the backend will be fetch\n+     the data from the Pagure public site.\n+    :param tag: label used to mark the data\n+    :param archive: archive to store/retrieve items\n+    :param sleep_for_rate: sleep until rate limit is reset\n+    :param min_rate_to_sleep: minimum rate needed to sleep until\n+         it will be reset\n+    :param max_retries: number of max retries to a data source\n+        before raising a RetryError exception\n+    :param max_items: max number of category items (e.g., issues,\n+        pull requests) per query\n+    :param sleep_time: time to sleep in case\n+        of connection problems\n+    \"\"\"\n+    version = '0.29'\n+\n+    CATEGORIES = [CATEGORY_ISSUE]\n+    CLASSIFIED_FIELDS = [\n+        ['user_data'],\n+        ['assignee_data']\n+    ]\n+\n+    def __init__(self, namespace=None, repository=None,\n+                 api_token=None, base_url=None,\n+                 tag=None, archive=None,\n+                 sleep_for_rate=False, min_rate_to_sleep=MIN_RATE_LIMIT,\n+                 max_retries=MAX_RETRIES, sleep_time=DEFAULT_SLEEP_TIME,\n+                 max_items=MAX_CATEGORY_ITEMS_PER_PAGE):\n+        if api_token is None:\n+            api_token = []\n+        origin = base_url if base_url else PAGURE_URL\n+        origin = urijoin(origin, namespace, repository)\n+\n+        super().__init__(origin, tag=tag, archive=archive)\n+\n+        self.namespace = namespace\n+        self.repository = repository\n+        self.api_token = api_token\n+        self.base_url = base_url\n+\n+        self.sleep_for_rate = sleep_for_rate\n+        self.min_rate_to_sleep = min_rate_to_sleep\n+        self.max_retries = max_retries\n+        self.sleep_time = sleep_time\n+        self.max_items = max_items\n+\n+        self.client = None\n+        self.exclude_user_data = False\n+        self._users = {}  # internal users cache\n+\n+    def search_fields(self, item):\n+        \"\"\"Add search fields to an item.\n+\n+        It adds the values of `metadata_id` plus the `namespace` and `repo`.\n+\n+        :param item: the item to extract the search fields values\n+\n+        :returns: a dict of search fields\n+        \"\"\"\n+        search_fields = {\n+            DEFAULT_SEARCH_FIELD: self.metadata_id(item),\n+            'namespace': self.namespace,\n+            'repo': self.repository\n+        }\n+\n+        return search_fields\n+\n+    def fetch(self, category=CATEGORY_ISSUE, from_date=DEFAULT_DATETIME, to_date=DEFAULT_LAST_DATETIME,\n+              filter_classified=False):\n+        \"\"\"Fetch the issues from the repository.\n+\n+        The method retrieves, from a Pagure repository, the issues\n+        updated since the given date.\n+\n+        :param category: the category of items to fetch\n+        :param from_date: obtain issues updated since this date\n+        :param to_date: obtain issues until a until a specific date (included)\n+        :param filter_classified: remove classified fields from the resulting items\n+\n+        :returns: a generator of issues\n+        \"\"\"\n+        self.exclude_user_data = filter_classified\n+\n+        if self.exclude_user_data:\n+            logger.info(\"Excluding user data. Personal user information won't be collected from the API.\")\n+\n+        if not from_date:\n+            from_date = DEFAULT_DATETIME\n+\n+        if not to_date:\n+            to_date = DEFAULT_LAST_DATETIME\n+\n+        from_date = from_date.strftime('%Y-%m-%d')\n+        to_date = to_date.strftime('%Y-%m-%d')\n+        kwargs = {\n+            'from_date': from_date,\n+            'to_date': to_date\n+        }\n+        items = super().fetch(category,\n+                              filter_classified=filter_classified,\n+                              **kwargs)\n+\n+        return items\n+\n+    def fetch_items(self, category, **kwargs):\n+        \"\"\"Fetch the items (issues)\n+\n+        :param category: the category of items to fetch\n+        :param kwargs: backend arguments\n+\n+        :returns: a generator of items\n+        \"\"\"\n+        from_date = kwargs['from_date']\n+        to_date = kwargs['to_date']\n+        items = self.__fetch_issues(from_date, to_date)\n+        return items\n+\n+    @classmethod\n+    def has_archiving(cls):\n+        \"\"\"Returns whether it supports archiving items on the fetch process.\n+\n+        :returns: this backend supports items archive\n+        \"\"\"\n+        return True\n+\n+    @classmethod\n+    def has_resuming(cls):\n+        \"\"\"Returns whether it supports to resume the fetch process.\n+\n+        :returns: this backend supports items resuming\n+        \"\"\"\n+        return True\n+\n+    @staticmethod\n+    def metadata_id(item):\n+        \"\"\"Extracts the identifier from a Pagure item.\"\"\"\n+\n+        return str(item['id'])\n+\n+    @staticmethod\n+    def metadata_updated_on(item):\n+        \"\"\"Extracts the update time from a Pagure item.\n+\n+        The timestamp used is extracted from 'last_updated' field.\n+        This date is converted to UNIX timestamp format. As Pagure\n+        dates are in timestamp format the conversion is straightforward.\n+\n+        :param item: item generated by the backend\n+\n+        :returns: a UNIX timestamp\n+        \"\"\"\n+        if \"forks_count\" in item:\n+            return item['fetched_on']\n+        else:\n+            ts = int(item['last_updated'])\n+            ts = datetime.fromtimestamp(ts).timestamp()\n+\n+            return ts\n+\n+    @staticmethod\n+    def metadata_category(item):\n+        \"\"\"Extracts the category from a Pagure item.\n+\n+        This backend generates one type of item which is\n+        'issue'.\n+        \"\"\"\n+\n+        category = CATEGORY_ISSUE\n+\n+        return category\n+\n+    def _init_client(self, from_archive=False):\n+        \"\"\"Init client\"\"\"\n+\n+        return PagureClient(self.namespace, self.repository, self.api_token, self.base_url,\n+                            self.sleep_for_rate, self.min_rate_to_sleep,\n+                            self.sleep_time, self.max_retries, self.max_items,\n+                            self.archive, from_archive)\n+\n+    def __fetch_issues(self, from_date, to_date):\n+        \"\"\"Fetch the issues\n+        :param from_date: starting date from which issues are fetched\n+        :param to_date: ending date till which issues are fetched\n+\n+        :returns: an issue object\n+        \"\"\"\n+\n+        issues_groups = self.client.issues(from_date=from_date)\n+\n+        for raw_issues in issues_groups:\n+            issues = json.loads(raw_issues)\n+            issues = issues['issues']\n+            for issue in issues:\n+\n+                if int(issue['last_updated']) > str_to_datetime(to_date).timestamp():\n+                    return\n+\n+                self.__init_extra_issue_fields(issue)",
        "path": "perceval/backends/core/pagure.py",
        "position": null,
        "original_position": 267,
        "commit_id": "70a89aa1dccc5152ed4a52cb4c5e4e327ba3595a",
        "original_commit_id": "4ffb87bbb10fd5eaf6125f39c09c04e803a1c8c7",
        "user": {
          "login": "animeshk08",
          "id": 32506591,
          "node_id": "MDQ6VXNlcjMyNTA2NTkx",
          "avatar_url": "https://avatars1.githubusercontent.com/u/32506591?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/animeshk08",
          "html_url": "https://github.com/animeshk08",
          "followers_url": "https://api.github.com/users/animeshk08/followers",
          "following_url": "https://api.github.com/users/animeshk08/following{/other_user}",
          "gists_url": "https://api.github.com/users/animeshk08/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/animeshk08/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/animeshk08/subscriptions",
          "organizations_url": "https://api.github.com/users/animeshk08/orgs",
          "repos_url": "https://api.github.com/users/animeshk08/repos",
          "events_url": "https://api.github.com/users/animeshk08/events{/privacy}",
          "received_events_url": "https://api.github.com/users/animeshk08/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "The response contains extra fields of user_data and assignee_data. This basically uses the user API to retrieve additional user information; `forks`, `repos` and `avatar`. Do we not need this information :)\r\nAlso in that case there will be no need for filter-classified a well right? As we are not retreivring any extra data.",
        "created_at": "2020-03-06T09:50:18Z",
        "updated_at": "2020-03-08T18:21:42Z",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r388806937",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621",
        "author_association": "CONTRIBUTOR",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388806937"
          },
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r388806937"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388806937/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "in_reply_to_id": 388228752,
        "user_data": {
          "login": "animeshk08",
          "id": 32506591,
          "node_id": "MDQ6VXNlcjMyNTA2NTkx",
          "avatar_url": "https://avatars1.githubusercontent.com/u/32506591?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/animeshk08",
          "html_url": "https://github.com/animeshk08",
          "followers_url": "https://api.github.com/users/animeshk08/followers",
          "following_url": "https://api.github.com/users/animeshk08/following{/other_user}",
          "gists_url": "https://api.github.com/users/animeshk08/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/animeshk08/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/animeshk08/subscriptions",
          "organizations_url": "https://api.github.com/users/animeshk08/orgs",
          "repos_url": "https://api.github.com/users/animeshk08/repos",
          "events_url": "https://api.github.com/users/animeshk08/events{/privacy}",
          "received_events_url": "https://api.github.com/users/animeshk08/received_events",
          "type": "User",
          "site_admin": false,
          "name": "Animesh Kumar",
          "company": null,
          "blog": "",
          "location": null,
          "email": null,
          "hireable": null,
          "bio": "Android| Data Science| Open Source",
          "public_repos": 48,
          "public_gists": 0,
          "followers": 5,
          "following": 2,
          "created_at": "2017-10-04T06:38:11Z",
          "updated_at": "2020-03-17T15:31:35Z",
          "organizations": []
        },
        "reactions_data": []
      },
      {
        "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388809553",
        "pull_request_review_id": 370199029,
        "id": 388809553,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgwOTU1Mw==",
        "diff_hunk": "@@ -0,0 +1,528 @@\n+# -*- coding: utf-8 -*-\n+#\n+# Copyright (C) 2015-2019 Bitergia\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program. If not, see <http://www.gnu.org/licenses/>.\n+#\n+# Authors:\n+#     Valerio Cosentino <valcos@bitergia.com>\n+#\n+\n+import json\n+import logging\n+import datetime\n+import requests\n+from grimoirelab_toolkit.datetime import (datetime_to_utc,\n+                                          datetime_utcnow,\n+                                          str_to_datetime)\n+from grimoirelab_toolkit.uris import urijoin\n+\n+from ...backend import (Backend,\n+                        BackendCommand,\n+                        BackendCommandArgumentParser,\n+                        DEFAULT_SEARCH_FIELD)\n+from ...client import HttpClient, RateLimitHandler\n+from ...utils import DEFAULT_DATETIME, DEFAULT_LAST_DATETIME\n+from datetime import datetime\n+\n+CATEGORY_ISSUE = \"issue\"\n+\n+PAGURE_URL = \"https://pagure.io/\"\n+PAGURE_API_URL = \"https://pagure.io/api/0\"\n+\n+# Range before sleeping until rate limit reset\n+MIN_RATE_LIMIT = 10\n+MAX_RATE_LIMIT = 500\n+\n+MAX_CATEGORY_ITEMS_PER_PAGE = 100\n+PER_PAGE = 100\n+\n+# Default sleep time and retries to deal with connection/server problems\n+DEFAULT_SLEEP_TIME = 1\n+MAX_RETRIES = 5\n+\n+TARGET_ISSUE_FIELDS = ['user', 'assignee']\n+\n+logger = logging.getLogger(__name__)\n+\n+\n+class Pagure(Backend):\n+    \"\"\"Pagure backend for Perceval.\n+\n+    This class allows the fetch the issues stored in Pagure\n+    repository. Note that api token is needed to perform\n+    certain API calls\n+\n+    :param namespace: Pagure namespace\n+    :param repository: Pagure repository; in case the repository is within a namespace\n+    :param api_token: Pagure API token to access the API\n+    :param base_url: when no value is set the backend will be fetch",
        "path": "perceval/backends/core/pagure.py",
        "position": null,
        "original_position": 70,
        "commit_id": "70a89aa1dccc5152ed4a52cb4c5e4e327ba3595a",
        "original_commit_id": "4ffb87bbb10fd5eaf6125f39c09c04e803a1c8c7",
        "user": {
          "login": "animeshk08",
          "id": 32506591,
          "node_id": "MDQ6VXNlcjMyNTA2NTkx",
          "avatar_url": "https://avatars1.githubusercontent.com/u/32506591?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/animeshk08",
          "html_url": "https://github.com/animeshk08",
          "followers_url": "https://api.github.com/users/animeshk08/followers",
          "following_url": "https://api.github.com/users/animeshk08/following{/other_user}",
          "gists_url": "https://api.github.com/users/animeshk08/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/animeshk08/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/animeshk08/subscriptions",
          "organizations_url": "https://api.github.com/users/animeshk08/orgs",
          "repos_url": "https://api.github.com/users/animeshk08/repos",
          "events_url": "https://api.github.com/users/animeshk08/events{/privacy}",
          "received_events_url": "https://api.github.com/users/animeshk08/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "No. It does not I will remove base_url and all its usages. Thank you :)",
        "created_at": "2020-03-06T09:55:12Z",
        "updated_at": "2020-03-08T18:21:42Z",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r388809553",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621",
        "author_association": "CONTRIBUTOR",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388809553"
          },
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r388809553"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388809553/reactions",
          "total_count": 1,
          "+1": 1,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "in_reply_to_id": 388214821,
        "user_data": {
          "login": "animeshk08",
          "id": 32506591,
          "node_id": "MDQ6VXNlcjMyNTA2NTkx",
          "avatar_url": "https://avatars1.githubusercontent.com/u/32506591?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/animeshk08",
          "html_url": "https://github.com/animeshk08",
          "followers_url": "https://api.github.com/users/animeshk08/followers",
          "following_url": "https://api.github.com/users/animeshk08/following{/other_user}",
          "gists_url": "https://api.github.com/users/animeshk08/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/animeshk08/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/animeshk08/subscriptions",
          "organizations_url": "https://api.github.com/users/animeshk08/orgs",
          "repos_url": "https://api.github.com/users/animeshk08/repos",
          "events_url": "https://api.github.com/users/animeshk08/events{/privacy}",
          "received_events_url": "https://api.github.com/users/animeshk08/received_events",
          "type": "User",
          "site_admin": false,
          "name": "Animesh Kumar",
          "company": null,
          "blog": "",
          "location": null,
          "email": null,
          "hireable": null,
          "bio": "Android| Data Science| Open Source",
          "public_repos": 48,
          "public_gists": 0,
          "followers": 5,
          "following": 2,
          "created_at": "2017-10-04T06:38:11Z",
          "updated_at": "2020-03-17T15:31:35Z",
          "organizations": []
        },
        "reactions_data": [
          {
            "id": 64404204,
            "node_id": "MDg6UmVhY3Rpb242NDQwNDIwNA==",
            "user": {
              "login": "valeriocos",
              "id": 6515067,
              "node_id": "MDQ6VXNlcjY1MTUwNjc=",
              "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/valeriocos",
              "html_url": "https://github.com/valeriocos",
              "followers_url": "https://api.github.com/users/valeriocos/followers",
              "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
              "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
              "organizations_url": "https://api.github.com/users/valeriocos/orgs",
              "repos_url": "https://api.github.com/users/valeriocos/repos",
              "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
              "received_events_url": "https://api.github.com/users/valeriocos/received_events",
              "type": "User",
              "site_admin": false
            },
            "content": "+1",
            "created_at": "2020-03-06T10:48:54Z",
            "user_data": {
              "login": "valeriocos",
              "id": 6515067,
              "node_id": "MDQ6VXNlcjY1MTUwNjc=",
              "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/valeriocos",
              "html_url": "https://github.com/valeriocos",
              "followers_url": "https://api.github.com/users/valeriocos/followers",
              "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
              "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
              "organizations_url": "https://api.github.com/users/valeriocos/orgs",
              "repos_url": "https://api.github.com/users/valeriocos/repos",
              "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
              "received_events_url": "https://api.github.com/users/valeriocos/received_events",
              "type": "User",
              "site_admin": false,
              "name": "valerio",
              "company": "@Bitergia ",
              "blog": "http://valeriocos.github.io/",
              "location": "Madrid, Spain",
              "email": "valcos@bitergia.com",
              "hireable": true,
              "bio": null,
              "public_repos": 57,
              "public_gists": 28,
              "followers": 34,
              "following": 5,
              "created_at": "2014-01-27T14:30:30Z",
              "updated_at": "2020-03-17T10:02:44Z",
              "organizations": [
                {
                  "login": "Bitergia",
                  "id": 1918070,
                  "node_id": "MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=",
                  "url": "https://api.github.com/orgs/Bitergia",
                  "repos_url": "https://api.github.com/orgs/Bitergia/repos",
                  "events_url": "https://api.github.com/orgs/Bitergia/events",
                  "hooks_url": "https://api.github.com/orgs/Bitergia/hooks",
                  "issues_url": "https://api.github.com/orgs/Bitergia/issues",
                  "members_url": "https://api.github.com/orgs/Bitergia/members{/member}",
                  "public_members_url": "https://api.github.com/orgs/Bitergia/public_members{/member}",
                  "avatar_url": "https://avatars3.githubusercontent.com/u/1918070?v=4",
                  "description": null
                },
                {
                  "login": "grimoirelab",
                  "id": 16151805,
                  "node_id": "MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1",
                  "url": "https://api.github.com/orgs/grimoirelab",
                  "repos_url": "https://api.github.com/orgs/grimoirelab/repos",
                  "events_url": "https://api.github.com/orgs/grimoirelab/events",
                  "hooks_url": "https://api.github.com/orgs/grimoirelab/hooks",
                  "issues_url": "https://api.github.com/orgs/grimoirelab/issues",
                  "members_url": "https://api.github.com/orgs/grimoirelab/members{/member}",
                  "public_members_url": "https://api.github.com/orgs/grimoirelab/public_members{/member}",
                  "avatar_url": "https://avatars0.githubusercontent.com/u/16151805?v=4",
                  "description": ""
                },
                {
                  "login": "chaoss",
                  "id": 29740296,
                  "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
                  "url": "https://api.github.com/orgs/chaoss",
                  "repos_url": "https://api.github.com/orgs/chaoss/repos",
                  "events_url": "https://api.github.com/orgs/chaoss/events",
                  "hooks_url": "https://api.github.com/orgs/chaoss/hooks",
                  "issues_url": "https://api.github.com/orgs/chaoss/issues",
                  "members_url": "https://api.github.com/orgs/chaoss/members{/member}",
                  "public_members_url": "https://api.github.com/orgs/chaoss/public_members{/member}",
                  "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
                  "description": ""
                }
              ]
            }
          }
        ]
      },
      {
        "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388810135",
        "pull_request_review_id": 370199029,
        "id": 388810135,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgxMDEzNQ==",
        "diff_hunk": "@@ -0,0 +1,528 @@\n+# -*- coding: utf-8 -*-\n+#\n+# Copyright (C) 2015-2019 Bitergia\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program. If not, see <http://www.gnu.org/licenses/>.\n+#\n+# Authors:\n+#     Valerio Cosentino <valcos@bitergia.com>\n+#\n+\n+import json\n+import logging\n+import datetime\n+import requests\n+from grimoirelab_toolkit.datetime import (datetime_to_utc,\n+                                          datetime_utcnow,\n+                                          str_to_datetime)\n+from grimoirelab_toolkit.uris import urijoin\n+\n+from ...backend import (Backend,\n+                        BackendCommand,\n+                        BackendCommandArgumentParser,\n+                        DEFAULT_SEARCH_FIELD)\n+from ...client import HttpClient, RateLimitHandler\n+from ...utils import DEFAULT_DATETIME, DEFAULT_LAST_DATETIME\n+from datetime import datetime\n+\n+CATEGORY_ISSUE = \"issue\"\n+\n+PAGURE_URL = \"https://pagure.io/\"\n+PAGURE_API_URL = \"https://pagure.io/api/0\"\n+\n+# Range before sleeping until rate limit reset\n+MIN_RATE_LIMIT = 10\n+MAX_RATE_LIMIT = 500\n+\n+MAX_CATEGORY_ITEMS_PER_PAGE = 100\n+PER_PAGE = 100\n+\n+# Default sleep time and retries to deal with connection/server problems\n+DEFAULT_SLEEP_TIME = 1\n+MAX_RETRIES = 5\n+\n+TARGET_ISSUE_FIELDS = ['user', 'assignee']\n+\n+logger = logging.getLogger(__name__)\n+\n+\n+class Pagure(Backend):\n+    \"\"\"Pagure backend for Perceval.\n+\n+    This class allows the fetch the issues stored in Pagure\n+    repository. Note that api token is needed to perform\n+    certain API calls\n+\n+    :param namespace: Pagure namespace\n+    :param repository: Pagure repository; in case the repository is within a namespace\n+    :param api_token: Pagure API token to access the API\n+    :param base_url: when no value is set the backend will be fetch\n+     the data from the Pagure public site.\n+    :param tag: label used to mark the data\n+    :param archive: archive to store/retrieve items\n+    :param sleep_for_rate: sleep until rate limit is reset\n+    :param min_rate_to_sleep: minimum rate needed to sleep until\n+         it will be reset\n+    :param max_retries: number of max retries to a data source\n+        before raising a RetryError exception\n+    :param max_items: max number of category items (e.g., issues,\n+        pull requests) per query\n+    :param sleep_time: time to sleep in case\n+        of connection problems\n+    \"\"\"\n+    version = '0.29'",
        "path": "perceval/backends/core/pagure.py",
        "position": null,
        "original_position": 84,
        "commit_id": "70a89aa1dccc5152ed4a52cb4c5e4e327ba3595a",
        "original_commit_id": "4ffb87bbb10fd5eaf6125f39c09c04e803a1c8c7",
        "user": {
          "login": "animeshk08",
          "id": 32506591,
          "node_id": "MDQ6VXNlcjMyNTA2NTkx",
          "avatar_url": "https://avatars1.githubusercontent.com/u/32506591?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/animeshk08",
          "html_url": "https://github.com/animeshk08",
          "followers_url": "https://api.github.com/users/animeshk08/followers",
          "following_url": "https://api.github.com/users/animeshk08/following{/other_user}",
          "gists_url": "https://api.github.com/users/animeshk08/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/animeshk08/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/animeshk08/subscriptions",
          "organizations_url": "https://api.github.com/users/animeshk08/orgs",
          "repos_url": "https://api.github.com/users/animeshk08/repos",
          "events_url": "https://api.github.com/users/animeshk08/events{/privacy}",
          "received_events_url": "https://api.github.com/users/animeshk08/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "Sorry, I thought that was the API version. Will make the changes",
        "created_at": "2020-03-06T09:56:12Z",
        "updated_at": "2020-03-08T18:21:42Z",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r388810135",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621",
        "author_association": "CONTRIBUTOR",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388810135"
          },
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r388810135"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388810135/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "in_reply_to_id": 388198404,
        "user_data": {
          "login": "animeshk08",
          "id": 32506591,
          "node_id": "MDQ6VXNlcjMyNTA2NTkx",
          "avatar_url": "https://avatars1.githubusercontent.com/u/32506591?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/animeshk08",
          "html_url": "https://github.com/animeshk08",
          "followers_url": "https://api.github.com/users/animeshk08/followers",
          "following_url": "https://api.github.com/users/animeshk08/following{/other_user}",
          "gists_url": "https://api.github.com/users/animeshk08/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/animeshk08/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/animeshk08/subscriptions",
          "organizations_url": "https://api.github.com/users/animeshk08/orgs",
          "repos_url": "https://api.github.com/users/animeshk08/repos",
          "events_url": "https://api.github.com/users/animeshk08/events{/privacy}",
          "received_events_url": "https://api.github.com/users/animeshk08/received_events",
          "type": "User",
          "site_admin": false,
          "name": "Animesh Kumar",
          "company": null,
          "blog": "",
          "location": null,
          "email": null,
          "hireable": null,
          "bio": "Android| Data Science| Open Source",
          "public_repos": 48,
          "public_gists": 0,
          "followers": 5,
          "following": 2,
          "created_at": "2017-10-04T06:38:11Z",
          "updated_at": "2020-03-17T15:31:35Z",
          "organizations": []
        },
        "reactions_data": []
      },
      {
        "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388835329",
        "pull_request_review_id": 370234599,
        "id": 388835329,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgzNTMyOQ==",
        "diff_hunk": "@@ -0,0 +1,528 @@\n+# -*- coding: utf-8 -*-\n+#\n+# Copyright (C) 2015-2019 Bitergia\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program. If not, see <http://www.gnu.org/licenses/>.\n+#\n+# Authors:\n+#     Valerio Cosentino <valcos@bitergia.com>\n+#\n+\n+import json\n+import logging\n+import datetime\n+import requests\n+from grimoirelab_toolkit.datetime import (datetime_to_utc,\n+                                          datetime_utcnow,\n+                                          str_to_datetime)\n+from grimoirelab_toolkit.uris import urijoin\n+\n+from ...backend import (Backend,\n+                        BackendCommand,\n+                        BackendCommandArgumentParser,\n+                        DEFAULT_SEARCH_FIELD)\n+from ...client import HttpClient, RateLimitHandler\n+from ...utils import DEFAULT_DATETIME, DEFAULT_LAST_DATETIME\n+from datetime import datetime\n+\n+CATEGORY_ISSUE = \"issue\"\n+\n+PAGURE_URL = \"https://pagure.io/\"\n+PAGURE_API_URL = \"https://pagure.io/api/0\"\n+\n+# Range before sleeping until rate limit reset\n+MIN_RATE_LIMIT = 10\n+MAX_RATE_LIMIT = 500\n+\n+MAX_CATEGORY_ITEMS_PER_PAGE = 100\n+PER_PAGE = 100\n+\n+# Default sleep time and retries to deal with connection/server problems\n+DEFAULT_SLEEP_TIME = 1\n+MAX_RETRIES = 5\n+\n+TARGET_ISSUE_FIELDS = ['user', 'assignee']\n+\n+logger = logging.getLogger(__name__)\n+\n+\n+class Pagure(Backend):\n+    \"\"\"Pagure backend for Perceval.\n+\n+    This class allows the fetch the issues stored in Pagure\n+    repository. Note that api token is needed to perform\n+    certain API calls\n+\n+    :param namespace: Pagure namespace\n+    :param repository: Pagure repository; in case the repository is within a namespace\n+    :param api_token: Pagure API token to access the API\n+    :param base_url: when no value is set the backend will be fetch\n+     the data from the Pagure public site.\n+    :param tag: label used to mark the data\n+    :param archive: archive to store/retrieve items\n+    :param sleep_for_rate: sleep until rate limit is reset\n+    :param min_rate_to_sleep: minimum rate needed to sleep until\n+         it will be reset\n+    :param max_retries: number of max retries to a data source\n+        before raising a RetryError exception\n+    :param max_items: max number of category items (e.g., issues,\n+        pull requests) per query\n+    :param sleep_time: time to sleep in case\n+        of connection problems\n+    \"\"\"\n+    version = '0.29'\n+\n+    CATEGORIES = [CATEGORY_ISSUE]\n+    CLASSIFIED_FIELDS = [\n+        ['user_data'],\n+        ['assignee_data']\n+    ]\n+\n+    def __init__(self, namespace=None, repository=None,\n+                 api_token=None, base_url=None,\n+                 tag=None, archive=None,\n+                 sleep_for_rate=False, min_rate_to_sleep=MIN_RATE_LIMIT,\n+                 max_retries=MAX_RETRIES, sleep_time=DEFAULT_SLEEP_TIME,\n+                 max_items=MAX_CATEGORY_ITEMS_PER_PAGE):\n+        if api_token is None:\n+            api_token = []\n+        origin = base_url if base_url else PAGURE_URL\n+        origin = urijoin(origin, namespace, repository)\n+\n+        super().__init__(origin, tag=tag, archive=archive)\n+\n+        self.namespace = namespace\n+        self.repository = repository\n+        self.api_token = api_token\n+        self.base_url = base_url\n+\n+        self.sleep_for_rate = sleep_for_rate\n+        self.min_rate_to_sleep = min_rate_to_sleep\n+        self.max_retries = max_retries\n+        self.sleep_time = sleep_time\n+        self.max_items = max_items\n+\n+        self.client = None\n+        self.exclude_user_data = False\n+        self._users = {}  # internal users cache\n+\n+    def search_fields(self, item):\n+        \"\"\"Add search fields to an item.\n+\n+        It adds the values of `metadata_id` plus the `namespace` and `repo`.\n+\n+        :param item: the item to extract the search fields values\n+\n+        :returns: a dict of search fields\n+        \"\"\"\n+        search_fields = {\n+            DEFAULT_SEARCH_FIELD: self.metadata_id(item),\n+            'namespace': self.namespace,\n+            'repo': self.repository\n+        }\n+\n+        return search_fields\n+\n+    def fetch(self, category=CATEGORY_ISSUE, from_date=DEFAULT_DATETIME, to_date=DEFAULT_LAST_DATETIME,\n+              filter_classified=False):\n+        \"\"\"Fetch the issues from the repository.\n+\n+        The method retrieves, from a Pagure repository, the issues\n+        updated since the given date.\n+\n+        :param category: the category of items to fetch\n+        :param from_date: obtain issues updated since this date\n+        :param to_date: obtain issues until a until a specific date (included)\n+        :param filter_classified: remove classified fields from the resulting items\n+\n+        :returns: a generator of issues\n+        \"\"\"\n+        self.exclude_user_data = filter_classified\n+\n+        if self.exclude_user_data:\n+            logger.info(\"Excluding user data. Personal user information won't be collected from the API.\")\n+\n+        if not from_date:\n+            from_date = DEFAULT_DATETIME\n+\n+        if not to_date:\n+            to_date = DEFAULT_LAST_DATETIME\n+\n+        from_date = from_date.strftime('%Y-%m-%d')\n+        to_date = to_date.strftime('%Y-%m-%d')\n+        kwargs = {\n+            'from_date': from_date,\n+            'to_date': to_date\n+        }\n+        items = super().fetch(category,\n+                              filter_classified=filter_classified,\n+                              **kwargs)\n+\n+        return items\n+\n+    def fetch_items(self, category, **kwargs):\n+        \"\"\"Fetch the items (issues)\n+\n+        :param category: the category of items to fetch\n+        :param kwargs: backend arguments\n+\n+        :returns: a generator of items\n+        \"\"\"\n+        from_date = kwargs['from_date']\n+        to_date = kwargs['to_date']\n+        items = self.__fetch_issues(from_date, to_date)\n+        return items\n+\n+    @classmethod\n+    def has_archiving(cls):\n+        \"\"\"Returns whether it supports archiving items on the fetch process.\n+\n+        :returns: this backend supports items archive\n+        \"\"\"\n+        return True\n+\n+    @classmethod\n+    def has_resuming(cls):\n+        \"\"\"Returns whether it supports to resume the fetch process.\n+\n+        :returns: this backend supports items resuming\n+        \"\"\"\n+        return True\n+\n+    @staticmethod\n+    def metadata_id(item):\n+        \"\"\"Extracts the identifier from a Pagure item.\"\"\"\n+\n+        return str(item['id'])\n+\n+    @staticmethod\n+    def metadata_updated_on(item):\n+        \"\"\"Extracts the update time from a Pagure item.\n+\n+        The timestamp used is extracted from 'last_updated' field.\n+        This date is converted to UNIX timestamp format. As Pagure\n+        dates are in timestamp format the conversion is straightforward.\n+\n+        :param item: item generated by the backend\n+\n+        :returns: a UNIX timestamp\n+        \"\"\"\n+        if \"forks_count\" in item:\n+            return item['fetched_on']\n+        else:\n+            ts = int(item['last_updated'])\n+            ts = datetime.fromtimestamp(ts).timestamp()\n+\n+            return ts\n+\n+    @staticmethod\n+    def metadata_category(item):\n+        \"\"\"Extracts the category from a Pagure item.\n+\n+        This backend generates one type of item which is\n+        'issue'.\n+        \"\"\"\n+\n+        category = CATEGORY_ISSUE\n+\n+        return category\n+\n+    def _init_client(self, from_archive=False):\n+        \"\"\"Init client\"\"\"\n+\n+        return PagureClient(self.namespace, self.repository, self.api_token, self.base_url,\n+                            self.sleep_for_rate, self.min_rate_to_sleep,\n+                            self.sleep_time, self.max_retries, self.max_items,\n+                            self.archive, from_archive)\n+\n+    def __fetch_issues(self, from_date, to_date):\n+        \"\"\"Fetch the issues\n+        :param from_date: starting date from which issues are fetched\n+        :param to_date: ending date till which issues are fetched\n+\n+        :returns: an issue object\n+        \"\"\"\n+\n+        issues_groups = self.client.issues(from_date=from_date)\n+\n+        for raw_issues in issues_groups:\n+            issues = json.loads(raw_issues)\n+            issues = issues['issues']\n+            for issue in issues:\n+\n+                if int(issue['last_updated']) > str_to_datetime(to_date).timestamp():\n+                    return\n+\n+                self.__init_extra_issue_fields(issue)",
        "path": "perceval/backends/core/pagure.py",
        "position": null,
        "original_position": 267,
        "commit_id": "70a89aa1dccc5152ed4a52cb4c5e4e327ba3595a",
        "original_commit_id": "4ffb87bbb10fd5eaf6125f39c09c04e803a1c8c7",
        "user": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "Forks, repos and avatar are not used in the other data sources (e.g., gitlab, github), so it would be better to remove them for this initial implementation.\r\n\r\n> Also in that case there will be no need for filter-classified a well right? As we are not retreivring any extra data.\r\n\r\nYes, we don't need them :)",
        "created_at": "2020-03-06T10:48:14Z",
        "updated_at": "2020-03-08T18:21:42Z",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r388835329",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621",
        "author_association": "MEMBER",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388835329"
          },
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r388835329"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/388835329/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "in_reply_to_id": 388228752,
        "user_data": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false,
          "name": "valerio",
          "company": "@Bitergia ",
          "blog": "http://valeriocos.github.io/",
          "location": "Madrid, Spain",
          "email": "valcos@bitergia.com",
          "hireable": true,
          "bio": null,
          "public_repos": 57,
          "public_gists": 28,
          "followers": 34,
          "following": 5,
          "created_at": "2014-01-27T14:30:30Z",
          "updated_at": "2020-03-17T10:02:44Z",
          "organizations": [
            {
              "login": "Bitergia",
              "id": 1918070,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=",
              "url": "https://api.github.com/orgs/Bitergia",
              "repos_url": "https://api.github.com/orgs/Bitergia/repos",
              "events_url": "https://api.github.com/orgs/Bitergia/events",
              "hooks_url": "https://api.github.com/orgs/Bitergia/hooks",
              "issues_url": "https://api.github.com/orgs/Bitergia/issues",
              "members_url": "https://api.github.com/orgs/Bitergia/members{/member}",
              "public_members_url": "https://api.github.com/orgs/Bitergia/public_members{/member}",
              "avatar_url": "https://avatars3.githubusercontent.com/u/1918070?v=4",
              "description": null
            },
            {
              "login": "grimoirelab",
              "id": 16151805,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1",
              "url": "https://api.github.com/orgs/grimoirelab",
              "repos_url": "https://api.github.com/orgs/grimoirelab/repos",
              "events_url": "https://api.github.com/orgs/grimoirelab/events",
              "hooks_url": "https://api.github.com/orgs/grimoirelab/hooks",
              "issues_url": "https://api.github.com/orgs/grimoirelab/issues",
              "members_url": "https://api.github.com/orgs/grimoirelab/members{/member}",
              "public_members_url": "https://api.github.com/orgs/grimoirelab/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/16151805?v=4",
              "description": ""
            },
            {
              "login": "chaoss",
              "id": 29740296,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
              "url": "https://api.github.com/orgs/chaoss",
              "repos_url": "https://api.github.com/orgs/chaoss/repos",
              "events_url": "https://api.github.com/orgs/chaoss/events",
              "hooks_url": "https://api.github.com/orgs/chaoss/hooks",
              "issues_url": "https://api.github.com/orgs/chaoss/issues",
              "members_url": "https://api.github.com/orgs/chaoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/chaoss/public_members{/member}",
              "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
              "description": ""
            }
          ]
        },
        "reactions_data": []
      },
      {
        "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389245811",
        "pull_request_review_id": 370737508,
        "id": 389245811,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0NTgxMQ==",
        "diff_hunk": "@@ -0,0 +1,404 @@\n+# -*- coding: utf-8 -*-\n+#\n+# Copyright (C) 2015-2020 Bitergia\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program. If not, see <http://www.gnu.org/licenses/>.\n+#\n+# Authors:\n+#     Animesh Kumar <animuz111@gmail.com>\n+#\n+\n+import json\n+import logging\n+import requests\n+from grimoirelab_toolkit.datetime import (str_to_datetime)\n+from grimoirelab_toolkit.uris import urijoin\n+\n+from ...backend import (Backend,\n+                        BackendCommand,\n+                        BackendCommandArgumentParser,\n+                        DEFAULT_SEARCH_FIELD)\n+from ...client import HttpClient, RateLimitHandler\n+from ...utils import DEFAULT_DATETIME, DEFAULT_LAST_DATETIME\n+from datetime import datetime\n+\n+CATEGORY_ISSUE = \"issue\"\n+\n+PAGURE_URL = \"https://pagure.io/\"\n+PAGURE_API_URL = \"https://pagure.io/api/0\"\n+\n+MAX_CATEGORY_ITEMS_PER_PAGE = 100\n+PER_PAGE = 100\n+\n+# Default sleep time and retries to deal with connection/server problems\n+DEFAULT_SLEEP_TIME = 1\n+MAX_RETRIES = 5\n+\n+logger = logging.getLogger(__name__)\n+\n+\n+class Pagure(Backend):\n+    \"\"\"Pagure backend for Perceval.\n+\n+    This class allows the fetch the issues stored in Pagure",
        "path": "perceval/backends/core/pagure.py",
        "position": null,
        "original_position": 54,
        "commit_id": "70a89aa1dccc5152ed4a52cb4c5e4e327ba3595a",
        "original_commit_id": "bea6bc459c6829df8be725bc163f944501d55107",
        "user": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "small typo: in a Pagure repository",
        "created_at": "2020-03-07T10:49:23Z",
        "updated_at": "2020-03-08T18:21:42Z",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r389245811",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621",
        "author_association": "MEMBER",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389245811"
          },
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r389245811"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389245811/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "user_data": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false,
          "name": "valerio",
          "company": "@Bitergia ",
          "blog": "http://valeriocos.github.io/",
          "location": "Madrid, Spain",
          "email": "valcos@bitergia.com",
          "hireable": true,
          "bio": null,
          "public_repos": 57,
          "public_gists": 28,
          "followers": 34,
          "following": 5,
          "created_at": "2014-01-27T14:30:30Z",
          "updated_at": "2020-03-17T10:02:44Z",
          "organizations": [
            {
              "login": "Bitergia",
              "id": 1918070,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=",
              "url": "https://api.github.com/orgs/Bitergia",
              "repos_url": "https://api.github.com/orgs/Bitergia/repos",
              "events_url": "https://api.github.com/orgs/Bitergia/events",
              "hooks_url": "https://api.github.com/orgs/Bitergia/hooks",
              "issues_url": "https://api.github.com/orgs/Bitergia/issues",
              "members_url": "https://api.github.com/orgs/Bitergia/members{/member}",
              "public_members_url": "https://api.github.com/orgs/Bitergia/public_members{/member}",
              "avatar_url": "https://avatars3.githubusercontent.com/u/1918070?v=4",
              "description": null
            },
            {
              "login": "grimoirelab",
              "id": 16151805,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1",
              "url": "https://api.github.com/orgs/grimoirelab",
              "repos_url": "https://api.github.com/orgs/grimoirelab/repos",
              "events_url": "https://api.github.com/orgs/grimoirelab/events",
              "hooks_url": "https://api.github.com/orgs/grimoirelab/hooks",
              "issues_url": "https://api.github.com/orgs/grimoirelab/issues",
              "members_url": "https://api.github.com/orgs/grimoirelab/members{/member}",
              "public_members_url": "https://api.github.com/orgs/grimoirelab/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/16151805?v=4",
              "description": ""
            },
            {
              "login": "chaoss",
              "id": 29740296,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
              "url": "https://api.github.com/orgs/chaoss",
              "repos_url": "https://api.github.com/orgs/chaoss/repos",
              "events_url": "https://api.github.com/orgs/chaoss/events",
              "hooks_url": "https://api.github.com/orgs/chaoss/hooks",
              "issues_url": "https://api.github.com/orgs/chaoss/issues",
              "members_url": "https://api.github.com/orgs/chaoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/chaoss/public_members{/member}",
              "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
              "description": ""
            }
          ]
        },
        "reactions_data": []
      },
      {
        "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389245895",
        "pull_request_review_id": 370737508,
        "id": 389245895,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0NTg5NQ==",
        "diff_hunk": "@@ -0,0 +1,404 @@\n+# -*- coding: utf-8 -*-\n+#\n+# Copyright (C) 2015-2020 Bitergia\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program. If not, see <http://www.gnu.org/licenses/>.\n+#\n+# Authors:\n+#     Animesh Kumar <animuz111@gmail.com>\n+#\n+\n+import json\n+import logging\n+import requests\n+from grimoirelab_toolkit.datetime import (str_to_datetime)\n+from grimoirelab_toolkit.uris import urijoin\n+\n+from ...backend import (Backend,\n+                        BackendCommand,\n+                        BackendCommandArgumentParser,\n+                        DEFAULT_SEARCH_FIELD)\n+from ...client import HttpClient, RateLimitHandler\n+from ...utils import DEFAULT_DATETIME, DEFAULT_LAST_DATETIME\n+from datetime import datetime\n+\n+CATEGORY_ISSUE = \"issue\"\n+\n+PAGURE_URL = \"https://pagure.io/\"\n+PAGURE_API_URL = \"https://pagure.io/api/0\"\n+\n+MAX_CATEGORY_ITEMS_PER_PAGE = 100\n+PER_PAGE = 100\n+\n+# Default sleep time and retries to deal with connection/server problems\n+DEFAULT_SLEEP_TIME = 1\n+MAX_RETRIES = 5\n+\n+logger = logging.getLogger(__name__)\n+\n+\n+class Pagure(Backend):\n+    \"\"\"Pagure backend for Perceval.\n+\n+    This class allows the fetch the issues stored in Pagure\n+    repository. Note that api token is needed to perform\n+    certain API calls\n+\n+    :param namespace: Pagure namespace\n+    :param repository: Pagure repository; in case the repository is within a namespace\n+    :param api_token: Pagure API token to access the API\n+    :param tag: label used to mark the data\n+    :param archive: archive to store/retrieve items\n+    :param max_retries: number of max retries to a data source\n+        before raising a RetryError exception\n+    :param max_items: max number of category items (e.g., issues,\n+        pull requests) per query\n+    :param sleep_time: time to sleep in case\n+        of connection problems\n+    :param ssl_verify: enable/disable SSL verification\n+    \"\"\"\n+    version = '0.1.0'\n+\n+    CATEGORIES = [CATEGORY_ISSUE]\n+\n+    def __init__(self, namespace=None, repository=None,\n+                 api_token=None,\n+                 tag=None, archive=None,\n+                 max_retries=MAX_RETRIES, sleep_time=DEFAULT_SLEEP_TIME,\n+                 max_items=MAX_CATEGORY_ITEMS_PER_PAGE, ssl_verify=True):\n+        origin = PAGURE_URL\n+\n+        # In case repository is under a namespace add the namespace as well to the origin",
        "path": "perceval/backends/core/pagure.py",
        "position": null,
        "original_position": 82,
        "commit_id": "70a89aa1dccc5152ed4a52cb4c5e4e327ba3595a",
        "original_commit_id": "bea6bc459c6829df8be725bc163f944501d55107",
        "user": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "small typo: In case the repository is under a namespace, add the namespace as well to the origin",
        "created_at": "2020-03-07T10:50:40Z",
        "updated_at": "2020-03-08T18:21:42Z",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r389245895",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621",
        "author_association": "MEMBER",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389245895"
          },
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r389245895"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389245895/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "user_data": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false,
          "name": "valerio",
          "company": "@Bitergia ",
          "blog": "http://valeriocos.github.io/",
          "location": "Madrid, Spain",
          "email": "valcos@bitergia.com",
          "hireable": true,
          "bio": null,
          "public_repos": 57,
          "public_gists": 28,
          "followers": 34,
          "following": 5,
          "created_at": "2014-01-27T14:30:30Z",
          "updated_at": "2020-03-17T10:02:44Z",
          "organizations": [
            {
              "login": "Bitergia",
              "id": 1918070,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=",
              "url": "https://api.github.com/orgs/Bitergia",
              "repos_url": "https://api.github.com/orgs/Bitergia/repos",
              "events_url": "https://api.github.com/orgs/Bitergia/events",
              "hooks_url": "https://api.github.com/orgs/Bitergia/hooks",
              "issues_url": "https://api.github.com/orgs/Bitergia/issues",
              "members_url": "https://api.github.com/orgs/Bitergia/members{/member}",
              "public_members_url": "https://api.github.com/orgs/Bitergia/public_members{/member}",
              "avatar_url": "https://avatars3.githubusercontent.com/u/1918070?v=4",
              "description": null
            },
            {
              "login": "grimoirelab",
              "id": 16151805,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1",
              "url": "https://api.github.com/orgs/grimoirelab",
              "repos_url": "https://api.github.com/orgs/grimoirelab/repos",
              "events_url": "https://api.github.com/orgs/grimoirelab/events",
              "hooks_url": "https://api.github.com/orgs/grimoirelab/hooks",
              "issues_url": "https://api.github.com/orgs/grimoirelab/issues",
              "members_url": "https://api.github.com/orgs/grimoirelab/members{/member}",
              "public_members_url": "https://api.github.com/orgs/grimoirelab/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/16151805?v=4",
              "description": ""
            },
            {
              "login": "chaoss",
              "id": 29740296,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
              "url": "https://api.github.com/orgs/chaoss",
              "repos_url": "https://api.github.com/orgs/chaoss/repos",
              "events_url": "https://api.github.com/orgs/chaoss/events",
              "hooks_url": "https://api.github.com/orgs/chaoss/hooks",
              "issues_url": "https://api.github.com/orgs/chaoss/issues",
              "members_url": "https://api.github.com/orgs/chaoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/chaoss/public_members{/member}",
              "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
              "description": ""
            }
          ]
        },
        "reactions_data": []
      },
      {
        "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389245960",
        "pull_request_review_id": 370737508,
        "id": 389245960,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0NTk2MA==",
        "diff_hunk": "@@ -0,0 +1,404 @@\n+# -*- coding: utf-8 -*-\n+#\n+# Copyright (C) 2015-2020 Bitergia\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program. If not, see <http://www.gnu.org/licenses/>.\n+#\n+# Authors:\n+#     Animesh Kumar <animuz111@gmail.com>\n+#\n+\n+import json\n+import logging\n+import requests\n+from grimoirelab_toolkit.datetime import (str_to_datetime)\n+from grimoirelab_toolkit.uris import urijoin\n+\n+from ...backend import (Backend,\n+                        BackendCommand,\n+                        BackendCommandArgumentParser,\n+                        DEFAULT_SEARCH_FIELD)\n+from ...client import HttpClient, RateLimitHandler\n+from ...utils import DEFAULT_DATETIME, DEFAULT_LAST_DATETIME\n+from datetime import datetime\n+\n+CATEGORY_ISSUE = \"issue\"\n+\n+PAGURE_URL = \"https://pagure.io/\"\n+PAGURE_API_URL = \"https://pagure.io/api/0\"\n+\n+MAX_CATEGORY_ITEMS_PER_PAGE = 100\n+PER_PAGE = 100\n+\n+# Default sleep time and retries to deal with connection/server problems\n+DEFAULT_SLEEP_TIME = 1\n+MAX_RETRIES = 5\n+\n+logger = logging.getLogger(__name__)\n+\n+\n+class Pagure(Backend):\n+    \"\"\"Pagure backend for Perceval.\n+\n+    This class allows the fetch the issues stored in Pagure\n+    repository. Note that api token is needed to perform\n+    certain API calls\n+\n+    :param namespace: Pagure namespace\n+    :param repository: Pagure repository; in case the repository is within a namespace\n+    :param api_token: Pagure API token to access the API\n+    :param tag: label used to mark the data\n+    :param archive: archive to store/retrieve items\n+    :param max_retries: number of max retries to a data source\n+        before raising a RetryError exception\n+    :param max_items: max number of category items (e.g., issues,\n+        pull requests) per query\n+    :param sleep_time: time to sleep in case\n+        of connection problems\n+    :param ssl_verify: enable/disable SSL verification\n+    \"\"\"\n+    version = '0.1.0'\n+\n+    CATEGORIES = [CATEGORY_ISSUE]\n+\n+    def __init__(self, namespace=None, repository=None,\n+                 api_token=None,\n+                 tag=None, archive=None,\n+                 max_retries=MAX_RETRIES, sleep_time=DEFAULT_SLEEP_TIME,\n+                 max_items=MAX_CATEGORY_ITEMS_PER_PAGE, ssl_verify=True):\n+        origin = PAGURE_URL\n+\n+        # In case repository is under a namespace add the namespace as well to the origin\n+        origin = urijoin(origin, namespace, repository) if namespace else urijoin(origin, repository)\n+\n+        super().__init__(origin, tag=tag, archive=archive, ssl_verify=ssl_verify)\n+\n+        self.namespace = namespace\n+        self.repository = repository\n+        self.api_token = api_token\n+        self.max_retries = max_retries\n+        self.sleep_time = sleep_time\n+        self.max_items = max_items\n+\n+        self.client = None\n+\n+    def search_fields(self, item):\n+        \"\"\"Add search fields to an item.\n+\n+        It adds the values of `metadata_id` plus the `namespace` and `repo`.\n+\n+        :param item: the item to extract the search fields values\n+\n+        :returns: a dict of search fields\n+        \"\"\"\n+        search_fields = {\n+            DEFAULT_SEARCH_FIELD: self.metadata_id(item),\n+            'namespace': self.namespace,\n+            'repo': self.repository\n+        }\n+\n+        return search_fields\n+\n+    def fetch(self, category=CATEGORY_ISSUE, from_date=DEFAULT_DATETIME, to_date=DEFAULT_LAST_DATETIME,\n+              filter_classified=False):\n+        \"\"\"Fetch the issues from the repository.\n+\n+        The method retrieves, from a Pagure repository, the issues\n+        updated since the given date.",
        "path": "perceval/backends/core/pagure.py",
        "position": null,
        "original_position": 118,
        "commit_id": "70a89aa1dccc5152ed4a52cb4c5e4e327ba3595a",
        "original_commit_id": "bea6bc459c6829df8be725bc163f944501d55107",
        "user": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "The docstring isn't aligned with the fetch method (it can collect issues before a given date as well).\r\n\r\n ```\r\nThe method retrieves, from a Pagure repository, the issues updated since/until the given date.",
        "created_at": "2020-03-07T10:52:28Z",
        "updated_at": "2020-03-08T18:21:42Z",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r389245960",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621",
        "author_association": "MEMBER",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389245960"
          },
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r389245960"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389245960/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "user_data": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false,
          "name": "valerio",
          "company": "@Bitergia ",
          "blog": "http://valeriocos.github.io/",
          "location": "Madrid, Spain",
          "email": "valcos@bitergia.com",
          "hireable": true,
          "bio": null,
          "public_repos": 57,
          "public_gists": 28,
          "followers": 34,
          "following": 5,
          "created_at": "2014-01-27T14:30:30Z",
          "updated_at": "2020-03-17T10:02:44Z",
          "organizations": [
            {
              "login": "Bitergia",
              "id": 1918070,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=",
              "url": "https://api.github.com/orgs/Bitergia",
              "repos_url": "https://api.github.com/orgs/Bitergia/repos",
              "events_url": "https://api.github.com/orgs/Bitergia/events",
              "hooks_url": "https://api.github.com/orgs/Bitergia/hooks",
              "issues_url": "https://api.github.com/orgs/Bitergia/issues",
              "members_url": "https://api.github.com/orgs/Bitergia/members{/member}",
              "public_members_url": "https://api.github.com/orgs/Bitergia/public_members{/member}",
              "avatar_url": "https://avatars3.githubusercontent.com/u/1918070?v=4",
              "description": null
            },
            {
              "login": "grimoirelab",
              "id": 16151805,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1",
              "url": "https://api.github.com/orgs/grimoirelab",
              "repos_url": "https://api.github.com/orgs/grimoirelab/repos",
              "events_url": "https://api.github.com/orgs/grimoirelab/events",
              "hooks_url": "https://api.github.com/orgs/grimoirelab/hooks",
              "issues_url": "https://api.github.com/orgs/grimoirelab/issues",
              "members_url": "https://api.github.com/orgs/grimoirelab/members{/member}",
              "public_members_url": "https://api.github.com/orgs/grimoirelab/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/16151805?v=4",
              "description": ""
            },
            {
              "login": "chaoss",
              "id": 29740296,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
              "url": "https://api.github.com/orgs/chaoss",
              "repos_url": "https://api.github.com/orgs/chaoss/repos",
              "events_url": "https://api.github.com/orgs/chaoss/events",
              "hooks_url": "https://api.github.com/orgs/chaoss/hooks",
              "issues_url": "https://api.github.com/orgs/chaoss/issues",
              "members_url": "https://api.github.com/orgs/chaoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/chaoss/public_members{/member}",
              "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
              "description": ""
            }
          ]
        },
        "reactions_data": []
      },
      {
        "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389246418",
        "pull_request_review_id": 370737508,
        "id": 389246418,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0NjQxOA==",
        "diff_hunk": "@@ -0,0 +1,404 @@\n+# -*- coding: utf-8 -*-\n+#\n+# Copyright (C) 2015-2020 Bitergia\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program. If not, see <http://www.gnu.org/licenses/>.\n+#\n+# Authors:\n+#     Animesh Kumar <animuz111@gmail.com>\n+#\n+\n+import json\n+import logging\n+import requests\n+from grimoirelab_toolkit.datetime import (str_to_datetime)\n+from grimoirelab_toolkit.uris import urijoin\n+\n+from ...backend import (Backend,\n+                        BackendCommand,\n+                        BackendCommandArgumentParser,\n+                        DEFAULT_SEARCH_FIELD)\n+from ...client import HttpClient, RateLimitHandler\n+from ...utils import DEFAULT_DATETIME, DEFAULT_LAST_DATETIME\n+from datetime import datetime\n+\n+CATEGORY_ISSUE = \"issue\"\n+\n+PAGURE_URL = \"https://pagure.io/\"\n+PAGURE_API_URL = \"https://pagure.io/api/0\"\n+\n+MAX_CATEGORY_ITEMS_PER_PAGE = 100\n+PER_PAGE = 100\n+\n+# Default sleep time and retries to deal with connection/server problems\n+DEFAULT_SLEEP_TIME = 1\n+MAX_RETRIES = 5\n+\n+logger = logging.getLogger(__name__)\n+\n+\n+class Pagure(Backend):\n+    \"\"\"Pagure backend for Perceval.\n+\n+    This class allows the fetch the issues stored in Pagure\n+    repository. Note that api token is needed to perform\n+    certain API calls\n+\n+    :param namespace: Pagure namespace\n+    :param repository: Pagure repository; in case the repository is within a namespace\n+    :param api_token: Pagure API token to access the API\n+    :param tag: label used to mark the data\n+    :param archive: archive to store/retrieve items\n+    :param max_retries: number of max retries to a data source\n+        before raising a RetryError exception\n+    :param max_items: max number of category items (e.g., issues,\n+        pull requests) per query\n+    :param sleep_time: time to sleep in case\n+        of connection problems\n+    :param ssl_verify: enable/disable SSL verification\n+    \"\"\"\n+    version = '0.1.0'\n+\n+    CATEGORIES = [CATEGORY_ISSUE]\n+\n+    def __init__(self, namespace=None, repository=None,\n+                 api_token=None,\n+                 tag=None, archive=None,\n+                 max_retries=MAX_RETRIES, sleep_time=DEFAULT_SLEEP_TIME,\n+                 max_items=MAX_CATEGORY_ITEMS_PER_PAGE, ssl_verify=True):\n+        origin = PAGURE_URL\n+\n+        # In case repository is under a namespace add the namespace as well to the origin\n+        origin = urijoin(origin, namespace, repository) if namespace else urijoin(origin, repository)\n+\n+        super().__init__(origin, tag=tag, archive=archive, ssl_verify=ssl_verify)\n+\n+        self.namespace = namespace\n+        self.repository = repository\n+        self.api_token = api_token\n+        self.max_retries = max_retries\n+        self.sleep_time = sleep_time\n+        self.max_items = max_items\n+\n+        self.client = None\n+\n+    def search_fields(self, item):\n+        \"\"\"Add search fields to an item.\n+\n+        It adds the values of `metadata_id` plus the `namespace` and `repo`.\n+\n+        :param item: the item to extract the search fields values\n+\n+        :returns: a dict of search fields\n+        \"\"\"\n+        search_fields = {\n+            DEFAULT_SEARCH_FIELD: self.metadata_id(item),\n+            'namespace': self.namespace,\n+            'repo': self.repository\n+        }\n+\n+        return search_fields\n+\n+    def fetch(self, category=CATEGORY_ISSUE, from_date=DEFAULT_DATETIME, to_date=DEFAULT_LAST_DATETIME,\n+              filter_classified=False):\n+        \"\"\"Fetch the issues from the repository.\n+\n+        The method retrieves, from a Pagure repository, the issues\n+        updated since the given date.\n+\n+        :param category: the category of items to fetch\n+        :param from_date: obtain issues updated since this date\n+        :param to_date: obtain issues until a until a specific date (included)\n+        :param filter_classified: remove classified fields from the resulting items\n+\n+        :returns: a generator of issues\n+        \"\"\"\n+        if not from_date:\n+            from_date = DEFAULT_DATETIME\n+\n+        if not to_date:\n+            to_date = DEFAULT_LAST_DATETIME\n+\n+        from_date = from_date.strftime('%Y-%m-%d')\n+        to_date = to_date.strftime('%Y-%m-%d')\n+        kwargs = {\n+            'from_date': from_date,\n+            'to_date': to_date\n+        }\n+        items = super().fetch(category,\n+                              filter_classified=filter_classified,\n+                              **kwargs)\n+\n+        return items\n+\n+    def fetch_items(self, category, **kwargs):\n+        \"\"\"Fetch the items (issues)\n+\n+        :param category: the category of items to fetch\n+        :param kwargs: backend arguments\n+\n+        :returns: a generator of items\n+        \"\"\"\n+        from_date = kwargs['from_date']\n+        to_date = kwargs['to_date']\n+        items = self.__fetch_issues(from_date, to_date)\n+        return items\n+\n+    @classmethod\n+    def has_archiving(cls):\n+        \"\"\"Returns whether it supports archiving items on the fetch process.\n+\n+        :returns: this backend supports items archive\n+        \"\"\"\n+        return True\n+\n+    @classmethod\n+    def has_resuming(cls):\n+        \"\"\"Returns whether it supports to resume the fetch process.\n+\n+        :returns: this backend supports items resuming\n+        \"\"\"\n+        return True\n+\n+    @staticmethod\n+    def metadata_id(item):\n+        \"\"\"Extracts the identifier from a Pagure item.\"\"\"\n+\n+        return str(item['id'])\n+\n+    @staticmethod\n+    def metadata_updated_on(item):\n+        \"\"\"Extracts the update time from a Pagure item.\n+\n+        The timestamp used is extracted from 'last_updated' field.\n+        This date is converted to UNIX timestamp format. As Pagure\n+        dates are in timestamp format the conversion is straightforward.\n+\n+        :param item: item generated by the backend\n+\n+        :returns: a UNIX timestamp\n+        \"\"\"\n+        ts = int(item['last_updated'])\n+        ts = datetime.fromtimestamp(ts).timestamp()\n+\n+        return ts\n+\n+    @staticmethod\n+    def metadata_category(item):\n+        \"\"\"Extracts the category from a Pagure item.\n+\n+        This backend generates one type of item which is\n+        'issue'.\n+        \"\"\"\n+        category = CATEGORY_ISSUE\n+\n+        return category\n+\n+    def _init_client(self, from_archive=False):\n+        \"\"\"Init client\"\"\"\n+\n+        return PagureClient(self.namespace, self.repository, self.api_token,\n+                            self.sleep_time, self.max_retries, self.max_items,\n+                            self.archive, from_archive, self.ssl_verify)\n+\n+    def __fetch_issues(self, from_date, to_date):\n+        \"\"\"Fetch the issues\n+        :param from_date: starting date from which issues are fetched\n+        :param to_date: ending date till which issues are fetched\n+\n+        :returns: an issue object\n+        \"\"\"\n+        issues_groups = self.client.issues(from_date=from_date)\n+\n+        for raw_issues in issues_groups:\n+            issues = json.loads(raw_issues)\n+            issues = issues['issues']\n+            for issue in issues:\n+\n+                if int(issue['last_updated']) > str_to_datetime(to_date).timestamp():\n+                    return\n+\n+                yield issue\n+\n+\n+class PagureClient(HttpClient, RateLimitHandler):\n+    \"\"\"Client for retieving information from Pagure API",
        "path": "perceval/backends/core/pagure.py",
        "position": null,
        "original_position": 236,
        "commit_id": "70a89aa1dccc5152ed4a52cb4c5e4e327ba3595a",
        "original_commit_id": "bea6bc459c6829df8be725bc163f944501d55107",
        "user": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "Small typo: retieving",
        "created_at": "2020-03-07T10:59:58Z",
        "updated_at": "2020-03-08T18:21:42Z",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r389246418",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621",
        "author_association": "MEMBER",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389246418"
          },
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r389246418"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389246418/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "user_data": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false,
          "name": "valerio",
          "company": "@Bitergia ",
          "blog": "http://valeriocos.github.io/",
          "location": "Madrid, Spain",
          "email": "valcos@bitergia.com",
          "hireable": true,
          "bio": null,
          "public_repos": 57,
          "public_gists": 28,
          "followers": 34,
          "following": 5,
          "created_at": "2014-01-27T14:30:30Z",
          "updated_at": "2020-03-17T10:02:44Z",
          "organizations": [
            {
              "login": "Bitergia",
              "id": 1918070,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=",
              "url": "https://api.github.com/orgs/Bitergia",
              "repos_url": "https://api.github.com/orgs/Bitergia/repos",
              "events_url": "https://api.github.com/orgs/Bitergia/events",
              "hooks_url": "https://api.github.com/orgs/Bitergia/hooks",
              "issues_url": "https://api.github.com/orgs/Bitergia/issues",
              "members_url": "https://api.github.com/orgs/Bitergia/members{/member}",
              "public_members_url": "https://api.github.com/orgs/Bitergia/public_members{/member}",
              "avatar_url": "https://avatars3.githubusercontent.com/u/1918070?v=4",
              "description": null
            },
            {
              "login": "grimoirelab",
              "id": 16151805,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1",
              "url": "https://api.github.com/orgs/grimoirelab",
              "repos_url": "https://api.github.com/orgs/grimoirelab/repos",
              "events_url": "https://api.github.com/orgs/grimoirelab/events",
              "hooks_url": "https://api.github.com/orgs/grimoirelab/hooks",
              "issues_url": "https://api.github.com/orgs/grimoirelab/issues",
              "members_url": "https://api.github.com/orgs/grimoirelab/members{/member}",
              "public_members_url": "https://api.github.com/orgs/grimoirelab/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/16151805?v=4",
              "description": ""
            },
            {
              "login": "chaoss",
              "id": 29740296,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
              "url": "https://api.github.com/orgs/chaoss",
              "repos_url": "https://api.github.com/orgs/chaoss/repos",
              "events_url": "https://api.github.com/orgs/chaoss/events",
              "hooks_url": "https://api.github.com/orgs/chaoss/hooks",
              "issues_url": "https://api.github.com/orgs/chaoss/issues",
              "members_url": "https://api.github.com/orgs/chaoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/chaoss/public_members{/member}",
              "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
              "description": ""
            }
          ]
        },
        "reactions_data": []
      },
      {
        "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389246570",
        "pull_request_review_id": 370737508,
        "id": 389246570,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0NjU3MA==",
        "diff_hunk": "@@ -0,0 +1,404 @@\n+# -*- coding: utf-8 -*-\n+#\n+# Copyright (C) 2015-2020 Bitergia\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program. If not, see <http://www.gnu.org/licenses/>.\n+#\n+# Authors:\n+#     Animesh Kumar <animuz111@gmail.com>\n+#\n+\n+import json\n+import logging\n+import requests\n+from grimoirelab_toolkit.datetime import (str_to_datetime)\n+from grimoirelab_toolkit.uris import urijoin\n+\n+from ...backend import (Backend,\n+                        BackendCommand,\n+                        BackendCommandArgumentParser,\n+                        DEFAULT_SEARCH_FIELD)\n+from ...client import HttpClient, RateLimitHandler\n+from ...utils import DEFAULT_DATETIME, DEFAULT_LAST_DATETIME\n+from datetime import datetime\n+\n+CATEGORY_ISSUE = \"issue\"\n+\n+PAGURE_URL = \"https://pagure.io/\"\n+PAGURE_API_URL = \"https://pagure.io/api/0\"\n+\n+MAX_CATEGORY_ITEMS_PER_PAGE = 100\n+PER_PAGE = 100\n+\n+# Default sleep time and retries to deal with connection/server problems\n+DEFAULT_SLEEP_TIME = 1\n+MAX_RETRIES = 5\n+\n+logger = logging.getLogger(__name__)\n+\n+\n+class Pagure(Backend):\n+    \"\"\"Pagure backend for Perceval.\n+\n+    This class allows the fetch the issues stored in Pagure\n+    repository. Note that api token is needed to perform\n+    certain API calls\n+\n+    :param namespace: Pagure namespace\n+    :param repository: Pagure repository; in case the repository is within a namespace\n+    :param api_token: Pagure API token to access the API\n+    :param tag: label used to mark the data\n+    :param archive: archive to store/retrieve items\n+    :param max_retries: number of max retries to a data source\n+        before raising a RetryError exception\n+    :param max_items: max number of category items (e.g., issues,\n+        pull requests) per query\n+    :param sleep_time: time to sleep in case\n+        of connection problems\n+    :param ssl_verify: enable/disable SSL verification\n+    \"\"\"\n+    version = '0.1.0'\n+\n+    CATEGORIES = [CATEGORY_ISSUE]\n+\n+    def __init__(self, namespace=None, repository=None,\n+                 api_token=None,\n+                 tag=None, archive=None,\n+                 max_retries=MAX_RETRIES, sleep_time=DEFAULT_SLEEP_TIME,\n+                 max_items=MAX_CATEGORY_ITEMS_PER_PAGE, ssl_verify=True):\n+        origin = PAGURE_URL\n+\n+        # In case repository is under a namespace add the namespace as well to the origin\n+        origin = urijoin(origin, namespace, repository) if namespace else urijoin(origin, repository)\n+\n+        super().__init__(origin, tag=tag, archive=archive, ssl_verify=ssl_verify)\n+\n+        self.namespace = namespace\n+        self.repository = repository\n+        self.api_token = api_token\n+        self.max_retries = max_retries\n+        self.sleep_time = sleep_time\n+        self.max_items = max_items\n+\n+        self.client = None\n+\n+    def search_fields(self, item):\n+        \"\"\"Add search fields to an item.\n+\n+        It adds the values of `metadata_id` plus the `namespace` and `repo`.\n+\n+        :param item: the item to extract the search fields values\n+\n+        :returns: a dict of search fields\n+        \"\"\"\n+        search_fields = {\n+            DEFAULT_SEARCH_FIELD: self.metadata_id(item),\n+            'namespace': self.namespace,\n+            'repo': self.repository\n+        }\n+\n+        return search_fields\n+\n+    def fetch(self, category=CATEGORY_ISSUE, from_date=DEFAULT_DATETIME, to_date=DEFAULT_LAST_DATETIME,\n+              filter_classified=False):\n+        \"\"\"Fetch the issues from the repository.\n+\n+        The method retrieves, from a Pagure repository, the issues\n+        updated since the given date.\n+\n+        :param category: the category of items to fetch\n+        :param from_date: obtain issues updated since this date\n+        :param to_date: obtain issues until a until a specific date (included)\n+        :param filter_classified: remove classified fields from the resulting items\n+\n+        :returns: a generator of issues\n+        \"\"\"\n+        if not from_date:\n+            from_date = DEFAULT_DATETIME\n+\n+        if not to_date:\n+            to_date = DEFAULT_LAST_DATETIME\n+\n+        from_date = from_date.strftime('%Y-%m-%d')\n+        to_date = to_date.strftime('%Y-%m-%d')\n+        kwargs = {\n+            'from_date': from_date,\n+            'to_date': to_date\n+        }\n+        items = super().fetch(category,\n+                              filter_classified=filter_classified,\n+                              **kwargs)\n+\n+        return items\n+\n+    def fetch_items(self, category, **kwargs):\n+        \"\"\"Fetch the items (issues)\n+\n+        :param category: the category of items to fetch\n+        :param kwargs: backend arguments\n+\n+        :returns: a generator of items\n+        \"\"\"\n+        from_date = kwargs['from_date']\n+        to_date = kwargs['to_date']\n+        items = self.__fetch_issues(from_date, to_date)\n+        return items\n+\n+    @classmethod\n+    def has_archiving(cls):\n+        \"\"\"Returns whether it supports archiving items on the fetch process.\n+\n+        :returns: this backend supports items archive\n+        \"\"\"\n+        return True\n+\n+    @classmethod\n+    def has_resuming(cls):\n+        \"\"\"Returns whether it supports to resume the fetch process.\n+\n+        :returns: this backend supports items resuming\n+        \"\"\"\n+        return True\n+\n+    @staticmethod\n+    def metadata_id(item):\n+        \"\"\"Extracts the identifier from a Pagure item.\"\"\"\n+\n+        return str(item['id'])\n+\n+    @staticmethod\n+    def metadata_updated_on(item):\n+        \"\"\"Extracts the update time from a Pagure item.\n+\n+        The timestamp used is extracted from 'last_updated' field.\n+        This date is converted to UNIX timestamp format. As Pagure\n+        dates are in timestamp format the conversion is straightforward.\n+\n+        :param item: item generated by the backend\n+\n+        :returns: a UNIX timestamp\n+        \"\"\"\n+        ts = int(item['last_updated'])\n+        ts = datetime.fromtimestamp(ts).timestamp()\n+\n+        return ts\n+\n+    @staticmethod\n+    def metadata_category(item):\n+        \"\"\"Extracts the category from a Pagure item.\n+\n+        This backend generates one type of item which is\n+        'issue'.\n+        \"\"\"\n+        category = CATEGORY_ISSUE\n+\n+        return category\n+\n+    def _init_client(self, from_archive=False):\n+        \"\"\"Init client\"\"\"\n+\n+        return PagureClient(self.namespace, self.repository, self.api_token,\n+                            self.sleep_time, self.max_retries, self.max_items,\n+                            self.archive, from_archive, self.ssl_verify)\n+\n+    def __fetch_issues(self, from_date, to_date):\n+        \"\"\"Fetch the issues\n+        :param from_date: starting date from which issues are fetched\n+        :param to_date: ending date till which issues are fetched\n+\n+        :returns: an issue object\n+        \"\"\"\n+        issues_groups = self.client.issues(from_date=from_date)\n+\n+        for raw_issues in issues_groups:\n+            issues = json.loads(raw_issues)\n+            issues = issues['issues']\n+            for issue in issues:\n+\n+                if int(issue['last_updated']) > str_to_datetime(to_date).timestamp():\n+                    return\n+\n+                yield issue\n+\n+\n+class PagureClient(HttpClient, RateLimitHandler):",
        "path": "perceval/backends/core/pagure.py",
        "position": null,
        "original_position": 235,
        "commit_id": "70a89aa1dccc5152ed4a52cb4c5e4e327ba3595a",
        "original_commit_id": "bea6bc459c6829df8be725bc163f944501d55107",
        "user": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "RateLimitHandler can be removed, I don't see any rate limit information in the API and in the response. Did you find something?",
        "created_at": "2020-03-07T11:02:04Z",
        "updated_at": "2020-03-08T18:21:42Z",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r389246570",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621",
        "author_association": "MEMBER",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389246570"
          },
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r389246570"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389246570/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "user_data": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false,
          "name": "valerio",
          "company": "@Bitergia ",
          "blog": "http://valeriocos.github.io/",
          "location": "Madrid, Spain",
          "email": "valcos@bitergia.com",
          "hireable": true,
          "bio": null,
          "public_repos": 57,
          "public_gists": 28,
          "followers": 34,
          "following": 5,
          "created_at": "2014-01-27T14:30:30Z",
          "updated_at": "2020-03-17T10:02:44Z",
          "organizations": [
            {
              "login": "Bitergia",
              "id": 1918070,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=",
              "url": "https://api.github.com/orgs/Bitergia",
              "repos_url": "https://api.github.com/orgs/Bitergia/repos",
              "events_url": "https://api.github.com/orgs/Bitergia/events",
              "hooks_url": "https://api.github.com/orgs/Bitergia/hooks",
              "issues_url": "https://api.github.com/orgs/Bitergia/issues",
              "members_url": "https://api.github.com/orgs/Bitergia/members{/member}",
              "public_members_url": "https://api.github.com/orgs/Bitergia/public_members{/member}",
              "avatar_url": "https://avatars3.githubusercontent.com/u/1918070?v=4",
              "description": null
            },
            {
              "login": "grimoirelab",
              "id": 16151805,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1",
              "url": "https://api.github.com/orgs/grimoirelab",
              "repos_url": "https://api.github.com/orgs/grimoirelab/repos",
              "events_url": "https://api.github.com/orgs/grimoirelab/events",
              "hooks_url": "https://api.github.com/orgs/grimoirelab/hooks",
              "issues_url": "https://api.github.com/orgs/grimoirelab/issues",
              "members_url": "https://api.github.com/orgs/grimoirelab/members{/member}",
              "public_members_url": "https://api.github.com/orgs/grimoirelab/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/16151805?v=4",
              "description": ""
            },
            {
              "login": "chaoss",
              "id": 29740296,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
              "url": "https://api.github.com/orgs/chaoss",
              "repos_url": "https://api.github.com/orgs/chaoss/repos",
              "events_url": "https://api.github.com/orgs/chaoss/events",
              "hooks_url": "https://api.github.com/orgs/chaoss/hooks",
              "issues_url": "https://api.github.com/orgs/chaoss/issues",
              "members_url": "https://api.github.com/orgs/chaoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/chaoss/public_members{/member}",
              "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
              "description": ""
            }
          ]
        },
        "reactions_data": []
      },
      {
        "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389246721",
        "pull_request_review_id": 370737508,
        "id": 389246721,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0NjcyMQ==",
        "diff_hunk": "@@ -0,0 +1,404 @@\n+# -*- coding: utf-8 -*-\n+#\n+# Copyright (C) 2015-2020 Bitergia\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program. If not, see <http://www.gnu.org/licenses/>.\n+#\n+# Authors:\n+#     Animesh Kumar <animuz111@gmail.com>\n+#\n+\n+import json\n+import logging\n+import requests\n+from grimoirelab_toolkit.datetime import (str_to_datetime)\n+from grimoirelab_toolkit.uris import urijoin\n+\n+from ...backend import (Backend,\n+                        BackendCommand,\n+                        BackendCommandArgumentParser,\n+                        DEFAULT_SEARCH_FIELD)\n+from ...client import HttpClient, RateLimitHandler\n+from ...utils import DEFAULT_DATETIME, DEFAULT_LAST_DATETIME\n+from datetime import datetime\n+\n+CATEGORY_ISSUE = \"issue\"\n+\n+PAGURE_URL = \"https://pagure.io/\"\n+PAGURE_API_URL = \"https://pagure.io/api/0\"\n+\n+MAX_CATEGORY_ITEMS_PER_PAGE = 100\n+PER_PAGE = 100\n+\n+# Default sleep time and retries to deal with connection/server problems\n+DEFAULT_SLEEP_TIME = 1\n+MAX_RETRIES = 5\n+\n+logger = logging.getLogger(__name__)\n+\n+\n+class Pagure(Backend):\n+    \"\"\"Pagure backend for Perceval.\n+\n+    This class allows the fetch the issues stored in Pagure\n+    repository. Note that api token is needed to perform\n+    certain API calls\n+\n+    :param namespace: Pagure namespace\n+    :param repository: Pagure repository; in case the repository is within a namespace\n+    :param api_token: Pagure API token to access the API\n+    :param tag: label used to mark the data\n+    :param archive: archive to store/retrieve items\n+    :param max_retries: number of max retries to a data source\n+        before raising a RetryError exception\n+    :param max_items: max number of category items (e.g., issues,\n+        pull requests) per query\n+    :param sleep_time: time to sleep in case\n+        of connection problems\n+    :param ssl_verify: enable/disable SSL verification\n+    \"\"\"\n+    version = '0.1.0'\n+\n+    CATEGORIES = [CATEGORY_ISSUE]\n+\n+    def __init__(self, namespace=None, repository=None,\n+                 api_token=None,\n+                 tag=None, archive=None,\n+                 max_retries=MAX_RETRIES, sleep_time=DEFAULT_SLEEP_TIME,\n+                 max_items=MAX_CATEGORY_ITEMS_PER_PAGE, ssl_verify=True):\n+        origin = PAGURE_URL\n+\n+        # In case repository is under a namespace add the namespace as well to the origin\n+        origin = urijoin(origin, namespace, repository) if namespace else urijoin(origin, repository)\n+\n+        super().__init__(origin, tag=tag, archive=archive, ssl_verify=ssl_verify)\n+\n+        self.namespace = namespace\n+        self.repository = repository\n+        self.api_token = api_token\n+        self.max_retries = max_retries\n+        self.sleep_time = sleep_time\n+        self.max_items = max_items\n+\n+        self.client = None\n+\n+    def search_fields(self, item):\n+        \"\"\"Add search fields to an item.\n+\n+        It adds the values of `metadata_id` plus the `namespace` and `repo`.\n+\n+        :param item: the item to extract the search fields values\n+\n+        :returns: a dict of search fields\n+        \"\"\"\n+        search_fields = {\n+            DEFAULT_SEARCH_FIELD: self.metadata_id(item),\n+            'namespace': self.namespace,\n+            'repo': self.repository\n+        }\n+\n+        return search_fields\n+\n+    def fetch(self, category=CATEGORY_ISSUE, from_date=DEFAULT_DATETIME, to_date=DEFAULT_LAST_DATETIME,\n+              filter_classified=False):\n+        \"\"\"Fetch the issues from the repository.\n+\n+        The method retrieves, from a Pagure repository, the issues\n+        updated since the given date.\n+\n+        :param category: the category of items to fetch\n+        :param from_date: obtain issues updated since this date\n+        :param to_date: obtain issues until a until a specific date (included)\n+        :param filter_classified: remove classified fields from the resulting items\n+\n+        :returns: a generator of issues\n+        \"\"\"\n+        if not from_date:\n+            from_date = DEFAULT_DATETIME\n+\n+        if not to_date:\n+            to_date = DEFAULT_LAST_DATETIME\n+\n+        from_date = from_date.strftime('%Y-%m-%d')\n+        to_date = to_date.strftime('%Y-%m-%d')\n+        kwargs = {\n+            'from_date': from_date,\n+            'to_date': to_date\n+        }\n+        items = super().fetch(category,\n+                              filter_classified=filter_classified,\n+                              **kwargs)\n+\n+        return items\n+\n+    def fetch_items(self, category, **kwargs):\n+        \"\"\"Fetch the items (issues)\n+\n+        :param category: the category of items to fetch\n+        :param kwargs: backend arguments\n+\n+        :returns: a generator of items\n+        \"\"\"\n+        from_date = kwargs['from_date']\n+        to_date = kwargs['to_date']\n+        items = self.__fetch_issues(from_date, to_date)\n+        return items\n+\n+    @classmethod\n+    def has_archiving(cls):\n+        \"\"\"Returns whether it supports archiving items on the fetch process.\n+\n+        :returns: this backend supports items archive\n+        \"\"\"\n+        return True\n+\n+    @classmethod\n+    def has_resuming(cls):\n+        \"\"\"Returns whether it supports to resume the fetch process.\n+\n+        :returns: this backend supports items resuming\n+        \"\"\"\n+        return True\n+\n+    @staticmethod\n+    def metadata_id(item):\n+        \"\"\"Extracts the identifier from a Pagure item.\"\"\"\n+\n+        return str(item['id'])\n+\n+    @staticmethod\n+    def metadata_updated_on(item):\n+        \"\"\"Extracts the update time from a Pagure item.\n+\n+        The timestamp used is extracted from 'last_updated' field.\n+        This date is converted to UNIX timestamp format. As Pagure\n+        dates are in timestamp format the conversion is straightforward.\n+\n+        :param item: item generated by the backend\n+\n+        :returns: a UNIX timestamp\n+        \"\"\"\n+        ts = int(item['last_updated'])\n+        ts = datetime.fromtimestamp(ts).timestamp()\n+\n+        return ts\n+\n+    @staticmethod\n+    def metadata_category(item):\n+        \"\"\"Extracts the category from a Pagure item.\n+\n+        This backend generates one type of item which is\n+        'issue'.\n+        \"\"\"\n+        category = CATEGORY_ISSUE\n+\n+        return category\n+\n+    def _init_client(self, from_archive=False):\n+        \"\"\"Init client\"\"\"\n+\n+        return PagureClient(self.namespace, self.repository, self.api_token,\n+                            self.sleep_time, self.max_retries, self.max_items,\n+                            self.archive, from_archive, self.ssl_verify)\n+\n+    def __fetch_issues(self, from_date, to_date):\n+        \"\"\"Fetch the issues\n+        :param from_date: starting date from which issues are fetched\n+        :param to_date: ending date till which issues are fetched\n+\n+        :returns: an issue object\n+        \"\"\"\n+        issues_groups = self.client.issues(from_date=from_date)\n+\n+        for raw_issues in issues_groups:\n+            issues = json.loads(raw_issues)\n+            issues = issues['issues']\n+            for issue in issues:\n+\n+                if int(issue['last_updated']) > str_to_datetime(to_date).timestamp():\n+                    return\n+\n+                yield issue\n+\n+\n+class PagureClient(HttpClient, RateLimitHandler):\n+    \"\"\"Client for retieving information from Pagure API\n+\n+    :param namespace: Pagure namespace\n+    :param repository: Pagure repository; incase the repository is within a namespace\n+    :param token: Pagure API token to access the API\n+    :param sleep_time: time to sleep in case\n+        of connection problems\n+    :param max_retries: number of max retries to a data source\n+        before raising a RetryError exception\n+    :param max_items: max number of category items (e.g., issues,\n+        pull requests) per query\n+    :param archive: collect issues already retrieved from an archive\n+    :param from_archive: it tells whether to write/read the archive\n+    :param ssl_verify: enable/disable SSL verification\n+    \"\"\"\n+    EXTRA_STATUS_FORCELIST = [403, 500, 502, 503]\n+\n+    def __init__(self, namespace, repository, token,\n+                 sleep_time=DEFAULT_SLEEP_TIME, max_retries=MAX_RETRIES,\n+                 max_items=MAX_CATEGORY_ITEMS_PER_PAGE, archive=None, from_archive=False, ssl_verify=True):\n+        self.namespace = namespace\n+        self.repository = repository\n+        self.token = token\n+        self.max_items = max_items\n+\n+        # URL to fetch the data from\n+        base_url = PAGURE_API_URL\n+\n+        super().__init__(base_url, sleep_time=sleep_time, max_retries=max_retries,\n+                         extra_headers=self._set_extra_headers(),\n+                         extra_status_forcelist=self.EXTRA_STATUS_FORCELIST,",
        "path": "perceval/backends/core/pagure.py",
        "position": null,
        "original_position": 266,
        "commit_id": "70a89aa1dccc5152ed4a52cb4c5e4e327ba3595a",
        "original_commit_id": "bea6bc459c6829df8be725bc163f944501d55107",
        "user": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "extra_status_forcelist can be removed. We can rely on the default status (https://github.com/chaoss/grimoirelab-perceval/blob/master/perceval/client.py#L81)",
        "created_at": "2020-03-07T11:04:21Z",
        "updated_at": "2020-03-08T18:21:42Z",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r389246721",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621",
        "author_association": "MEMBER",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389246721"
          },
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r389246721"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389246721/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "user_data": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false,
          "name": "valerio",
          "company": "@Bitergia ",
          "blog": "http://valeriocos.github.io/",
          "location": "Madrid, Spain",
          "email": "valcos@bitergia.com",
          "hireable": true,
          "bio": null,
          "public_repos": 57,
          "public_gists": 28,
          "followers": 34,
          "following": 5,
          "created_at": "2014-01-27T14:30:30Z",
          "updated_at": "2020-03-17T10:02:44Z",
          "organizations": [
            {
              "login": "Bitergia",
              "id": 1918070,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=",
              "url": "https://api.github.com/orgs/Bitergia",
              "repos_url": "https://api.github.com/orgs/Bitergia/repos",
              "events_url": "https://api.github.com/orgs/Bitergia/events",
              "hooks_url": "https://api.github.com/orgs/Bitergia/hooks",
              "issues_url": "https://api.github.com/orgs/Bitergia/issues",
              "members_url": "https://api.github.com/orgs/Bitergia/members{/member}",
              "public_members_url": "https://api.github.com/orgs/Bitergia/public_members{/member}",
              "avatar_url": "https://avatars3.githubusercontent.com/u/1918070?v=4",
              "description": null
            },
            {
              "login": "grimoirelab",
              "id": 16151805,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1",
              "url": "https://api.github.com/orgs/grimoirelab",
              "repos_url": "https://api.github.com/orgs/grimoirelab/repos",
              "events_url": "https://api.github.com/orgs/grimoirelab/events",
              "hooks_url": "https://api.github.com/orgs/grimoirelab/hooks",
              "issues_url": "https://api.github.com/orgs/grimoirelab/issues",
              "members_url": "https://api.github.com/orgs/grimoirelab/members{/member}",
              "public_members_url": "https://api.github.com/orgs/grimoirelab/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/16151805?v=4",
              "description": ""
            },
            {
              "login": "chaoss",
              "id": 29740296,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
              "url": "https://api.github.com/orgs/chaoss",
              "repos_url": "https://api.github.com/orgs/chaoss/repos",
              "events_url": "https://api.github.com/orgs/chaoss/events",
              "hooks_url": "https://api.github.com/orgs/chaoss/hooks",
              "issues_url": "https://api.github.com/orgs/chaoss/issues",
              "members_url": "https://api.github.com/orgs/chaoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/chaoss/public_members{/member}",
              "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
              "description": ""
            }
          ]
        },
        "reactions_data": []
      },
      {
        "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389246747",
        "pull_request_review_id": 370737508,
        "id": 389246747,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0Njc0Nw==",
        "diff_hunk": "@@ -0,0 +1,404 @@\n+# -*- coding: utf-8 -*-\n+#\n+# Copyright (C) 2015-2020 Bitergia\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program. If not, see <http://www.gnu.org/licenses/>.\n+#\n+# Authors:\n+#     Animesh Kumar <animuz111@gmail.com>\n+#\n+\n+import json\n+import logging\n+import requests\n+from grimoirelab_toolkit.datetime import (str_to_datetime)\n+from grimoirelab_toolkit.uris import urijoin\n+\n+from ...backend import (Backend,\n+                        BackendCommand,\n+                        BackendCommandArgumentParser,\n+                        DEFAULT_SEARCH_FIELD)\n+from ...client import HttpClient, RateLimitHandler\n+from ...utils import DEFAULT_DATETIME, DEFAULT_LAST_DATETIME\n+from datetime import datetime\n+\n+CATEGORY_ISSUE = \"issue\"\n+\n+PAGURE_URL = \"https://pagure.io/\"\n+PAGURE_API_URL = \"https://pagure.io/api/0\"\n+\n+MAX_CATEGORY_ITEMS_PER_PAGE = 100\n+PER_PAGE = 100\n+\n+# Default sleep time and retries to deal with connection/server problems\n+DEFAULT_SLEEP_TIME = 1\n+MAX_RETRIES = 5\n+\n+logger = logging.getLogger(__name__)\n+\n+\n+class Pagure(Backend):\n+    \"\"\"Pagure backend for Perceval.\n+\n+    This class allows the fetch the issues stored in Pagure\n+    repository. Note that api token is needed to perform\n+    certain API calls\n+\n+    :param namespace: Pagure namespace\n+    :param repository: Pagure repository; in case the repository is within a namespace\n+    :param api_token: Pagure API token to access the API\n+    :param tag: label used to mark the data\n+    :param archive: archive to store/retrieve items\n+    :param max_retries: number of max retries to a data source\n+        before raising a RetryError exception\n+    :param max_items: max number of category items (e.g., issues,\n+        pull requests) per query\n+    :param sleep_time: time to sleep in case\n+        of connection problems\n+    :param ssl_verify: enable/disable SSL verification\n+    \"\"\"\n+    version = '0.1.0'\n+\n+    CATEGORIES = [CATEGORY_ISSUE]\n+\n+    def __init__(self, namespace=None, repository=None,\n+                 api_token=None,\n+                 tag=None, archive=None,\n+                 max_retries=MAX_RETRIES, sleep_time=DEFAULT_SLEEP_TIME,\n+                 max_items=MAX_CATEGORY_ITEMS_PER_PAGE, ssl_verify=True):\n+        origin = PAGURE_URL\n+\n+        # In case repository is under a namespace add the namespace as well to the origin\n+        origin = urijoin(origin, namespace, repository) if namespace else urijoin(origin, repository)\n+\n+        super().__init__(origin, tag=tag, archive=archive, ssl_verify=ssl_verify)\n+\n+        self.namespace = namespace\n+        self.repository = repository\n+        self.api_token = api_token\n+        self.max_retries = max_retries\n+        self.sleep_time = sleep_time\n+        self.max_items = max_items\n+\n+        self.client = None\n+\n+    def search_fields(self, item):\n+        \"\"\"Add search fields to an item.\n+\n+        It adds the values of `metadata_id` plus the `namespace` and `repo`.\n+\n+        :param item: the item to extract the search fields values\n+\n+        :returns: a dict of search fields\n+        \"\"\"\n+        search_fields = {\n+            DEFAULT_SEARCH_FIELD: self.metadata_id(item),\n+            'namespace': self.namespace,\n+            'repo': self.repository\n+        }\n+\n+        return search_fields\n+\n+    def fetch(self, category=CATEGORY_ISSUE, from_date=DEFAULT_DATETIME, to_date=DEFAULT_LAST_DATETIME,\n+              filter_classified=False):\n+        \"\"\"Fetch the issues from the repository.\n+\n+        The method retrieves, from a Pagure repository, the issues\n+        updated since the given date.\n+\n+        :param category: the category of items to fetch\n+        :param from_date: obtain issues updated since this date\n+        :param to_date: obtain issues until a until a specific date (included)\n+        :param filter_classified: remove classified fields from the resulting items\n+\n+        :returns: a generator of issues\n+        \"\"\"\n+        if not from_date:\n+            from_date = DEFAULT_DATETIME\n+\n+        if not to_date:\n+            to_date = DEFAULT_LAST_DATETIME\n+\n+        from_date = from_date.strftime('%Y-%m-%d')\n+        to_date = to_date.strftime('%Y-%m-%d')\n+        kwargs = {\n+            'from_date': from_date,\n+            'to_date': to_date\n+        }\n+        items = super().fetch(category,\n+                              filter_classified=filter_classified,\n+                              **kwargs)\n+\n+        return items\n+\n+    def fetch_items(self, category, **kwargs):\n+        \"\"\"Fetch the items (issues)\n+\n+        :param category: the category of items to fetch\n+        :param kwargs: backend arguments\n+\n+        :returns: a generator of items\n+        \"\"\"\n+        from_date = kwargs['from_date']\n+        to_date = kwargs['to_date']\n+        items = self.__fetch_issues(from_date, to_date)\n+        return items\n+\n+    @classmethod\n+    def has_archiving(cls):\n+        \"\"\"Returns whether it supports archiving items on the fetch process.\n+\n+        :returns: this backend supports items archive\n+        \"\"\"\n+        return True\n+\n+    @classmethod\n+    def has_resuming(cls):\n+        \"\"\"Returns whether it supports to resume the fetch process.\n+\n+        :returns: this backend supports items resuming\n+        \"\"\"\n+        return True\n+\n+    @staticmethod\n+    def metadata_id(item):\n+        \"\"\"Extracts the identifier from a Pagure item.\"\"\"\n+\n+        return str(item['id'])\n+\n+    @staticmethod\n+    def metadata_updated_on(item):\n+        \"\"\"Extracts the update time from a Pagure item.\n+\n+        The timestamp used is extracted from 'last_updated' field.\n+        This date is converted to UNIX timestamp format. As Pagure\n+        dates are in timestamp format the conversion is straightforward.\n+\n+        :param item: item generated by the backend\n+\n+        :returns: a UNIX timestamp\n+        \"\"\"\n+        ts = int(item['last_updated'])\n+        ts = datetime.fromtimestamp(ts).timestamp()\n+\n+        return ts\n+\n+    @staticmethod\n+    def metadata_category(item):\n+        \"\"\"Extracts the category from a Pagure item.\n+\n+        This backend generates one type of item which is\n+        'issue'.\n+        \"\"\"\n+        category = CATEGORY_ISSUE\n+\n+        return category\n+\n+    def _init_client(self, from_archive=False):\n+        \"\"\"Init client\"\"\"\n+\n+        return PagureClient(self.namespace, self.repository, self.api_token,\n+                            self.sleep_time, self.max_retries, self.max_items,\n+                            self.archive, from_archive, self.ssl_verify)\n+\n+    def __fetch_issues(self, from_date, to_date):\n+        \"\"\"Fetch the issues\n+        :param from_date: starting date from which issues are fetched\n+        :param to_date: ending date till which issues are fetched\n+\n+        :returns: an issue object\n+        \"\"\"\n+        issues_groups = self.client.issues(from_date=from_date)\n+\n+        for raw_issues in issues_groups:\n+            issues = json.loads(raw_issues)\n+            issues = issues['issues']\n+            for issue in issues:\n+\n+                if int(issue['last_updated']) > str_to_datetime(to_date).timestamp():\n+                    return\n+\n+                yield issue\n+\n+\n+class PagureClient(HttpClient, RateLimitHandler):\n+    \"\"\"Client for retieving information from Pagure API\n+\n+    :param namespace: Pagure namespace\n+    :param repository: Pagure repository; incase the repository is within a namespace\n+    :param token: Pagure API token to access the API\n+    :param sleep_time: time to sleep in case\n+        of connection problems\n+    :param max_retries: number of max retries to a data source\n+        before raising a RetryError exception\n+    :param max_items: max number of category items (e.g., issues,\n+        pull requests) per query\n+    :param archive: collect issues already retrieved from an archive\n+    :param from_archive: it tells whether to write/read the archive\n+    :param ssl_verify: enable/disable SSL verification\n+    \"\"\"\n+    EXTRA_STATUS_FORCELIST = [403, 500, 502, 503]\n+\n+    def __init__(self, namespace, repository, token,\n+                 sleep_time=DEFAULT_SLEEP_TIME, max_retries=MAX_RETRIES,\n+                 max_items=MAX_CATEGORY_ITEMS_PER_PAGE, archive=None, from_archive=False, ssl_verify=True):\n+        self.namespace = namespace\n+        self.repository = repository\n+        self.token = token\n+        self.max_items = max_items\n+\n+        # URL to fetch the data from\n+        base_url = PAGURE_API_URL\n+\n+        super().__init__(base_url, sleep_time=sleep_time, max_retries=max_retries,\n+                         extra_headers=self._set_extra_headers(),\n+                         extra_status_forcelist=self.EXTRA_STATUS_FORCELIST,\n+                         archive=archive, from_archive=from_archive, ssl_verify=ssl_verify)\n+\n+    def issues(self, from_date=None):\n+        \"\"\"Fetch the issues from the repository.\n+\n+        The method retrieves, from a Pagure repository, the issues\n+        updated since the given date.\n+\n+        :param from_date: obtain issues updated since this date\n+\n+        :returns: a generator of issues\n+        \"\"\"\n+        payload = {\n+            'status': 'all',\n+            'per_page': self.max_items,\n+            'order': 'asc'\n+        }\n+\n+        if from_date:\n+            payload['since'] = from_date\n+\n+        path = urijoin(\"issues\")\n+        return self.fetch_items(path, payload)\n+\n+    def fetch(self, url, payload=None, headers=None):\n+        \"\"\"Fetch the data from a given URL.\n+\n+        :param url: link to the resource\n+        :param payload: payload of the request\n+        :param headers: headers of the request\n+        :param auth: auth of the request",
        "path": "perceval/backends/core/pagure.py",
        "position": null,
        "original_position": 297,
        "commit_id": "70a89aa1dccc5152ed4a52cb4c5e4e327ba3595a",
        "original_commit_id": "bea6bc459c6829df8be725bc163f944501d55107",
        "user": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "This param can be removed",
        "created_at": "2020-03-07T11:04:51Z",
        "updated_at": "2020-03-08T18:21:42Z",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r389246747",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621",
        "author_association": "MEMBER",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389246747"
          },
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r389246747"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389246747/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "user_data": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false,
          "name": "valerio",
          "company": "@Bitergia ",
          "blog": "http://valeriocos.github.io/",
          "location": "Madrid, Spain",
          "email": "valcos@bitergia.com",
          "hireable": true,
          "bio": null,
          "public_repos": 57,
          "public_gists": 28,
          "followers": 34,
          "following": 5,
          "created_at": "2014-01-27T14:30:30Z",
          "updated_at": "2020-03-17T10:02:44Z",
          "organizations": [
            {
              "login": "Bitergia",
              "id": 1918070,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=",
              "url": "https://api.github.com/orgs/Bitergia",
              "repos_url": "https://api.github.com/orgs/Bitergia/repos",
              "events_url": "https://api.github.com/orgs/Bitergia/events",
              "hooks_url": "https://api.github.com/orgs/Bitergia/hooks",
              "issues_url": "https://api.github.com/orgs/Bitergia/issues",
              "members_url": "https://api.github.com/orgs/Bitergia/members{/member}",
              "public_members_url": "https://api.github.com/orgs/Bitergia/public_members{/member}",
              "avatar_url": "https://avatars3.githubusercontent.com/u/1918070?v=4",
              "description": null
            },
            {
              "login": "grimoirelab",
              "id": 16151805,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1",
              "url": "https://api.github.com/orgs/grimoirelab",
              "repos_url": "https://api.github.com/orgs/grimoirelab/repos",
              "events_url": "https://api.github.com/orgs/grimoirelab/events",
              "hooks_url": "https://api.github.com/orgs/grimoirelab/hooks",
              "issues_url": "https://api.github.com/orgs/grimoirelab/issues",
              "members_url": "https://api.github.com/orgs/grimoirelab/members{/member}",
              "public_members_url": "https://api.github.com/orgs/grimoirelab/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/16151805?v=4",
              "description": ""
            },
            {
              "login": "chaoss",
              "id": 29740296,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
              "url": "https://api.github.com/orgs/chaoss",
              "repos_url": "https://api.github.com/orgs/chaoss/repos",
              "events_url": "https://api.github.com/orgs/chaoss/events",
              "hooks_url": "https://api.github.com/orgs/chaoss/hooks",
              "issues_url": "https://api.github.com/orgs/chaoss/issues",
              "members_url": "https://api.github.com/orgs/chaoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/chaoss/public_members{/member}",
              "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
              "description": ""
            }
          ]
        },
        "reactions_data": []
      },
      {
        "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389246958",
        "pull_request_review_id": 370737508,
        "id": 389246958,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0Njk1OA==",
        "diff_hunk": "@@ -0,0 +1,404 @@\n+# -*- coding: utf-8 -*-\n+#\n+# Copyright (C) 2015-2020 Bitergia\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program. If not, see <http://www.gnu.org/licenses/>.\n+#\n+# Authors:\n+#     Animesh Kumar <animuz111@gmail.com>\n+#\n+\n+import json\n+import logging\n+import requests\n+from grimoirelab_toolkit.datetime import (str_to_datetime)\n+from grimoirelab_toolkit.uris import urijoin\n+\n+from ...backend import (Backend,\n+                        BackendCommand,\n+                        BackendCommandArgumentParser,\n+                        DEFAULT_SEARCH_FIELD)\n+from ...client import HttpClient, RateLimitHandler\n+from ...utils import DEFAULT_DATETIME, DEFAULT_LAST_DATETIME\n+from datetime import datetime\n+\n+CATEGORY_ISSUE = \"issue\"\n+\n+PAGURE_URL = \"https://pagure.io/\"\n+PAGURE_API_URL = \"https://pagure.io/api/0\"\n+\n+MAX_CATEGORY_ITEMS_PER_PAGE = 100\n+PER_PAGE = 100\n+\n+# Default sleep time and retries to deal with connection/server problems\n+DEFAULT_SLEEP_TIME = 1\n+MAX_RETRIES = 5\n+\n+logger = logging.getLogger(__name__)\n+\n+\n+class Pagure(Backend):\n+    \"\"\"Pagure backend for Perceval.\n+\n+    This class allows the fetch the issues stored in Pagure\n+    repository. Note that api token is needed to perform\n+    certain API calls\n+\n+    :param namespace: Pagure namespace\n+    :param repository: Pagure repository; in case the repository is within a namespace\n+    :param api_token: Pagure API token to access the API\n+    :param tag: label used to mark the data\n+    :param archive: archive to store/retrieve items\n+    :param max_retries: number of max retries to a data source\n+        before raising a RetryError exception\n+    :param max_items: max number of category items (e.g., issues,\n+        pull requests) per query\n+    :param sleep_time: time to sleep in case\n+        of connection problems\n+    :param ssl_verify: enable/disable SSL verification\n+    \"\"\"\n+    version = '0.1.0'\n+\n+    CATEGORIES = [CATEGORY_ISSUE]\n+\n+    def __init__(self, namespace=None, repository=None,\n+                 api_token=None,\n+                 tag=None, archive=None,\n+                 max_retries=MAX_RETRIES, sleep_time=DEFAULT_SLEEP_TIME,\n+                 max_items=MAX_CATEGORY_ITEMS_PER_PAGE, ssl_verify=True):\n+        origin = PAGURE_URL\n+\n+        # In case repository is under a namespace add the namespace as well to the origin\n+        origin = urijoin(origin, namespace, repository) if namespace else urijoin(origin, repository)\n+\n+        super().__init__(origin, tag=tag, archive=archive, ssl_verify=ssl_verify)\n+\n+        self.namespace = namespace\n+        self.repository = repository\n+        self.api_token = api_token\n+        self.max_retries = max_retries\n+        self.sleep_time = sleep_time\n+        self.max_items = max_items\n+\n+        self.client = None\n+\n+    def search_fields(self, item):\n+        \"\"\"Add search fields to an item.\n+\n+        It adds the values of `metadata_id` plus the `namespace` and `repo`.\n+\n+        :param item: the item to extract the search fields values\n+\n+        :returns: a dict of search fields\n+        \"\"\"\n+        search_fields = {\n+            DEFAULT_SEARCH_FIELD: self.metadata_id(item),\n+            'namespace': self.namespace,\n+            'repo': self.repository\n+        }\n+\n+        return search_fields\n+\n+    def fetch(self, category=CATEGORY_ISSUE, from_date=DEFAULT_DATETIME, to_date=DEFAULT_LAST_DATETIME,\n+              filter_classified=False):\n+        \"\"\"Fetch the issues from the repository.\n+\n+        The method retrieves, from a Pagure repository, the issues\n+        updated since the given date.\n+\n+        :param category: the category of items to fetch\n+        :param from_date: obtain issues updated since this date\n+        :param to_date: obtain issues until a until a specific date (included)\n+        :param filter_classified: remove classified fields from the resulting items\n+\n+        :returns: a generator of issues\n+        \"\"\"\n+        if not from_date:\n+            from_date = DEFAULT_DATETIME\n+\n+        if not to_date:\n+            to_date = DEFAULT_LAST_DATETIME\n+\n+        from_date = from_date.strftime('%Y-%m-%d')\n+        to_date = to_date.strftime('%Y-%m-%d')\n+        kwargs = {\n+            'from_date': from_date,\n+            'to_date': to_date\n+        }\n+        items = super().fetch(category,\n+                              filter_classified=filter_classified,\n+                              **kwargs)\n+\n+        return items\n+\n+    def fetch_items(self, category, **kwargs):\n+        \"\"\"Fetch the items (issues)\n+\n+        :param category: the category of items to fetch\n+        :param kwargs: backend arguments\n+\n+        :returns: a generator of items\n+        \"\"\"\n+        from_date = kwargs['from_date']\n+        to_date = kwargs['to_date']\n+        items = self.__fetch_issues(from_date, to_date)\n+        return items\n+\n+    @classmethod\n+    def has_archiving(cls):\n+        \"\"\"Returns whether it supports archiving items on the fetch process.\n+\n+        :returns: this backend supports items archive\n+        \"\"\"\n+        return True\n+\n+    @classmethod\n+    def has_resuming(cls):\n+        \"\"\"Returns whether it supports to resume the fetch process.\n+\n+        :returns: this backend supports items resuming\n+        \"\"\"\n+        return True\n+\n+    @staticmethod\n+    def metadata_id(item):\n+        \"\"\"Extracts the identifier from a Pagure item.\"\"\"\n+\n+        return str(item['id'])\n+\n+    @staticmethod\n+    def metadata_updated_on(item):\n+        \"\"\"Extracts the update time from a Pagure item.\n+\n+        The timestamp used is extracted from 'last_updated' field.\n+        This date is converted to UNIX timestamp format. As Pagure\n+        dates are in timestamp format the conversion is straightforward.\n+\n+        :param item: item generated by the backend\n+\n+        :returns: a UNIX timestamp\n+        \"\"\"\n+        ts = int(item['last_updated'])\n+        ts = datetime.fromtimestamp(ts).timestamp()\n+\n+        return ts\n+\n+    @staticmethod\n+    def metadata_category(item):\n+        \"\"\"Extracts the category from a Pagure item.\n+\n+        This backend generates one type of item which is\n+        'issue'.\n+        \"\"\"\n+        category = CATEGORY_ISSUE\n+\n+        return category\n+\n+    def _init_client(self, from_archive=False):\n+        \"\"\"Init client\"\"\"\n+\n+        return PagureClient(self.namespace, self.repository, self.api_token,\n+                            self.sleep_time, self.max_retries, self.max_items,\n+                            self.archive, from_archive, self.ssl_verify)\n+\n+    def __fetch_issues(self, from_date, to_date):\n+        \"\"\"Fetch the issues\n+        :param from_date: starting date from which issues are fetched\n+        :param to_date: ending date till which issues are fetched\n+\n+        :returns: an issue object\n+        \"\"\"\n+        issues_groups = self.client.issues(from_date=from_date)\n+\n+        for raw_issues in issues_groups:\n+            issues = json.loads(raw_issues)\n+            issues = issues['issues']\n+            for issue in issues:\n+\n+                if int(issue['last_updated']) > str_to_datetime(to_date).timestamp():\n+                    return\n+\n+                yield issue\n+\n+\n+class PagureClient(HttpClient, RateLimitHandler):\n+    \"\"\"Client for retieving information from Pagure API\n+\n+    :param namespace: Pagure namespace\n+    :param repository: Pagure repository; incase the repository is within a namespace\n+    :param token: Pagure API token to access the API\n+    :param sleep_time: time to sleep in case\n+        of connection problems\n+    :param max_retries: number of max retries to a data source\n+        before raising a RetryError exception\n+    :param max_items: max number of category items (e.g., issues,\n+        pull requests) per query\n+    :param archive: collect issues already retrieved from an archive\n+    :param from_archive: it tells whether to write/read the archive\n+    :param ssl_verify: enable/disable SSL verification\n+    \"\"\"\n+    EXTRA_STATUS_FORCELIST = [403, 500, 502, 503]\n+\n+    def __init__(self, namespace, repository, token,\n+                 sleep_time=DEFAULT_SLEEP_TIME, max_retries=MAX_RETRIES,\n+                 max_items=MAX_CATEGORY_ITEMS_PER_PAGE, archive=None, from_archive=False, ssl_verify=True):\n+        self.namespace = namespace\n+        self.repository = repository\n+        self.token = token\n+        self.max_items = max_items\n+\n+        # URL to fetch the data from\n+        base_url = PAGURE_API_URL\n+\n+        super().__init__(base_url, sleep_time=sleep_time, max_retries=max_retries,\n+                         extra_headers=self._set_extra_headers(),\n+                         extra_status_forcelist=self.EXTRA_STATUS_FORCELIST,\n+                         archive=archive, from_archive=from_archive, ssl_verify=ssl_verify)\n+\n+    def issues(self, from_date=None):\n+        \"\"\"Fetch the issues from the repository.\n+\n+        The method retrieves, from a Pagure repository, the issues\n+        updated since the given date.\n+\n+        :param from_date: obtain issues updated since this date\n+\n+        :returns: a generator of issues\n+        \"\"\"\n+        payload = {\n+            'status': 'all',\n+            'per_page': self.max_items,\n+            'order': 'asc'\n+        }\n+\n+        if from_date:\n+            payload['since'] = from_date\n+\n+        path = urijoin(\"issues\")\n+        return self.fetch_items(path, payload)\n+\n+    def fetch(self, url, payload=None, headers=None):\n+        \"\"\"Fetch the data from a given URL.\n+\n+        :param url: link to the resource\n+        :param payload: payload of the request\n+        :param headers: headers of the request\n+        :param auth: auth of the request\n+\n+        :returns a response object\n+        \"\"\"\n+        try:\n+            response = super().fetch(url, payload, headers)\n+        except requests.exceptions.HTTPError as error:\n+            if error.response.status_code == 404 and error.response.reason == 'NOT FOUND':\n+                logger.warning(\"The issue tracker is disabled please enable the feature for the repository\")\n+                return None\n+            else:\n+                raise error\n+\n+        return response\n+\n+    def fetch_items(self, path, payload):\n+        \"\"\"Return the items from Pagure API using links pagination\n+\n+        :param path: Path from which the item is to be fetched\n+        :param payload: Payload to be added to the request\n+\n+        :returns: an item object",
        "path": "perceval/backends/core/pagure.py",
        "position": null,
        "original_position": 318,
        "commit_id": "70a89aa1dccc5152ed4a52cb4c5e4e327ba3595a",
        "original_commit_id": "bea6bc459c6829df8be725bc163f944501d55107",
        "user": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "This method returns a generator",
        "created_at": "2020-03-07T11:07:06Z",
        "updated_at": "2020-03-08T18:21:42Z",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r389246958",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621",
        "author_association": "MEMBER",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389246958"
          },
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r389246958"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389246958/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "user_data": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false,
          "name": "valerio",
          "company": "@Bitergia ",
          "blog": "http://valeriocos.github.io/",
          "location": "Madrid, Spain",
          "email": "valcos@bitergia.com",
          "hireable": true,
          "bio": null,
          "public_repos": 57,
          "public_gists": 28,
          "followers": 34,
          "following": 5,
          "created_at": "2014-01-27T14:30:30Z",
          "updated_at": "2020-03-17T10:02:44Z",
          "organizations": [
            {
              "login": "Bitergia",
              "id": 1918070,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=",
              "url": "https://api.github.com/orgs/Bitergia",
              "repos_url": "https://api.github.com/orgs/Bitergia/repos",
              "events_url": "https://api.github.com/orgs/Bitergia/events",
              "hooks_url": "https://api.github.com/orgs/Bitergia/hooks",
              "issues_url": "https://api.github.com/orgs/Bitergia/issues",
              "members_url": "https://api.github.com/orgs/Bitergia/members{/member}",
              "public_members_url": "https://api.github.com/orgs/Bitergia/public_members{/member}",
              "avatar_url": "https://avatars3.githubusercontent.com/u/1918070?v=4",
              "description": null
            },
            {
              "login": "grimoirelab",
              "id": 16151805,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1",
              "url": "https://api.github.com/orgs/grimoirelab",
              "repos_url": "https://api.github.com/orgs/grimoirelab/repos",
              "events_url": "https://api.github.com/orgs/grimoirelab/events",
              "hooks_url": "https://api.github.com/orgs/grimoirelab/hooks",
              "issues_url": "https://api.github.com/orgs/grimoirelab/issues",
              "members_url": "https://api.github.com/orgs/grimoirelab/members{/member}",
              "public_members_url": "https://api.github.com/orgs/grimoirelab/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/16151805?v=4",
              "description": ""
            },
            {
              "login": "chaoss",
              "id": 29740296,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
              "url": "https://api.github.com/orgs/chaoss",
              "repos_url": "https://api.github.com/orgs/chaoss/repos",
              "events_url": "https://api.github.com/orgs/chaoss/events",
              "hooks_url": "https://api.github.com/orgs/chaoss/hooks",
              "issues_url": "https://api.github.com/orgs/chaoss/issues",
              "members_url": "https://api.github.com/orgs/chaoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/chaoss/public_members{/member}",
              "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
              "description": ""
            }
          ]
        },
        "reactions_data": []
      },
      {
        "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389247824",
        "pull_request_review_id": 370737508,
        "id": 389247824,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0NzgyNA==",
        "diff_hunk": "@@ -0,0 +1,404 @@\n+# -*- coding: utf-8 -*-\n+#\n+# Copyright (C) 2015-2020 Bitergia\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program. If not, see <http://www.gnu.org/licenses/>.\n+#\n+# Authors:\n+#     Animesh Kumar <animuz111@gmail.com>\n+#\n+\n+import json\n+import logging\n+import requests\n+from grimoirelab_toolkit.datetime import (str_to_datetime)\n+from grimoirelab_toolkit.uris import urijoin\n+\n+from ...backend import (Backend,\n+                        BackendCommand,\n+                        BackendCommandArgumentParser,\n+                        DEFAULT_SEARCH_FIELD)\n+from ...client import HttpClient, RateLimitHandler\n+from ...utils import DEFAULT_DATETIME, DEFAULT_LAST_DATETIME\n+from datetime import datetime\n+\n+CATEGORY_ISSUE = \"issue\"\n+\n+PAGURE_URL = \"https://pagure.io/\"\n+PAGURE_API_URL = \"https://pagure.io/api/0\"\n+\n+MAX_CATEGORY_ITEMS_PER_PAGE = 100\n+PER_PAGE = 100\n+\n+# Default sleep time and retries to deal with connection/server problems\n+DEFAULT_SLEEP_TIME = 1\n+MAX_RETRIES = 5\n+\n+logger = logging.getLogger(__name__)\n+\n+\n+class Pagure(Backend):\n+    \"\"\"Pagure backend for Perceval.\n+\n+    This class allows the fetch the issues stored in Pagure\n+    repository. Note that api token is needed to perform\n+    certain API calls\n+\n+    :param namespace: Pagure namespace\n+    :param repository: Pagure repository; in case the repository is within a namespace\n+    :param api_token: Pagure API token to access the API\n+    :param tag: label used to mark the data\n+    :param archive: archive to store/retrieve items\n+    :param max_retries: number of max retries to a data source\n+        before raising a RetryError exception\n+    :param max_items: max number of category items (e.g., issues,\n+        pull requests) per query\n+    :param sleep_time: time to sleep in case\n+        of connection problems\n+    :param ssl_verify: enable/disable SSL verification\n+    \"\"\"\n+    version = '0.1.0'\n+\n+    CATEGORIES = [CATEGORY_ISSUE]\n+\n+    def __init__(self, namespace=None, repository=None,\n+                 api_token=None,\n+                 tag=None, archive=None,\n+                 max_retries=MAX_RETRIES, sleep_time=DEFAULT_SLEEP_TIME,\n+                 max_items=MAX_CATEGORY_ITEMS_PER_PAGE, ssl_verify=True):\n+        origin = PAGURE_URL\n+\n+        # In case repository is under a namespace add the namespace as well to the origin\n+        origin = urijoin(origin, namespace, repository) if namespace else urijoin(origin, repository)\n+\n+        super().__init__(origin, tag=tag, archive=archive, ssl_verify=ssl_verify)\n+\n+        self.namespace = namespace\n+        self.repository = repository\n+        self.api_token = api_token\n+        self.max_retries = max_retries\n+        self.sleep_time = sleep_time\n+        self.max_items = max_items\n+\n+        self.client = None\n+\n+    def search_fields(self, item):\n+        \"\"\"Add search fields to an item.\n+\n+        It adds the values of `metadata_id` plus the `namespace` and `repo`.\n+\n+        :param item: the item to extract the search fields values\n+\n+        :returns: a dict of search fields\n+        \"\"\"\n+        search_fields = {\n+            DEFAULT_SEARCH_FIELD: self.metadata_id(item),\n+            'namespace': self.namespace,\n+            'repo': self.repository\n+        }\n+\n+        return search_fields\n+\n+    def fetch(self, category=CATEGORY_ISSUE, from_date=DEFAULT_DATETIME, to_date=DEFAULT_LAST_DATETIME,\n+              filter_classified=False):\n+        \"\"\"Fetch the issues from the repository.\n+\n+        The method retrieves, from a Pagure repository, the issues\n+        updated since the given date.\n+\n+        :param category: the category of items to fetch\n+        :param from_date: obtain issues updated since this date\n+        :param to_date: obtain issues until a until a specific date (included)\n+        :param filter_classified: remove classified fields from the resulting items\n+\n+        :returns: a generator of issues\n+        \"\"\"\n+        if not from_date:\n+            from_date = DEFAULT_DATETIME\n+\n+        if not to_date:\n+            to_date = DEFAULT_LAST_DATETIME\n+\n+        from_date = from_date.strftime('%Y-%m-%d')\n+        to_date = to_date.strftime('%Y-%m-%d')\n+        kwargs = {\n+            'from_date': from_date,\n+            'to_date': to_date\n+        }\n+        items = super().fetch(category,\n+                              filter_classified=filter_classified,\n+                              **kwargs)\n+\n+        return items\n+\n+    def fetch_items(self, category, **kwargs):\n+        \"\"\"Fetch the items (issues)\n+\n+        :param category: the category of items to fetch\n+        :param kwargs: backend arguments\n+\n+        :returns: a generator of items\n+        \"\"\"\n+        from_date = kwargs['from_date']\n+        to_date = kwargs['to_date']\n+        items = self.__fetch_issues(from_date, to_date)\n+        return items\n+\n+    @classmethod\n+    def has_archiving(cls):\n+        \"\"\"Returns whether it supports archiving items on the fetch process.\n+\n+        :returns: this backend supports items archive\n+        \"\"\"\n+        return True\n+\n+    @classmethod\n+    def has_resuming(cls):\n+        \"\"\"Returns whether it supports to resume the fetch process.\n+\n+        :returns: this backend supports items resuming\n+        \"\"\"\n+        return True\n+\n+    @staticmethod\n+    def metadata_id(item):\n+        \"\"\"Extracts the identifier from a Pagure item.\"\"\"\n+\n+        return str(item['id'])\n+\n+    @staticmethod\n+    def metadata_updated_on(item):\n+        \"\"\"Extracts the update time from a Pagure item.\n+\n+        The timestamp used is extracted from 'last_updated' field.\n+        This date is converted to UNIX timestamp format. As Pagure\n+        dates are in timestamp format the conversion is straightforward.\n+\n+        :param item: item generated by the backend\n+\n+        :returns: a UNIX timestamp\n+        \"\"\"\n+        ts = int(item['last_updated'])\n+        ts = datetime.fromtimestamp(ts).timestamp()\n+\n+        return ts\n+\n+    @staticmethod\n+    def metadata_category(item):\n+        \"\"\"Extracts the category from a Pagure item.\n+\n+        This backend generates one type of item which is\n+        'issue'.\n+        \"\"\"\n+        category = CATEGORY_ISSUE\n+\n+        return category\n+\n+    def _init_client(self, from_archive=False):\n+        \"\"\"Init client\"\"\"\n+\n+        return PagureClient(self.namespace, self.repository, self.api_token,\n+                            self.sleep_time, self.max_retries, self.max_items,\n+                            self.archive, from_archive, self.ssl_verify)\n+\n+    def __fetch_issues(self, from_date, to_date):\n+        \"\"\"Fetch the issues\n+        :param from_date: starting date from which issues are fetched\n+        :param to_date: ending date till which issues are fetched\n+\n+        :returns: an issue object\n+        \"\"\"\n+        issues_groups = self.client.issues(from_date=from_date)\n+\n+        for raw_issues in issues_groups:\n+            issues = json.loads(raw_issues)\n+            issues = issues['issues']\n+            for issue in issues:\n+\n+                if int(issue['last_updated']) > str_to_datetime(to_date).timestamp():\n+                    return\n+\n+                yield issue\n+\n+\n+class PagureClient(HttpClient, RateLimitHandler):\n+    \"\"\"Client for retieving information from Pagure API\n+\n+    :param namespace: Pagure namespace\n+    :param repository: Pagure repository; incase the repository is within a namespace\n+    :param token: Pagure API token to access the API\n+    :param sleep_time: time to sleep in case\n+        of connection problems\n+    :param max_retries: number of max retries to a data source\n+        before raising a RetryError exception\n+    :param max_items: max number of category items (e.g., issues,\n+        pull requests) per query\n+    :param archive: collect issues already retrieved from an archive\n+    :param from_archive: it tells whether to write/read the archive\n+    :param ssl_verify: enable/disable SSL verification\n+    \"\"\"\n+    EXTRA_STATUS_FORCELIST = [403, 500, 502, 503]",
        "path": "perceval/backends/core/pagure.py",
        "position": null,
        "original_position": 251,
        "commit_id": "70a89aa1dccc5152ed4a52cb4c5e4e327ba3595a",
        "original_commit_id": "bea6bc459c6829df8be725bc163f944501d55107",
        "user": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "This can be removed. ATM we don't know which extra status should be defined (no info in the API). If you find something, please let me know.",
        "created_at": "2020-03-07T11:23:49Z",
        "updated_at": "2020-03-08T18:21:42Z",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r389247824",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621",
        "author_association": "MEMBER",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389247824"
          },
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r389247824"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389247824/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "user_data": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false,
          "name": "valerio",
          "company": "@Bitergia ",
          "blog": "http://valeriocos.github.io/",
          "location": "Madrid, Spain",
          "email": "valcos@bitergia.com",
          "hireable": true,
          "bio": null,
          "public_repos": 57,
          "public_gists": 28,
          "followers": 34,
          "following": 5,
          "created_at": "2014-01-27T14:30:30Z",
          "updated_at": "2020-03-17T10:02:44Z",
          "organizations": [
            {
              "login": "Bitergia",
              "id": 1918070,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=",
              "url": "https://api.github.com/orgs/Bitergia",
              "repos_url": "https://api.github.com/orgs/Bitergia/repos",
              "events_url": "https://api.github.com/orgs/Bitergia/events",
              "hooks_url": "https://api.github.com/orgs/Bitergia/hooks",
              "issues_url": "https://api.github.com/orgs/Bitergia/issues",
              "members_url": "https://api.github.com/orgs/Bitergia/members{/member}",
              "public_members_url": "https://api.github.com/orgs/Bitergia/public_members{/member}",
              "avatar_url": "https://avatars3.githubusercontent.com/u/1918070?v=4",
              "description": null
            },
            {
              "login": "grimoirelab",
              "id": 16151805,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1",
              "url": "https://api.github.com/orgs/grimoirelab",
              "repos_url": "https://api.github.com/orgs/grimoirelab/repos",
              "events_url": "https://api.github.com/orgs/grimoirelab/events",
              "hooks_url": "https://api.github.com/orgs/grimoirelab/hooks",
              "issues_url": "https://api.github.com/orgs/grimoirelab/issues",
              "members_url": "https://api.github.com/orgs/grimoirelab/members{/member}",
              "public_members_url": "https://api.github.com/orgs/grimoirelab/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/16151805?v=4",
              "description": ""
            },
            {
              "login": "chaoss",
              "id": 29740296,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
              "url": "https://api.github.com/orgs/chaoss",
              "repos_url": "https://api.github.com/orgs/chaoss/repos",
              "events_url": "https://api.github.com/orgs/chaoss/events",
              "hooks_url": "https://api.github.com/orgs/chaoss/hooks",
              "issues_url": "https://api.github.com/orgs/chaoss/issues",
              "members_url": "https://api.github.com/orgs/chaoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/chaoss/public_members{/member}",
              "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
              "description": ""
            }
          ]
        },
        "reactions_data": []
      },
      {
        "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389247857",
        "pull_request_review_id": 370737508,
        "id": 389247857,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0Nzg1Nw==",
        "diff_hunk": "@@ -0,0 +1,404 @@\n+# -*- coding: utf-8 -*-\n+#\n+# Copyright (C) 2015-2020 Bitergia\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program. If not, see <http://www.gnu.org/licenses/>.\n+#\n+# Authors:\n+#     Animesh Kumar <animuz111@gmail.com>\n+#\n+\n+import json\n+import logging\n+import requests\n+from grimoirelab_toolkit.datetime import (str_to_datetime)\n+from grimoirelab_toolkit.uris import urijoin\n+\n+from ...backend import (Backend,\n+                        BackendCommand,\n+                        BackendCommandArgumentParser,\n+                        DEFAULT_SEARCH_FIELD)\n+from ...client import HttpClient, RateLimitHandler\n+from ...utils import DEFAULT_DATETIME, DEFAULT_LAST_DATETIME\n+from datetime import datetime\n+\n+CATEGORY_ISSUE = \"issue\"\n+\n+PAGURE_URL = \"https://pagure.io/\"\n+PAGURE_API_URL = \"https://pagure.io/api/0\"\n+\n+MAX_CATEGORY_ITEMS_PER_PAGE = 100\n+PER_PAGE = 100\n+\n+# Default sleep time and retries to deal with connection/server problems\n+DEFAULT_SLEEP_TIME = 1\n+MAX_RETRIES = 5\n+\n+logger = logging.getLogger(__name__)\n+\n+\n+class Pagure(Backend):\n+    \"\"\"Pagure backend for Perceval.\n+\n+    This class allows the fetch the issues stored in Pagure\n+    repository. Note that api token is needed to perform\n+    certain API calls\n+\n+    :param namespace: Pagure namespace\n+    :param repository: Pagure repository; in case the repository is within a namespace\n+    :param api_token: Pagure API token to access the API\n+    :param tag: label used to mark the data\n+    :param archive: archive to store/retrieve items\n+    :param max_retries: number of max retries to a data source\n+        before raising a RetryError exception\n+    :param max_items: max number of category items (e.g., issues,\n+        pull requests) per query\n+    :param sleep_time: time to sleep in case\n+        of connection problems\n+    :param ssl_verify: enable/disable SSL verification\n+    \"\"\"\n+    version = '0.1.0'\n+\n+    CATEGORIES = [CATEGORY_ISSUE]\n+\n+    def __init__(self, namespace=None, repository=None,\n+                 api_token=None,\n+                 tag=None, archive=None,\n+                 max_retries=MAX_RETRIES, sleep_time=DEFAULT_SLEEP_TIME,\n+                 max_items=MAX_CATEGORY_ITEMS_PER_PAGE, ssl_verify=True):\n+        origin = PAGURE_URL\n+\n+        # In case repository is under a namespace add the namespace as well to the origin\n+        origin = urijoin(origin, namespace, repository) if namespace else urijoin(origin, repository)\n+\n+        super().__init__(origin, tag=tag, archive=archive, ssl_verify=ssl_verify)\n+\n+        self.namespace = namespace\n+        self.repository = repository\n+        self.api_token = api_token\n+        self.max_retries = max_retries\n+        self.sleep_time = sleep_time\n+        self.max_items = max_items\n+\n+        self.client = None\n+\n+    def search_fields(self, item):\n+        \"\"\"Add search fields to an item.\n+\n+        It adds the values of `metadata_id` plus the `namespace` and `repo`.\n+\n+        :param item: the item to extract the search fields values\n+\n+        :returns: a dict of search fields\n+        \"\"\"\n+        search_fields = {\n+            DEFAULT_SEARCH_FIELD: self.metadata_id(item),\n+            'namespace': self.namespace,\n+            'repo': self.repository\n+        }\n+\n+        return search_fields\n+\n+    def fetch(self, category=CATEGORY_ISSUE, from_date=DEFAULT_DATETIME, to_date=DEFAULT_LAST_DATETIME,\n+              filter_classified=False):\n+        \"\"\"Fetch the issues from the repository.\n+\n+        The method retrieves, from a Pagure repository, the issues\n+        updated since the given date.\n+\n+        :param category: the category of items to fetch\n+        :param from_date: obtain issues updated since this date\n+        :param to_date: obtain issues until a until a specific date (included)\n+        :param filter_classified: remove classified fields from the resulting items\n+\n+        :returns: a generator of issues\n+        \"\"\"\n+        if not from_date:\n+            from_date = DEFAULT_DATETIME\n+\n+        if not to_date:\n+            to_date = DEFAULT_LAST_DATETIME\n+\n+        from_date = from_date.strftime('%Y-%m-%d')\n+        to_date = to_date.strftime('%Y-%m-%d')\n+        kwargs = {\n+            'from_date': from_date,\n+            'to_date': to_date\n+        }\n+        items = super().fetch(category,\n+                              filter_classified=filter_classified,\n+                              **kwargs)\n+\n+        return items\n+\n+    def fetch_items(self, category, **kwargs):\n+        \"\"\"Fetch the items (issues)\n+\n+        :param category: the category of items to fetch\n+        :param kwargs: backend arguments\n+\n+        :returns: a generator of items\n+        \"\"\"\n+        from_date = kwargs['from_date']\n+        to_date = kwargs['to_date']\n+        items = self.__fetch_issues(from_date, to_date)\n+        return items\n+\n+    @classmethod\n+    def has_archiving(cls):\n+        \"\"\"Returns whether it supports archiving items on the fetch process.\n+\n+        :returns: this backend supports items archive\n+        \"\"\"\n+        return True\n+\n+    @classmethod\n+    def has_resuming(cls):\n+        \"\"\"Returns whether it supports to resume the fetch process.\n+\n+        :returns: this backend supports items resuming\n+        \"\"\"\n+        return True\n+\n+    @staticmethod\n+    def metadata_id(item):\n+        \"\"\"Extracts the identifier from a Pagure item.\"\"\"\n+\n+        return str(item['id'])\n+\n+    @staticmethod\n+    def metadata_updated_on(item):\n+        \"\"\"Extracts the update time from a Pagure item.\n+\n+        The timestamp used is extracted from 'last_updated' field.\n+        This date is converted to UNIX timestamp format. As Pagure\n+        dates are in timestamp format the conversion is straightforward.\n+\n+        :param item: item generated by the backend\n+\n+        :returns: a UNIX timestamp\n+        \"\"\"\n+        ts = int(item['last_updated'])\n+        ts = datetime.fromtimestamp(ts).timestamp()\n+\n+        return ts\n+\n+    @staticmethod\n+    def metadata_category(item):\n+        \"\"\"Extracts the category from a Pagure item.\n+\n+        This backend generates one type of item which is\n+        'issue'.\n+        \"\"\"\n+        category = CATEGORY_ISSUE\n+\n+        return category\n+\n+    def _init_client(self, from_archive=False):\n+        \"\"\"Init client\"\"\"\n+\n+        return PagureClient(self.namespace, self.repository, self.api_token,\n+                            self.sleep_time, self.max_retries, self.max_items,\n+                            self.archive, from_archive, self.ssl_verify)\n+\n+    def __fetch_issues(self, from_date, to_date):\n+        \"\"\"Fetch the issues\n+        :param from_date: starting date from which issues are fetched\n+        :param to_date: ending date till which issues are fetched\n+\n+        :returns: an issue object\n+        \"\"\"\n+        issues_groups = self.client.issues(from_date=from_date)\n+\n+        for raw_issues in issues_groups:\n+            issues = json.loads(raw_issues)\n+            issues = issues['issues']\n+            for issue in issues:\n+\n+                if int(issue['last_updated']) > str_to_datetime(to_date).timestamp():\n+                    return\n+\n+                yield issue\n+\n+\n+class PagureClient(HttpClient, RateLimitHandler):\n+    \"\"\"Client for retieving information from Pagure API\n+\n+    :param namespace: Pagure namespace\n+    :param repository: Pagure repository; incase the repository is within a namespace\n+    :param token: Pagure API token to access the API\n+    :param sleep_time: time to sleep in case\n+        of connection problems\n+    :param max_retries: number of max retries to a data source\n+        before raising a RetryError exception\n+    :param max_items: max number of category items (e.g., issues,\n+        pull requests) per query\n+    :param archive: collect issues already retrieved from an archive\n+    :param from_archive: it tells whether to write/read the archive\n+    :param ssl_verify: enable/disable SSL verification\n+    \"\"\"\n+    EXTRA_STATUS_FORCELIST = [403, 500, 502, 503]\n+\n+    def __init__(self, namespace, repository, token,\n+                 sleep_time=DEFAULT_SLEEP_TIME, max_retries=MAX_RETRIES,\n+                 max_items=MAX_CATEGORY_ITEMS_PER_PAGE, archive=None, from_archive=False, ssl_verify=True):\n+        self.namespace = namespace\n+        self.repository = repository\n+        self.token = token\n+        self.max_items = max_items\n+\n+        # URL to fetch the data from\n+        base_url = PAGURE_API_URL\n+\n+        super().__init__(base_url, sleep_time=sleep_time, max_retries=max_retries,\n+                         extra_headers=self._set_extra_headers(),\n+                         extra_status_forcelist=self.EXTRA_STATUS_FORCELIST,\n+                         archive=archive, from_archive=from_archive, ssl_verify=ssl_verify)\n+\n+    def issues(self, from_date=None):\n+        \"\"\"Fetch the issues from the repository.\n+\n+        The method retrieves, from a Pagure repository, the issues\n+        updated since the given date.\n+\n+        :param from_date: obtain issues updated since this date\n+\n+        :returns: a generator of issues\n+        \"\"\"\n+        payload = {\n+            'status': 'all',\n+            'per_page': self.max_items,\n+            'order': 'asc'\n+        }\n+\n+        if from_date:\n+            payload['since'] = from_date\n+\n+        path = urijoin(\"issues\")\n+        return self.fetch_items(path, payload)\n+\n+    def fetch(self, url, payload=None, headers=None):\n+        \"\"\"Fetch the data from a given URL.\n+\n+        :param url: link to the resource\n+        :param payload: payload of the request\n+        :param headers: headers of the request\n+        :param auth: auth of the request\n+\n+        :returns a response object\n+        \"\"\"\n+        try:\n+            response = super().fetch(url, payload, headers)\n+        except requests.exceptions.HTTPError as error:\n+            if error.response.status_code == 404 and error.response.reason == 'NOT FOUND':\n+                logger.warning(\"The issue tracker is disabled please enable the feature for the repository\")\n+                return None\n+            else:\n+                raise error\n+\n+        return response\n+\n+    def fetch_items(self, path, payload):\n+        \"\"\"Return the items from Pagure API using links pagination\n+\n+        :param path: Path from which the item is to be fetched\n+        :param payload: Payload to be added to the request\n+\n+        :returns: an item object\n+        \"\"\"\n+        page = 0  # current page\n+        last_page = None  # last page\n+        if self.namespace:  # if project is under a namespace",
        "path": "perceval/backends/core/pagure.py",
        "position": null,
        "original_position": 322,
        "commit_id": "70a89aa1dccc5152ed4a52cb4c5e4e327ba3595a",
        "original_commit_id": "bea6bc459c6829df8be725bc163f944501d55107",
        "user": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "I would move the if-else block to a private method. A possible implementation could be https://github.com/chaoss/grimoirelab-perceval/blob/master/perceval/backends/core/launchpad.py#L326.\r\n\r\nThe first param of the urijoin should be self.base_url",
        "created_at": "2020-03-07T11:24:32Z",
        "updated_at": "2020-03-08T18:21:42Z",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r389247857",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621",
        "author_association": "MEMBER",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389247857"
          },
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r389247857"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389247857/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "user_data": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false,
          "name": "valerio",
          "company": "@Bitergia ",
          "blog": "http://valeriocos.github.io/",
          "location": "Madrid, Spain",
          "email": "valcos@bitergia.com",
          "hireable": true,
          "bio": null,
          "public_repos": 57,
          "public_gists": 28,
          "followers": 34,
          "following": 5,
          "created_at": "2014-01-27T14:30:30Z",
          "updated_at": "2020-03-17T10:02:44Z",
          "organizations": [
            {
              "login": "Bitergia",
              "id": 1918070,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=",
              "url": "https://api.github.com/orgs/Bitergia",
              "repos_url": "https://api.github.com/orgs/Bitergia/repos",
              "events_url": "https://api.github.com/orgs/Bitergia/events",
              "hooks_url": "https://api.github.com/orgs/Bitergia/hooks",
              "issues_url": "https://api.github.com/orgs/Bitergia/issues",
              "members_url": "https://api.github.com/orgs/Bitergia/members{/member}",
              "public_members_url": "https://api.github.com/orgs/Bitergia/public_members{/member}",
              "avatar_url": "https://avatars3.githubusercontent.com/u/1918070?v=4",
              "description": null
            },
            {
              "login": "grimoirelab",
              "id": 16151805,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1",
              "url": "https://api.github.com/orgs/grimoirelab",
              "repos_url": "https://api.github.com/orgs/grimoirelab/repos",
              "events_url": "https://api.github.com/orgs/grimoirelab/events",
              "hooks_url": "https://api.github.com/orgs/grimoirelab/hooks",
              "issues_url": "https://api.github.com/orgs/grimoirelab/issues",
              "members_url": "https://api.github.com/orgs/grimoirelab/members{/member}",
              "public_members_url": "https://api.github.com/orgs/grimoirelab/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/16151805?v=4",
              "description": ""
            },
            {
              "login": "chaoss",
              "id": 29740296,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
              "url": "https://api.github.com/orgs/chaoss",
              "repos_url": "https://api.github.com/orgs/chaoss/repos",
              "events_url": "https://api.github.com/orgs/chaoss/events",
              "hooks_url": "https://api.github.com/orgs/chaoss/hooks",
              "issues_url": "https://api.github.com/orgs/chaoss/issues",
              "members_url": "https://api.github.com/orgs/chaoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/chaoss/public_members{/member}",
              "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
              "description": ""
            }
          ]
        },
        "reactions_data": []
      },
      {
        "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389248120",
        "pull_request_review_id": 370737508,
        "id": 389248120,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0ODEyMA==",
        "diff_hunk": "@@ -0,0 +1,749 @@\n+#!/usr/bin/env python3\n+# -*- coding: utf-8 -*-\n+#\n+# Copyright (C) 2015-2019 Bitergia",
        "path": "tests/test_pagure.py",
        "position": null,
        "original_position": 4,
        "commit_id": "70a89aa1dccc5152ed4a52cb4c5e4e327ba3595a",
        "original_commit_id": "bea6bc459c6829df8be725bc163f944501d55107",
        "user": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "Please update the copyright 2015-2020",
        "created_at": "2020-03-07T11:28:34Z",
        "updated_at": "2020-03-08T18:21:42Z",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r389248120",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621",
        "author_association": "MEMBER",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389248120"
          },
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r389248120"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389248120/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "user_data": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false,
          "name": "valerio",
          "company": "@Bitergia ",
          "blog": "http://valeriocos.github.io/",
          "location": "Madrid, Spain",
          "email": "valcos@bitergia.com",
          "hireable": true,
          "bio": null,
          "public_repos": 57,
          "public_gists": 28,
          "followers": 34,
          "following": 5,
          "created_at": "2014-01-27T14:30:30Z",
          "updated_at": "2020-03-17T10:02:44Z",
          "organizations": [
            {
              "login": "Bitergia",
              "id": 1918070,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=",
              "url": "https://api.github.com/orgs/Bitergia",
              "repos_url": "https://api.github.com/orgs/Bitergia/repos",
              "events_url": "https://api.github.com/orgs/Bitergia/events",
              "hooks_url": "https://api.github.com/orgs/Bitergia/hooks",
              "issues_url": "https://api.github.com/orgs/Bitergia/issues",
              "members_url": "https://api.github.com/orgs/Bitergia/members{/member}",
              "public_members_url": "https://api.github.com/orgs/Bitergia/public_members{/member}",
              "avatar_url": "https://avatars3.githubusercontent.com/u/1918070?v=4",
              "description": null
            },
            {
              "login": "grimoirelab",
              "id": 16151805,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1",
              "url": "https://api.github.com/orgs/grimoirelab",
              "repos_url": "https://api.github.com/orgs/grimoirelab/repos",
              "events_url": "https://api.github.com/orgs/grimoirelab/events",
              "hooks_url": "https://api.github.com/orgs/grimoirelab/hooks",
              "issues_url": "https://api.github.com/orgs/grimoirelab/issues",
              "members_url": "https://api.github.com/orgs/grimoirelab/members{/member}",
              "public_members_url": "https://api.github.com/orgs/grimoirelab/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/16151805?v=4",
              "description": ""
            },
            {
              "login": "chaoss",
              "id": 29740296,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
              "url": "https://api.github.com/orgs/chaoss",
              "repos_url": "https://api.github.com/orgs/chaoss/repos",
              "events_url": "https://api.github.com/orgs/chaoss/events",
              "hooks_url": "https://api.github.com/orgs/chaoss/hooks",
              "issues_url": "https://api.github.com/orgs/chaoss/issues",
              "members_url": "https://api.github.com/orgs/chaoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/chaoss/public_members{/member}",
              "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
              "description": ""
            }
          ]
        },
        "reactions_data": []
      },
      {
        "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389248187",
        "pull_request_review_id": 370737508,
        "id": 389248187,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0ODE4Nw==",
        "diff_hunk": "@@ -0,0 +1,749 @@\n+#!/usr/bin/env python3\n+# -*- coding: utf-8 -*-\n+#\n+# Copyright (C) 2015-2019 Bitergia\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program. If not, see <http://www.gnu.org/licenses/>.\n+#\n+# Authors:\n+#     Animesh Kumar<animuz111@gmail.com>\n+#\n+\n+import datetime\n+import os\n+import unittest.mock\n+import httpretty\n+import pkg_resources\n+import requests\n+\n+pkg_resources.declare_namespace('perceval.backends')\n+\n+from perceval.backend import BackendCommandArgumentParser\n+from perceval.utils import (DEFAULT_DATETIME, DEFAULT_LAST_DATETIME)\n+from perceval.backends.core.pagure import (Pagure,\n+                                           PagureCommand,\n+                                           PagureClient,\n+                                           CATEGORY_ISSUE,\n+                                           MAX_CATEGORY_ITEMS_PER_PAGE)\n+from base import TestCaseBackendArchive\n+\n+PAGURE_API_URL = \"https://pagure.io/api/0\"\n+PAGURE_REPO_URL = PAGURE_API_URL + \"/Project-example\"\n+PAGURE_ISSUES_URL = PAGURE_REPO_URL + \"/issues\"\n+\n+# Repository with issue tracker disabled\n+PAGURE_REPO_URL_DISABLED_URL = PAGURE_API_URL + \"/Project-test-example\"\n+PAGURE_ISSUES_DISABLED_URL = PAGURE_REPO_URL_DISABLED_URL + \"/issues\"\n+\n+PAGURE_NAMESPACE_REPO_URL = PAGURE_API_URL + \"Test-group/Project-namespace-example\"\n+PAGURE_NAMESPACE_ISSUES_URL = PAGURE_NAMESPACE_REPO_URL + \"/issues\"\n+\n+\n+def read_file(filename, mode='r'):\n+    with open(os.path.join(os.path.dirname(os.path.abspath(__file__)), filename), mode) as f:\n+        content = f.read()\n+    return content\n+\n+\n+class TestPagureBackend(unittest.TestCase):\n+    \"\"\" Pagure backend tests \"\"\"",
        "path": "tests/test_pagure.py",
        "position": null,
        "original_position": 60,
        "commit_id": "70a89aa1dccc5152ed4a52cb4c5e4e327ba3595a",
        "original_commit_id": "bea6bc459c6829df8be725bc163f944501d55107",
        "user": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "Please remove the empty spaces at the beginning and at the end",
        "created_at": "2020-03-07T11:29:51Z",
        "updated_at": "2020-03-08T18:21:42Z",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r389248187",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621",
        "author_association": "MEMBER",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389248187"
          },
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r389248187"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389248187/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "user_data": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false,
          "name": "valerio",
          "company": "@Bitergia ",
          "blog": "http://valeriocos.github.io/",
          "location": "Madrid, Spain",
          "email": "valcos@bitergia.com",
          "hireable": true,
          "bio": null,
          "public_repos": 57,
          "public_gists": 28,
          "followers": 34,
          "following": 5,
          "created_at": "2014-01-27T14:30:30Z",
          "updated_at": "2020-03-17T10:02:44Z",
          "organizations": [
            {
              "login": "Bitergia",
              "id": 1918070,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=",
              "url": "https://api.github.com/orgs/Bitergia",
              "repos_url": "https://api.github.com/orgs/Bitergia/repos",
              "events_url": "https://api.github.com/orgs/Bitergia/events",
              "hooks_url": "https://api.github.com/orgs/Bitergia/hooks",
              "issues_url": "https://api.github.com/orgs/Bitergia/issues",
              "members_url": "https://api.github.com/orgs/Bitergia/members{/member}",
              "public_members_url": "https://api.github.com/orgs/Bitergia/public_members{/member}",
              "avatar_url": "https://avatars3.githubusercontent.com/u/1918070?v=4",
              "description": null
            },
            {
              "login": "grimoirelab",
              "id": 16151805,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1",
              "url": "https://api.github.com/orgs/grimoirelab",
              "repos_url": "https://api.github.com/orgs/grimoirelab/repos",
              "events_url": "https://api.github.com/orgs/grimoirelab/events",
              "hooks_url": "https://api.github.com/orgs/grimoirelab/hooks",
              "issues_url": "https://api.github.com/orgs/grimoirelab/issues",
              "members_url": "https://api.github.com/orgs/grimoirelab/members{/member}",
              "public_members_url": "https://api.github.com/orgs/grimoirelab/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/16151805?v=4",
              "description": ""
            },
            {
              "login": "chaoss",
              "id": 29740296,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
              "url": "https://api.github.com/orgs/chaoss",
              "repos_url": "https://api.github.com/orgs/chaoss/repos",
              "events_url": "https://api.github.com/orgs/chaoss/events",
              "hooks_url": "https://api.github.com/orgs/chaoss/hooks",
              "issues_url": "https://api.github.com/orgs/chaoss/issues",
              "members_url": "https://api.github.com/orgs/chaoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/chaoss/public_members{/member}",
              "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
              "description": ""
            }
          ]
        },
        "reactions_data": []
      },
      {
        "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389248306",
        "pull_request_review_id": 370737508,
        "id": 389248306,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0ODMwNg==",
        "diff_hunk": "@@ -0,0 +1,749 @@\n+#!/usr/bin/env python3\n+# -*- coding: utf-8 -*-\n+#\n+# Copyright (C) 2015-2019 Bitergia\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program. If not, see <http://www.gnu.org/licenses/>.\n+#\n+# Authors:\n+#     Animesh Kumar<animuz111@gmail.com>\n+#\n+\n+import datetime\n+import os\n+import unittest.mock\n+import httpretty\n+import pkg_resources\n+import requests\n+\n+pkg_resources.declare_namespace('perceval.backends')\n+\n+from perceval.backend import BackendCommandArgumentParser\n+from perceval.utils import (DEFAULT_DATETIME, DEFAULT_LAST_DATETIME)\n+from perceval.backends.core.pagure import (Pagure,\n+                                           PagureCommand,\n+                                           PagureClient,\n+                                           CATEGORY_ISSUE,\n+                                           MAX_CATEGORY_ITEMS_PER_PAGE)\n+from base import TestCaseBackendArchive\n+\n+PAGURE_API_URL = \"https://pagure.io/api/0\"\n+PAGURE_REPO_URL = PAGURE_API_URL + \"/Project-example\"\n+PAGURE_ISSUES_URL = PAGURE_REPO_URL + \"/issues\"\n+\n+# Repository with issue tracker disabled\n+PAGURE_REPO_URL_DISABLED_URL = PAGURE_API_URL + \"/Project-test-example\"\n+PAGURE_ISSUES_DISABLED_URL = PAGURE_REPO_URL_DISABLED_URL + \"/issues\"\n+\n+PAGURE_NAMESPACE_REPO_URL = PAGURE_API_URL + \"Test-group/Project-namespace-example\"\n+PAGURE_NAMESPACE_ISSUES_URL = PAGURE_NAMESPACE_REPO_URL + \"/issues\"\n+\n+\n+def read_file(filename, mode='r'):\n+    with open(os.path.join(os.path.dirname(os.path.abspath(__file__)), filename), mode) as f:\n+        content = f.read()\n+    return content\n+\n+\n+class TestPagureBackend(unittest.TestCase):\n+    \"\"\" Pagure backend tests \"\"\"\n+\n+    @httpretty.activate\n+    def test_initialization(self):\n+        \"\"\"Test whether attributes are initialized\"\"\"\n+\n+        pagure = Pagure(namespace=None, repository='Project-example', api_token='aaa', tag='test')\n+\n+        # Testing initialization when repository is not within a namespace\n+        self.assertEqual(pagure.repository, 'Project-example')\n+        self.assertIsNone(pagure.namespace)\n+        self.assertEqual(pagure.origin, 'https://pagure.io/Project-example')\n+        self.assertEqual(pagure.tag, 'test')\n+        self.assertEqual(pagure.max_items, MAX_CATEGORY_ITEMS_PER_PAGE)\n+        self.assertEqual(pagure.categories, [CATEGORY_ISSUE])\n+        self.assertTrue(pagure.ssl_verify)\n+\n+        # When tag is empty or None it will be set to the value in origin\n+        pagure = Pagure(namespace=None, repository='Project-example', api_token='aaa', ssl_verify=False)\n+        self.assertEqual(pagure.repository, 'Project-example')\n+        self.assertIsNone(pagure.namespace)\n+        self.assertEqual(pagure.origin, 'https://pagure.io/Project-example')\n+        self.assertEqual(pagure.tag, 'https://pagure.io/Project-example')\n+        self.assertFalse(pagure.ssl_verify)\n+\n+        pagure = Pagure(namespace=None, repository='Project-example', api_token='aaa', tag='')\n+        self.assertEqual(pagure.repository, 'Project-example')\n+        self.assertIsNone(pagure.namespace)\n+        self.assertEqual(pagure.origin, 'https://pagure.io/Project-example')\n+        self.assertEqual(pagure.tag, 'https://pagure.io/Project-example')\n+\n+        # Testing initialization when repository is within a namespace\n+        pagure = Pagure(namespace='Test-group', repository='Project-example-namespace', api_token='', tag='testing')\n+        self.assertEqual(pagure.repository, 'Project-example-namespace')\n+        self.assertEqual(pagure.namespace, 'Test-group')\n+        self.assertEqual(pagure.origin, 'https://pagure.io/Test-group/Project-example-namespace')\n+        self.assertEqual(pagure.tag, 'testing')\n+        self.assertEqual(pagure.max_items, MAX_CATEGORY_ITEMS_PER_PAGE)\n+        self.assertEqual(pagure.categories, [CATEGORY_ISSUE])\n+        self.assertTrue(pagure.ssl_verify)\n+\n+    def test_token_initialization(self):",
        "path": "tests/test_pagure.py",
        "position": null,
        "original_position": 101,
        "commit_id": "70a89aa1dccc5152ed4a52cb4c5e4e327ba3595a",
        "original_commit_id": "bea6bc459c6829df8be725bc163f944501d55107",
        "user": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "This test can be included in the `test_initialization` with some asserts",
        "created_at": "2020-03-07T11:31:38Z",
        "updated_at": "2020-03-08T18:21:42Z",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r389248306",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621",
        "author_association": "MEMBER",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389248306"
          },
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r389248306"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389248306/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "user_data": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false,
          "name": "valerio",
          "company": "@Bitergia ",
          "blog": "http://valeriocos.github.io/",
          "location": "Madrid, Spain",
          "email": "valcos@bitergia.com",
          "hireable": true,
          "bio": null,
          "public_repos": 57,
          "public_gists": 28,
          "followers": 34,
          "following": 5,
          "created_at": "2014-01-27T14:30:30Z",
          "updated_at": "2020-03-17T10:02:44Z",
          "organizations": [
            {
              "login": "Bitergia",
              "id": 1918070,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=",
              "url": "https://api.github.com/orgs/Bitergia",
              "repos_url": "https://api.github.com/orgs/Bitergia/repos",
              "events_url": "https://api.github.com/orgs/Bitergia/events",
              "hooks_url": "https://api.github.com/orgs/Bitergia/hooks",
              "issues_url": "https://api.github.com/orgs/Bitergia/issues",
              "members_url": "https://api.github.com/orgs/Bitergia/members{/member}",
              "public_members_url": "https://api.github.com/orgs/Bitergia/public_members{/member}",
              "avatar_url": "https://avatars3.githubusercontent.com/u/1918070?v=4",
              "description": null
            },
            {
              "login": "grimoirelab",
              "id": 16151805,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1",
              "url": "https://api.github.com/orgs/grimoirelab",
              "repos_url": "https://api.github.com/orgs/grimoirelab/repos",
              "events_url": "https://api.github.com/orgs/grimoirelab/events",
              "hooks_url": "https://api.github.com/orgs/grimoirelab/hooks",
              "issues_url": "https://api.github.com/orgs/grimoirelab/issues",
              "members_url": "https://api.github.com/orgs/grimoirelab/members{/member}",
              "public_members_url": "https://api.github.com/orgs/grimoirelab/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/16151805?v=4",
              "description": ""
            },
            {
              "login": "chaoss",
              "id": 29740296,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
              "url": "https://api.github.com/orgs/chaoss",
              "repos_url": "https://api.github.com/orgs/chaoss/repos",
              "events_url": "https://api.github.com/orgs/chaoss/events",
              "hooks_url": "https://api.github.com/orgs/chaoss/hooks",
              "issues_url": "https://api.github.com/orgs/chaoss/issues",
              "members_url": "https://api.github.com/orgs/chaoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/chaoss/public_members{/member}",
              "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
              "description": ""
            }
          ]
        },
        "reactions_data": []
      },
      {
        "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389248759",
        "pull_request_review_id": 370737508,
        "id": 389248759,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0ODc1OQ==",
        "diff_hunk": "@@ -0,0 +1,749 @@\n+#!/usr/bin/env python3\n+# -*- coding: utf-8 -*-\n+#\n+# Copyright (C) 2015-2019 Bitergia\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program. If not, see <http://www.gnu.org/licenses/>.\n+#\n+# Authors:\n+#     Animesh Kumar<animuz111@gmail.com>\n+#\n+\n+import datetime\n+import os\n+import unittest.mock\n+import httpretty\n+import pkg_resources\n+import requests\n+\n+pkg_resources.declare_namespace('perceval.backends')\n+\n+from perceval.backend import BackendCommandArgumentParser\n+from perceval.utils import (DEFAULT_DATETIME, DEFAULT_LAST_DATETIME)\n+from perceval.backends.core.pagure import (Pagure,\n+                                           PagureCommand,\n+                                           PagureClient,\n+                                           CATEGORY_ISSUE,\n+                                           MAX_CATEGORY_ITEMS_PER_PAGE)\n+from base import TestCaseBackendArchive\n+\n+PAGURE_API_URL = \"https://pagure.io/api/0\"\n+PAGURE_REPO_URL = PAGURE_API_URL + \"/Project-example\"\n+PAGURE_ISSUES_URL = PAGURE_REPO_URL + \"/issues\"\n+\n+# Repository with issue tracker disabled\n+PAGURE_REPO_URL_DISABLED_URL = PAGURE_API_URL + \"/Project-test-example\"\n+PAGURE_ISSUES_DISABLED_URL = PAGURE_REPO_URL_DISABLED_URL + \"/issues\"\n+\n+PAGURE_NAMESPACE_REPO_URL = PAGURE_API_URL + \"Test-group/Project-namespace-example\"\n+PAGURE_NAMESPACE_ISSUES_URL = PAGURE_NAMESPACE_REPO_URL + \"/issues\"\n+\n+\n+def read_file(filename, mode='r'):\n+    with open(os.path.join(os.path.dirname(os.path.abspath(__file__)), filename), mode) as f:\n+        content = f.read()\n+    return content\n+\n+\n+class TestPagureBackend(unittest.TestCase):\n+    \"\"\" Pagure backend tests \"\"\"\n+\n+    @httpretty.activate\n+    def test_initialization(self):\n+        \"\"\"Test whether attributes are initialized\"\"\"\n+\n+        pagure = Pagure(namespace=None, repository='Project-example', api_token='aaa', tag='test')\n+\n+        # Testing initialization when repository is not within a namespace\n+        self.assertEqual(pagure.repository, 'Project-example')\n+        self.assertIsNone(pagure.namespace)\n+        self.assertEqual(pagure.origin, 'https://pagure.io/Project-example')\n+        self.assertEqual(pagure.tag, 'test')\n+        self.assertEqual(pagure.max_items, MAX_CATEGORY_ITEMS_PER_PAGE)\n+        self.assertEqual(pagure.categories, [CATEGORY_ISSUE])\n+        self.assertTrue(pagure.ssl_verify)\n+\n+        # When tag is empty or None it will be set to the value in origin\n+        pagure = Pagure(namespace=None, repository='Project-example', api_token='aaa', ssl_verify=False)\n+        self.assertEqual(pagure.repository, 'Project-example')\n+        self.assertIsNone(pagure.namespace)\n+        self.assertEqual(pagure.origin, 'https://pagure.io/Project-example')\n+        self.assertEqual(pagure.tag, 'https://pagure.io/Project-example')\n+        self.assertFalse(pagure.ssl_verify)\n+\n+        pagure = Pagure(namespace=None, repository='Project-example', api_token='aaa', tag='')\n+        self.assertEqual(pagure.repository, 'Project-example')\n+        self.assertIsNone(pagure.namespace)\n+        self.assertEqual(pagure.origin, 'https://pagure.io/Project-example')\n+        self.assertEqual(pagure.tag, 'https://pagure.io/Project-example')\n+\n+        # Testing initialization when repository is within a namespace\n+        pagure = Pagure(namespace='Test-group', repository='Project-example-namespace', api_token='', tag='testing')\n+        self.assertEqual(pagure.repository, 'Project-example-namespace')\n+        self.assertEqual(pagure.namespace, 'Test-group')\n+        self.assertEqual(pagure.origin, 'https://pagure.io/Test-group/Project-example-namespace')\n+        self.assertEqual(pagure.tag, 'testing')\n+        self.assertEqual(pagure.max_items, MAX_CATEGORY_ITEMS_PER_PAGE)\n+        self.assertEqual(pagure.categories, [CATEGORY_ISSUE])\n+        self.assertTrue(pagure.ssl_verify)\n+\n+    def test_token_initialization(self):\n+        \"\"\"Test whether token parameter is initialized\"\"\"\n+\n+        # Empty value generates a None API token\n+        pagure = Pagure(repository='Project-test-example', tag='test')\n+        self.assertIsNone(pagure.api_token)\n+\n+        # Initialize the token\n+        pagure = Pagure(repository='Project-test-example', api_token='aaa', tag='test')\n+        self.assertEqual(pagure.api_token, 'aaa')\n+\n+    def test_has_resuming(self):\n+        \"\"\"Test if it returns True when has_resuming is called\"\"\"\n+\n+        self.assertEqual(Pagure.has_resuming(), True)\n+\n+    def test_has_archiving(self):\n+        \"\"\"Test if it returns True when has_archiving is called\"\"\"\n+\n+        self.assertEqual(Pagure.has_archiving(), True)\n+\n+    @httpretty.activate\n+    def test_fetch_issues(self):\n+        \"\"\"Test whether a list of issues is returned\"\"\"\n+\n+        body = read_file('data/pagure/pagure_repo_issue_1')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=body,\n+                               status=200,\n+                               )\n+        pagure = Pagure(repository='Project-example', api_token='aaa')\n+        issues = [issues for issues in pagure.fetch(from_date=None, to_date=None)]\n+\n+        self.assertEqual(len(issues), 1)\n+\n+        issue = issues[0]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['uuid'], '41071b08dd75f34ca92c6d5ecb844e7a3e5939c6')\n+        self.assertEqual(issue['updated_on'], 1583508642.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Project-example')\n+        self.assertEqual(len(issue['data']['comments']), 1)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+\n+    @httpretty.activate\n+    def test_fetch_issues_disabled(self):\n+        \"\"\"Test whether an empty response is returned in case a repository\n+           has disabled issue tracker\n+        \"\"\"\n+        body = read_file('data/pagure/pagure_empty_request')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=body,\n+                               status=404,\n+                               )\n+        pagure = Pagure(repository='Project-test-example')\n+        issues = [issues for issues in pagure.fetch(from_date=None, to_date=None)]\n+        self.assertEqual(len(issues), 0)\n+        self.assertListEqual(issues, [])\n+\n+    @httpretty.activate\n+    def test_search_fields_issues(self):\n+        \"\"\"Test whether the search_fields is properly set\"\"\"\n+\n+        body = read_file('data/pagure/pagure_repo_issue_1')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=body,\n+                               status=200,\n+                               )\n+\n+        pagure = Pagure(repository='Project-example', api_token='aaa')\n+        issues = [issues for issues in pagure.fetch(from_date=None, to_date=None)]\n+\n+        issue = issues[0]\n+        self.assertEqual(pagure.metadata_id(issue['data']), issue['search_fields']['item_id'])\n+        self.assertIsNone(issue['search_fields']['namespace'])\n+        self.assertEqual(issue['search_fields']['repo'], 'Project-example')\n+\n+    @httpretty.activate\n+    def test_fetch_issues_reaction(self):\n+        \"\"\"Test the reactions on an issue comment\"\"\"",
        "path": "tests/test_pagure.py",
        "position": null,
        "original_position": 186,
        "commit_id": "70a89aa1dccc5152ed4a52cb4c5e4e327ba3595a",
        "original_commit_id": "bea6bc459c6829df8be725bc163f944501d55107",
        "user": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "I'm not sure this test is needed, since the reactions are directly included in the comments (we don't need any extra call to the API).",
        "created_at": "2020-03-07T11:39:52Z",
        "updated_at": "2020-03-08T18:21:42Z",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r389248759",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621",
        "author_association": "MEMBER",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389248759"
          },
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r389248759"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389248759/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "user_data": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false,
          "name": "valerio",
          "company": "@Bitergia ",
          "blog": "http://valeriocos.github.io/",
          "location": "Madrid, Spain",
          "email": "valcos@bitergia.com",
          "hireable": true,
          "bio": null,
          "public_repos": 57,
          "public_gists": 28,
          "followers": 34,
          "following": 5,
          "created_at": "2014-01-27T14:30:30Z",
          "updated_at": "2020-03-17T10:02:44Z",
          "organizations": [
            {
              "login": "Bitergia",
              "id": 1918070,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=",
              "url": "https://api.github.com/orgs/Bitergia",
              "repos_url": "https://api.github.com/orgs/Bitergia/repos",
              "events_url": "https://api.github.com/orgs/Bitergia/events",
              "hooks_url": "https://api.github.com/orgs/Bitergia/hooks",
              "issues_url": "https://api.github.com/orgs/Bitergia/issues",
              "members_url": "https://api.github.com/orgs/Bitergia/members{/member}",
              "public_members_url": "https://api.github.com/orgs/Bitergia/public_members{/member}",
              "avatar_url": "https://avatars3.githubusercontent.com/u/1918070?v=4",
              "description": null
            },
            {
              "login": "grimoirelab",
              "id": 16151805,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1",
              "url": "https://api.github.com/orgs/grimoirelab",
              "repos_url": "https://api.github.com/orgs/grimoirelab/repos",
              "events_url": "https://api.github.com/orgs/grimoirelab/events",
              "hooks_url": "https://api.github.com/orgs/grimoirelab/hooks",
              "issues_url": "https://api.github.com/orgs/grimoirelab/issues",
              "members_url": "https://api.github.com/orgs/grimoirelab/members{/member}",
              "public_members_url": "https://api.github.com/orgs/grimoirelab/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/16151805?v=4",
              "description": ""
            },
            {
              "login": "chaoss",
              "id": 29740296,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
              "url": "https://api.github.com/orgs/chaoss",
              "repos_url": "https://api.github.com/orgs/chaoss/repos",
              "events_url": "https://api.github.com/orgs/chaoss/events",
              "hooks_url": "https://api.github.com/orgs/chaoss/hooks",
              "issues_url": "https://api.github.com/orgs/chaoss/issues",
              "members_url": "https://api.github.com/orgs/chaoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/chaoss/public_members{/member}",
              "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
              "description": ""
            }
          ]
        },
        "reactions_data": []
      },
      {
        "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389248772",
        "pull_request_review_id": 370737508,
        "id": 389248772,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0ODc3Mg==",
        "diff_hunk": "@@ -0,0 +1,749 @@\n+#!/usr/bin/env python3\n+# -*- coding: utf-8 -*-\n+#\n+# Copyright (C) 2015-2019 Bitergia\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program. If not, see <http://www.gnu.org/licenses/>.\n+#\n+# Authors:\n+#     Animesh Kumar<animuz111@gmail.com>\n+#\n+\n+import datetime\n+import os\n+import unittest.mock\n+import httpretty\n+import pkg_resources\n+import requests\n+\n+pkg_resources.declare_namespace('perceval.backends')\n+\n+from perceval.backend import BackendCommandArgumentParser\n+from perceval.utils import (DEFAULT_DATETIME, DEFAULT_LAST_DATETIME)\n+from perceval.backends.core.pagure import (Pagure,\n+                                           PagureCommand,\n+                                           PagureClient,\n+                                           CATEGORY_ISSUE,\n+                                           MAX_CATEGORY_ITEMS_PER_PAGE)\n+from base import TestCaseBackendArchive\n+\n+PAGURE_API_URL = \"https://pagure.io/api/0\"\n+PAGURE_REPO_URL = PAGURE_API_URL + \"/Project-example\"\n+PAGURE_ISSUES_URL = PAGURE_REPO_URL + \"/issues\"\n+\n+# Repository with issue tracker disabled\n+PAGURE_REPO_URL_DISABLED_URL = PAGURE_API_URL + \"/Project-test-example\"\n+PAGURE_ISSUES_DISABLED_URL = PAGURE_REPO_URL_DISABLED_URL + \"/issues\"\n+\n+PAGURE_NAMESPACE_REPO_URL = PAGURE_API_URL + \"Test-group/Project-namespace-example\"\n+PAGURE_NAMESPACE_ISSUES_URL = PAGURE_NAMESPACE_REPO_URL + \"/issues\"\n+\n+\n+def read_file(filename, mode='r'):\n+    with open(os.path.join(os.path.dirname(os.path.abspath(__file__)), filename), mode) as f:\n+        content = f.read()\n+    return content\n+\n+\n+class TestPagureBackend(unittest.TestCase):\n+    \"\"\" Pagure backend tests \"\"\"\n+\n+    @httpretty.activate\n+    def test_initialization(self):\n+        \"\"\"Test whether attributes are initialized\"\"\"\n+\n+        pagure = Pagure(namespace=None, repository='Project-example', api_token='aaa', tag='test')\n+\n+        # Testing initialization when repository is not within a namespace\n+        self.assertEqual(pagure.repository, 'Project-example')\n+        self.assertIsNone(pagure.namespace)\n+        self.assertEqual(pagure.origin, 'https://pagure.io/Project-example')\n+        self.assertEqual(pagure.tag, 'test')\n+        self.assertEqual(pagure.max_items, MAX_CATEGORY_ITEMS_PER_PAGE)\n+        self.assertEqual(pagure.categories, [CATEGORY_ISSUE])\n+        self.assertTrue(pagure.ssl_verify)\n+\n+        # When tag is empty or None it will be set to the value in origin\n+        pagure = Pagure(namespace=None, repository='Project-example', api_token='aaa', ssl_verify=False)\n+        self.assertEqual(pagure.repository, 'Project-example')\n+        self.assertIsNone(pagure.namespace)\n+        self.assertEqual(pagure.origin, 'https://pagure.io/Project-example')\n+        self.assertEqual(pagure.tag, 'https://pagure.io/Project-example')\n+        self.assertFalse(pagure.ssl_verify)\n+\n+        pagure = Pagure(namespace=None, repository='Project-example', api_token='aaa', tag='')\n+        self.assertEqual(pagure.repository, 'Project-example')\n+        self.assertIsNone(pagure.namespace)\n+        self.assertEqual(pagure.origin, 'https://pagure.io/Project-example')\n+        self.assertEqual(pagure.tag, 'https://pagure.io/Project-example')\n+\n+        # Testing initialization when repository is within a namespace\n+        pagure = Pagure(namespace='Test-group', repository='Project-example-namespace', api_token='', tag='testing')\n+        self.assertEqual(pagure.repository, 'Project-example-namespace')\n+        self.assertEqual(pagure.namespace, 'Test-group')\n+        self.assertEqual(pagure.origin, 'https://pagure.io/Test-group/Project-example-namespace')\n+        self.assertEqual(pagure.tag, 'testing')\n+        self.assertEqual(pagure.max_items, MAX_CATEGORY_ITEMS_PER_PAGE)\n+        self.assertEqual(pagure.categories, [CATEGORY_ISSUE])\n+        self.assertTrue(pagure.ssl_verify)\n+\n+    def test_token_initialization(self):\n+        \"\"\"Test whether token parameter is initialized\"\"\"\n+\n+        # Empty value generates a None API token\n+        pagure = Pagure(repository='Project-test-example', tag='test')\n+        self.assertIsNone(pagure.api_token)\n+\n+        # Initialize the token\n+        pagure = Pagure(repository='Project-test-example', api_token='aaa', tag='test')\n+        self.assertEqual(pagure.api_token, 'aaa')\n+\n+    def test_has_resuming(self):\n+        \"\"\"Test if it returns True when has_resuming is called\"\"\"\n+\n+        self.assertEqual(Pagure.has_resuming(), True)\n+\n+    def test_has_archiving(self):\n+        \"\"\"Test if it returns True when has_archiving is called\"\"\"\n+\n+        self.assertEqual(Pagure.has_archiving(), True)\n+\n+    @httpretty.activate\n+    def test_fetch_issues(self):\n+        \"\"\"Test whether a list of issues is returned\"\"\"\n+\n+        body = read_file('data/pagure/pagure_repo_issue_1')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=body,\n+                               status=200,\n+                               )\n+        pagure = Pagure(repository='Project-example', api_token='aaa')\n+        issues = [issues for issues in pagure.fetch(from_date=None, to_date=None)]\n+\n+        self.assertEqual(len(issues), 1)\n+\n+        issue = issues[0]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['uuid'], '41071b08dd75f34ca92c6d5ecb844e7a3e5939c6')\n+        self.assertEqual(issue['updated_on'], 1583508642.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Project-example')\n+        self.assertEqual(len(issue['data']['comments']), 1)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+\n+    @httpretty.activate\n+    def test_fetch_issues_disabled(self):\n+        \"\"\"Test whether an empty response is returned in case a repository\n+           has disabled issue tracker\n+        \"\"\"\n+        body = read_file('data/pagure/pagure_empty_request')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=body,\n+                               status=404,\n+                               )\n+        pagure = Pagure(repository='Project-test-example')\n+        issues = [issues for issues in pagure.fetch(from_date=None, to_date=None)]\n+        self.assertEqual(len(issues), 0)\n+        self.assertListEqual(issues, [])\n+\n+    @httpretty.activate\n+    def test_search_fields_issues(self):\n+        \"\"\"Test whether the search_fields is properly set\"\"\"\n+\n+        body = read_file('data/pagure/pagure_repo_issue_1')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=body,\n+                               status=200,\n+                               )\n+\n+        pagure = Pagure(repository='Project-example', api_token='aaa')\n+        issues = [issues for issues in pagure.fetch(from_date=None, to_date=None)]\n+\n+        issue = issues[0]\n+        self.assertEqual(pagure.metadata_id(issue['data']), issue['search_fields']['item_id'])\n+        self.assertIsNone(issue['search_fields']['namespace'])\n+        self.assertEqual(issue['search_fields']['repo'], 'Project-example')\n+\n+    @httpretty.activate\n+    def test_fetch_issues_reaction(self):\n+        \"\"\"Test the reactions on an issue comment\"\"\"\n+\n+        issue_2 = read_file('data/pagure/pagure_repo_issue_2')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=issue_2,\n+                               status=200,\n+                               )\n+\n+        pagure = Pagure(repository='Project-example')\n+        issues = [issues for issues in pagure.fetch()]\n+\n+        self.assertEqual(len(issues), 2)\n+\n+        issue = issues[0]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['uuid'], '41071b08dd75f34ca92c6d5ecb844e7a3e5939c6')\n+        self.assertEqual(issue['updated_on'], 1583508642.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Project-example')\n+        self.assertEqual(len(issue['data']['comments']), 1)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk08')\n+        self.assertEqual(len(issue['data']['comments'][0]['reactions']), 0)\n+\n+        issue = issues[1]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['uuid'], '7dd3642664c8a7e475814b9037277df775657850')\n+        self.assertEqual(issue['updated_on'], 1583558174.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk0806')\n+        self.assertEqual(len(issue['data']['comments']), 2)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+        self.assertEqual(len(issue['data']['comments'][0]['reactions']), 0)\n+        self.assertEqual(len(issue['data']['comments'][1]['reactions']), 1)\n+        self.assertListEqual(issue['data']['comments'][1]['reactions']['Thumbs up'], ['animeshk0806'])\n+\n+    @httpretty.activate\n+    def test_fetch_more_issues(self):",
        "path": "tests/test_pagure.py",
        "position": null,
        "original_position": 226,
        "commit_id": "70a89aa1dccc5152ed4a52cb4c5e4e327ba3595a",
        "original_commit_id": "bea6bc459c6829df8be725bc163f944501d55107",
        "user": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "The test should check that issues on different pages are retrieved (ex.: https://github.com/chaoss/grimoirelab-perceval/blob/master/tests/test_github.py#L1121)",
        "created_at": "2020-03-07T11:40:19Z",
        "updated_at": "2020-03-08T18:21:42Z",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r389248772",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621",
        "author_association": "MEMBER",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389248772"
          },
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r389248772"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389248772/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "user_data": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false,
          "name": "valerio",
          "company": "@Bitergia ",
          "blog": "http://valeriocos.github.io/",
          "location": "Madrid, Spain",
          "email": "valcos@bitergia.com",
          "hireable": true,
          "bio": null,
          "public_repos": 57,
          "public_gists": 28,
          "followers": 34,
          "following": 5,
          "created_at": "2014-01-27T14:30:30Z",
          "updated_at": "2020-03-17T10:02:44Z",
          "organizations": [
            {
              "login": "Bitergia",
              "id": 1918070,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=",
              "url": "https://api.github.com/orgs/Bitergia",
              "repos_url": "https://api.github.com/orgs/Bitergia/repos",
              "events_url": "https://api.github.com/orgs/Bitergia/events",
              "hooks_url": "https://api.github.com/orgs/Bitergia/hooks",
              "issues_url": "https://api.github.com/orgs/Bitergia/issues",
              "members_url": "https://api.github.com/orgs/Bitergia/members{/member}",
              "public_members_url": "https://api.github.com/orgs/Bitergia/public_members{/member}",
              "avatar_url": "https://avatars3.githubusercontent.com/u/1918070?v=4",
              "description": null
            },
            {
              "login": "grimoirelab",
              "id": 16151805,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1",
              "url": "https://api.github.com/orgs/grimoirelab",
              "repos_url": "https://api.github.com/orgs/grimoirelab/repos",
              "events_url": "https://api.github.com/orgs/grimoirelab/events",
              "hooks_url": "https://api.github.com/orgs/grimoirelab/hooks",
              "issues_url": "https://api.github.com/orgs/grimoirelab/issues",
              "members_url": "https://api.github.com/orgs/grimoirelab/members{/member}",
              "public_members_url": "https://api.github.com/orgs/grimoirelab/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/16151805?v=4",
              "description": ""
            },
            {
              "login": "chaoss",
              "id": 29740296,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
              "url": "https://api.github.com/orgs/chaoss",
              "repos_url": "https://api.github.com/orgs/chaoss/repos",
              "events_url": "https://api.github.com/orgs/chaoss/events",
              "hooks_url": "https://api.github.com/orgs/chaoss/hooks",
              "issues_url": "https://api.github.com/orgs/chaoss/issues",
              "members_url": "https://api.github.com/orgs/chaoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/chaoss/public_members{/member}",
              "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
              "description": ""
            }
          ]
        },
        "reactions_data": []
      },
      {
        "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389248922",
        "pull_request_review_id": 370737508,
        "id": 389248922,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0ODkyMg==",
        "diff_hunk": "@@ -0,0 +1,749 @@\n+#!/usr/bin/env python3\n+# -*- coding: utf-8 -*-\n+#\n+# Copyright (C) 2015-2019 Bitergia\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program. If not, see <http://www.gnu.org/licenses/>.\n+#\n+# Authors:\n+#     Animesh Kumar<animuz111@gmail.com>\n+#\n+\n+import datetime\n+import os\n+import unittest.mock\n+import httpretty\n+import pkg_resources\n+import requests\n+\n+pkg_resources.declare_namespace('perceval.backends')\n+\n+from perceval.backend import BackendCommandArgumentParser\n+from perceval.utils import (DEFAULT_DATETIME, DEFAULT_LAST_DATETIME)\n+from perceval.backends.core.pagure import (Pagure,\n+                                           PagureCommand,\n+                                           PagureClient,\n+                                           CATEGORY_ISSUE,\n+                                           MAX_CATEGORY_ITEMS_PER_PAGE)\n+from base import TestCaseBackendArchive\n+\n+PAGURE_API_URL = \"https://pagure.io/api/0\"\n+PAGURE_REPO_URL = PAGURE_API_URL + \"/Project-example\"\n+PAGURE_ISSUES_URL = PAGURE_REPO_URL + \"/issues\"\n+\n+# Repository with issue tracker disabled\n+PAGURE_REPO_URL_DISABLED_URL = PAGURE_API_URL + \"/Project-test-example\"\n+PAGURE_ISSUES_DISABLED_URL = PAGURE_REPO_URL_DISABLED_URL + \"/issues\"\n+\n+PAGURE_NAMESPACE_REPO_URL = PAGURE_API_URL + \"Test-group/Project-namespace-example\"\n+PAGURE_NAMESPACE_ISSUES_URL = PAGURE_NAMESPACE_REPO_URL + \"/issues\"\n+\n+\n+def read_file(filename, mode='r'):\n+    with open(os.path.join(os.path.dirname(os.path.abspath(__file__)), filename), mode) as f:\n+        content = f.read()\n+    return content\n+\n+\n+class TestPagureBackend(unittest.TestCase):\n+    \"\"\" Pagure backend tests \"\"\"\n+\n+    @httpretty.activate\n+    def test_initialization(self):\n+        \"\"\"Test whether attributes are initialized\"\"\"\n+\n+        pagure = Pagure(namespace=None, repository='Project-example', api_token='aaa', tag='test')\n+\n+        # Testing initialization when repository is not within a namespace\n+        self.assertEqual(pagure.repository, 'Project-example')\n+        self.assertIsNone(pagure.namespace)\n+        self.assertEqual(pagure.origin, 'https://pagure.io/Project-example')\n+        self.assertEqual(pagure.tag, 'test')\n+        self.assertEqual(pagure.max_items, MAX_CATEGORY_ITEMS_PER_PAGE)\n+        self.assertEqual(pagure.categories, [CATEGORY_ISSUE])\n+        self.assertTrue(pagure.ssl_verify)\n+\n+        # When tag is empty or None it will be set to the value in origin\n+        pagure = Pagure(namespace=None, repository='Project-example', api_token='aaa', ssl_verify=False)\n+        self.assertEqual(pagure.repository, 'Project-example')\n+        self.assertIsNone(pagure.namespace)\n+        self.assertEqual(pagure.origin, 'https://pagure.io/Project-example')\n+        self.assertEqual(pagure.tag, 'https://pagure.io/Project-example')\n+        self.assertFalse(pagure.ssl_verify)\n+\n+        pagure = Pagure(namespace=None, repository='Project-example', api_token='aaa', tag='')\n+        self.assertEqual(pagure.repository, 'Project-example')\n+        self.assertIsNone(pagure.namespace)\n+        self.assertEqual(pagure.origin, 'https://pagure.io/Project-example')\n+        self.assertEqual(pagure.tag, 'https://pagure.io/Project-example')\n+\n+        # Testing initialization when repository is within a namespace\n+        pagure = Pagure(namespace='Test-group', repository='Project-example-namespace', api_token='', tag='testing')\n+        self.assertEqual(pagure.repository, 'Project-example-namespace')\n+        self.assertEqual(pagure.namespace, 'Test-group')\n+        self.assertEqual(pagure.origin, 'https://pagure.io/Test-group/Project-example-namespace')\n+        self.assertEqual(pagure.tag, 'testing')\n+        self.assertEqual(pagure.max_items, MAX_CATEGORY_ITEMS_PER_PAGE)\n+        self.assertEqual(pagure.categories, [CATEGORY_ISSUE])\n+        self.assertTrue(pagure.ssl_verify)\n+\n+    def test_token_initialization(self):\n+        \"\"\"Test whether token parameter is initialized\"\"\"\n+\n+        # Empty value generates a None API token\n+        pagure = Pagure(repository='Project-test-example', tag='test')\n+        self.assertIsNone(pagure.api_token)\n+\n+        # Initialize the token\n+        pagure = Pagure(repository='Project-test-example', api_token='aaa', tag='test')\n+        self.assertEqual(pagure.api_token, 'aaa')\n+\n+    def test_has_resuming(self):\n+        \"\"\"Test if it returns True when has_resuming is called\"\"\"\n+\n+        self.assertEqual(Pagure.has_resuming(), True)\n+\n+    def test_has_archiving(self):\n+        \"\"\"Test if it returns True when has_archiving is called\"\"\"\n+\n+        self.assertEqual(Pagure.has_archiving(), True)\n+\n+    @httpretty.activate\n+    def test_fetch_issues(self):\n+        \"\"\"Test whether a list of issues is returned\"\"\"\n+\n+        body = read_file('data/pagure/pagure_repo_issue_1')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=body,\n+                               status=200,\n+                               )\n+        pagure = Pagure(repository='Project-example', api_token='aaa')\n+        issues = [issues for issues in pagure.fetch(from_date=None, to_date=None)]\n+\n+        self.assertEqual(len(issues), 1)\n+\n+        issue = issues[0]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['uuid'], '41071b08dd75f34ca92c6d5ecb844e7a3e5939c6')\n+        self.assertEqual(issue['updated_on'], 1583508642.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Project-example')\n+        self.assertEqual(len(issue['data']['comments']), 1)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+\n+    @httpretty.activate\n+    def test_fetch_issues_disabled(self):\n+        \"\"\"Test whether an empty response is returned in case a repository\n+           has disabled issue tracker\n+        \"\"\"\n+        body = read_file('data/pagure/pagure_empty_request')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=body,\n+                               status=404,\n+                               )\n+        pagure = Pagure(repository='Project-test-example')\n+        issues = [issues for issues in pagure.fetch(from_date=None, to_date=None)]\n+        self.assertEqual(len(issues), 0)\n+        self.assertListEqual(issues, [])\n+\n+    @httpretty.activate\n+    def test_search_fields_issues(self):\n+        \"\"\"Test whether the search_fields is properly set\"\"\"\n+\n+        body = read_file('data/pagure/pagure_repo_issue_1')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=body,\n+                               status=200,\n+                               )\n+\n+        pagure = Pagure(repository='Project-example', api_token='aaa')\n+        issues = [issues for issues in pagure.fetch(from_date=None, to_date=None)]\n+\n+        issue = issues[0]\n+        self.assertEqual(pagure.metadata_id(issue['data']), issue['search_fields']['item_id'])\n+        self.assertIsNone(issue['search_fields']['namespace'])\n+        self.assertEqual(issue['search_fields']['repo'], 'Project-example')\n+\n+    @httpretty.activate\n+    def test_fetch_issues_reaction(self):\n+        \"\"\"Test the reactions on an issue comment\"\"\"\n+\n+        issue_2 = read_file('data/pagure/pagure_repo_issue_2')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=issue_2,\n+                               status=200,\n+                               )\n+\n+        pagure = Pagure(repository='Project-example')\n+        issues = [issues for issues in pagure.fetch()]\n+\n+        self.assertEqual(len(issues), 2)\n+\n+        issue = issues[0]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['uuid'], '41071b08dd75f34ca92c6d5ecb844e7a3e5939c6')\n+        self.assertEqual(issue['updated_on'], 1583508642.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Project-example')\n+        self.assertEqual(len(issue['data']['comments']), 1)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk08')\n+        self.assertEqual(len(issue['data']['comments'][0]['reactions']), 0)\n+\n+        issue = issues[1]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['uuid'], '7dd3642664c8a7e475814b9037277df775657850')\n+        self.assertEqual(issue['updated_on'], 1583558174.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk0806')\n+        self.assertEqual(len(issue['data']['comments']), 2)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+        self.assertEqual(len(issue['data']['comments'][0]['reactions']), 0)\n+        self.assertEqual(len(issue['data']['comments'][1]['reactions']), 1)\n+        self.assertListEqual(issue['data']['comments'][1]['reactions']['Thumbs up'], ['animeshk0806'])\n+\n+    @httpretty.activate\n+    def test_fetch_more_issues(self):\n+        \"\"\"Test when return two issues\"\"\"\n+\n+        issue_2 = read_file('data/pagure/pagure_repo_issue_2')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=issue_2,\n+                               status=200,\n+                               )\n+\n+        pagure = Pagure(repository='Project-example')\n+        issues = [issues for issues in pagure.fetch()]\n+\n+        self.assertEqual(len(issues), 2)\n+\n+        issue = issues[0]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['uuid'], '41071b08dd75f34ca92c6d5ecb844e7a3e5939c6')\n+        self.assertEqual(issue['updated_on'], 1583508642.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Project-example')\n+        self.assertEqual(len(issue['data']['comments']), 1)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk08')\n+\n+        issue = issues[1]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['uuid'], '7dd3642664c8a7e475814b9037277df775657850')\n+        self.assertEqual(issue['updated_on'], 1583558174.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk0806')\n+        self.assertEqual(len(issue['data']['comments']), 2)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+\n+    @httpretty.activate\n+    def test_fetch_issues_until_date(self):\n+        \"\"\"Test when return issue till a particular date\"\"\"",
        "path": "tests/test_pagure.py",
        "position": null,
        "original_position": 264,
        "commit_id": "70a89aa1dccc5152ed4a52cb4c5e4e327ba3595a",
        "original_commit_id": "bea6bc459c6829df8be725bc163f944501d55107",
        "user": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "The test data should include two issues, one outside the to_date (which should be the one returned)",
        "created_at": "2020-03-07T11:42:20Z",
        "updated_at": "2020-03-08T18:21:42Z",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r389248922",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621",
        "author_association": "MEMBER",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389248922"
          },
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r389248922"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389248922/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "user_data": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false,
          "name": "valerio",
          "company": "@Bitergia ",
          "blog": "http://valeriocos.github.io/",
          "location": "Madrid, Spain",
          "email": "valcos@bitergia.com",
          "hireable": true,
          "bio": null,
          "public_repos": 57,
          "public_gists": 28,
          "followers": 34,
          "following": 5,
          "created_at": "2014-01-27T14:30:30Z",
          "updated_at": "2020-03-17T10:02:44Z",
          "organizations": [
            {
              "login": "Bitergia",
              "id": 1918070,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=",
              "url": "https://api.github.com/orgs/Bitergia",
              "repos_url": "https://api.github.com/orgs/Bitergia/repos",
              "events_url": "https://api.github.com/orgs/Bitergia/events",
              "hooks_url": "https://api.github.com/orgs/Bitergia/hooks",
              "issues_url": "https://api.github.com/orgs/Bitergia/issues",
              "members_url": "https://api.github.com/orgs/Bitergia/members{/member}",
              "public_members_url": "https://api.github.com/orgs/Bitergia/public_members{/member}",
              "avatar_url": "https://avatars3.githubusercontent.com/u/1918070?v=4",
              "description": null
            },
            {
              "login": "grimoirelab",
              "id": 16151805,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1",
              "url": "https://api.github.com/orgs/grimoirelab",
              "repos_url": "https://api.github.com/orgs/grimoirelab/repos",
              "events_url": "https://api.github.com/orgs/grimoirelab/events",
              "hooks_url": "https://api.github.com/orgs/grimoirelab/hooks",
              "issues_url": "https://api.github.com/orgs/grimoirelab/issues",
              "members_url": "https://api.github.com/orgs/grimoirelab/members{/member}",
              "public_members_url": "https://api.github.com/orgs/grimoirelab/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/16151805?v=4",
              "description": ""
            },
            {
              "login": "chaoss",
              "id": 29740296,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
              "url": "https://api.github.com/orgs/chaoss",
              "repos_url": "https://api.github.com/orgs/chaoss/repos",
              "events_url": "https://api.github.com/orgs/chaoss/events",
              "hooks_url": "https://api.github.com/orgs/chaoss/hooks",
              "issues_url": "https://api.github.com/orgs/chaoss/issues",
              "members_url": "https://api.github.com/orgs/chaoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/chaoss/public_members{/member}",
              "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
              "description": ""
            }
          ]
        },
        "reactions_data": []
      },
      {
        "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389249114",
        "pull_request_review_id": 370737508,
        "id": 389249114,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0OTExNA==",
        "diff_hunk": "@@ -0,0 +1,749 @@\n+#!/usr/bin/env python3\n+# -*- coding: utf-8 -*-\n+#\n+# Copyright (C) 2015-2019 Bitergia\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program. If not, see <http://www.gnu.org/licenses/>.\n+#\n+# Authors:\n+#     Animesh Kumar<animuz111@gmail.com>\n+#\n+\n+import datetime\n+import os\n+import unittest.mock\n+import httpretty\n+import pkg_resources\n+import requests\n+\n+pkg_resources.declare_namespace('perceval.backends')\n+\n+from perceval.backend import BackendCommandArgumentParser\n+from perceval.utils import (DEFAULT_DATETIME, DEFAULT_LAST_DATETIME)\n+from perceval.backends.core.pagure import (Pagure,\n+                                           PagureCommand,\n+                                           PagureClient,\n+                                           CATEGORY_ISSUE,\n+                                           MAX_CATEGORY_ITEMS_PER_PAGE)\n+from base import TestCaseBackendArchive\n+\n+PAGURE_API_URL = \"https://pagure.io/api/0\"\n+PAGURE_REPO_URL = PAGURE_API_URL + \"/Project-example\"\n+PAGURE_ISSUES_URL = PAGURE_REPO_URL + \"/issues\"\n+\n+# Repository with issue tracker disabled\n+PAGURE_REPO_URL_DISABLED_URL = PAGURE_API_URL + \"/Project-test-example\"\n+PAGURE_ISSUES_DISABLED_URL = PAGURE_REPO_URL_DISABLED_URL + \"/issues\"\n+\n+PAGURE_NAMESPACE_REPO_URL = PAGURE_API_URL + \"Test-group/Project-namespace-example\"\n+PAGURE_NAMESPACE_ISSUES_URL = PAGURE_NAMESPACE_REPO_URL + \"/issues\"\n+\n+\n+def read_file(filename, mode='r'):\n+    with open(os.path.join(os.path.dirname(os.path.abspath(__file__)), filename), mode) as f:\n+        content = f.read()\n+    return content\n+\n+\n+class TestPagureBackend(unittest.TestCase):\n+    \"\"\" Pagure backend tests \"\"\"\n+\n+    @httpretty.activate\n+    def test_initialization(self):\n+        \"\"\"Test whether attributes are initialized\"\"\"\n+\n+        pagure = Pagure(namespace=None, repository='Project-example', api_token='aaa', tag='test')\n+\n+        # Testing initialization when repository is not within a namespace\n+        self.assertEqual(pagure.repository, 'Project-example')\n+        self.assertIsNone(pagure.namespace)\n+        self.assertEqual(pagure.origin, 'https://pagure.io/Project-example')\n+        self.assertEqual(pagure.tag, 'test')\n+        self.assertEqual(pagure.max_items, MAX_CATEGORY_ITEMS_PER_PAGE)\n+        self.assertEqual(pagure.categories, [CATEGORY_ISSUE])\n+        self.assertTrue(pagure.ssl_verify)\n+\n+        # When tag is empty or None it will be set to the value in origin\n+        pagure = Pagure(namespace=None, repository='Project-example', api_token='aaa', ssl_verify=False)\n+        self.assertEqual(pagure.repository, 'Project-example')\n+        self.assertIsNone(pagure.namespace)\n+        self.assertEqual(pagure.origin, 'https://pagure.io/Project-example')\n+        self.assertEqual(pagure.tag, 'https://pagure.io/Project-example')\n+        self.assertFalse(pagure.ssl_verify)\n+\n+        pagure = Pagure(namespace=None, repository='Project-example', api_token='aaa', tag='')\n+        self.assertEqual(pagure.repository, 'Project-example')\n+        self.assertIsNone(pagure.namespace)\n+        self.assertEqual(pagure.origin, 'https://pagure.io/Project-example')\n+        self.assertEqual(pagure.tag, 'https://pagure.io/Project-example')\n+\n+        # Testing initialization when repository is within a namespace\n+        pagure = Pagure(namespace='Test-group', repository='Project-example-namespace', api_token='', tag='testing')\n+        self.assertEqual(pagure.repository, 'Project-example-namespace')\n+        self.assertEqual(pagure.namespace, 'Test-group')\n+        self.assertEqual(pagure.origin, 'https://pagure.io/Test-group/Project-example-namespace')\n+        self.assertEqual(pagure.tag, 'testing')\n+        self.assertEqual(pagure.max_items, MAX_CATEGORY_ITEMS_PER_PAGE)\n+        self.assertEqual(pagure.categories, [CATEGORY_ISSUE])\n+        self.assertTrue(pagure.ssl_verify)\n+\n+    def test_token_initialization(self):\n+        \"\"\"Test whether token parameter is initialized\"\"\"\n+\n+        # Empty value generates a None API token\n+        pagure = Pagure(repository='Project-test-example', tag='test')\n+        self.assertIsNone(pagure.api_token)\n+\n+        # Initialize the token\n+        pagure = Pagure(repository='Project-test-example', api_token='aaa', tag='test')\n+        self.assertEqual(pagure.api_token, 'aaa')\n+\n+    def test_has_resuming(self):\n+        \"\"\"Test if it returns True when has_resuming is called\"\"\"\n+\n+        self.assertEqual(Pagure.has_resuming(), True)\n+\n+    def test_has_archiving(self):\n+        \"\"\"Test if it returns True when has_archiving is called\"\"\"\n+\n+        self.assertEqual(Pagure.has_archiving(), True)\n+\n+    @httpretty.activate\n+    def test_fetch_issues(self):\n+        \"\"\"Test whether a list of issues is returned\"\"\"\n+\n+        body = read_file('data/pagure/pagure_repo_issue_1')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=body,\n+                               status=200,\n+                               )\n+        pagure = Pagure(repository='Project-example', api_token='aaa')\n+        issues = [issues for issues in pagure.fetch(from_date=None, to_date=None)]\n+\n+        self.assertEqual(len(issues), 1)\n+\n+        issue = issues[0]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['uuid'], '41071b08dd75f34ca92c6d5ecb844e7a3e5939c6')\n+        self.assertEqual(issue['updated_on'], 1583508642.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Project-example')\n+        self.assertEqual(len(issue['data']['comments']), 1)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+\n+    @httpretty.activate\n+    def test_fetch_issues_disabled(self):\n+        \"\"\"Test whether an empty response is returned in case a repository\n+           has disabled issue tracker\n+        \"\"\"\n+        body = read_file('data/pagure/pagure_empty_request')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=body,\n+                               status=404,\n+                               )\n+        pagure = Pagure(repository='Project-test-example')\n+        issues = [issues for issues in pagure.fetch(from_date=None, to_date=None)]\n+        self.assertEqual(len(issues), 0)\n+        self.assertListEqual(issues, [])\n+\n+    @httpretty.activate\n+    def test_search_fields_issues(self):\n+        \"\"\"Test whether the search_fields is properly set\"\"\"\n+\n+        body = read_file('data/pagure/pagure_repo_issue_1')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=body,\n+                               status=200,\n+                               )\n+\n+        pagure = Pagure(repository='Project-example', api_token='aaa')\n+        issues = [issues for issues in pagure.fetch(from_date=None, to_date=None)]\n+\n+        issue = issues[0]\n+        self.assertEqual(pagure.metadata_id(issue['data']), issue['search_fields']['item_id'])\n+        self.assertIsNone(issue['search_fields']['namespace'])\n+        self.assertEqual(issue['search_fields']['repo'], 'Project-example')\n+\n+    @httpretty.activate\n+    def test_fetch_issues_reaction(self):\n+        \"\"\"Test the reactions on an issue comment\"\"\"\n+\n+        issue_2 = read_file('data/pagure/pagure_repo_issue_2')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=issue_2,\n+                               status=200,\n+                               )\n+\n+        pagure = Pagure(repository='Project-example')\n+        issues = [issues for issues in pagure.fetch()]\n+\n+        self.assertEqual(len(issues), 2)\n+\n+        issue = issues[0]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['uuid'], '41071b08dd75f34ca92c6d5ecb844e7a3e5939c6')\n+        self.assertEqual(issue['updated_on'], 1583508642.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Project-example')\n+        self.assertEqual(len(issue['data']['comments']), 1)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk08')\n+        self.assertEqual(len(issue['data']['comments'][0]['reactions']), 0)\n+\n+        issue = issues[1]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['uuid'], '7dd3642664c8a7e475814b9037277df775657850')\n+        self.assertEqual(issue['updated_on'], 1583558174.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk0806')\n+        self.assertEqual(len(issue['data']['comments']), 2)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+        self.assertEqual(len(issue['data']['comments'][0]['reactions']), 0)\n+        self.assertEqual(len(issue['data']['comments'][1]['reactions']), 1)\n+        self.assertListEqual(issue['data']['comments'][1]['reactions']['Thumbs up'], ['animeshk0806'])\n+\n+    @httpretty.activate\n+    def test_fetch_more_issues(self):\n+        \"\"\"Test when return two issues\"\"\"\n+\n+        issue_2 = read_file('data/pagure/pagure_repo_issue_2')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=issue_2,\n+                               status=200,\n+                               )\n+\n+        pagure = Pagure(repository='Project-example')\n+        issues = [issues for issues in pagure.fetch()]\n+\n+        self.assertEqual(len(issues), 2)\n+\n+        issue = issues[0]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['uuid'], '41071b08dd75f34ca92c6d5ecb844e7a3e5939c6')\n+        self.assertEqual(issue['updated_on'], 1583508642.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Project-example')\n+        self.assertEqual(len(issue['data']['comments']), 1)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk08')\n+\n+        issue = issues[1]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['uuid'], '7dd3642664c8a7e475814b9037277df775657850')\n+        self.assertEqual(issue['updated_on'], 1583558174.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk0806')\n+        self.assertEqual(len(issue['data']['comments']), 2)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+\n+    @httpretty.activate\n+    def test_fetch_issues_until_date(self):\n+        \"\"\"Test when return issue till a particular date\"\"\"\n+\n+        issue_1 = read_file('data/pagure/pagure_repo_issue_1')\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=issue_1,\n+                               status=200,\n+                               )\n+\n+        to_date = datetime.datetime(2020, 3, 7)\n+        pagure = Pagure(repository='Project-example')\n+        issues = [issues for issues in pagure.fetch(to_date=to_date)]\n+\n+        self.assertEqual(len(issues), 1)\n+\n+        issue = issues[0]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['uuid'], '41071b08dd75f34ca92c6d5ecb844e7a3e5939c6')\n+        self.assertEqual(issue['updated_on'], 1583508642.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk08')\n+        self.assertEqual(len(issue['data']['comments']), 1)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+\n+    @httpretty.activate\n+    def test_fetch_from_date(self):\n+        \"\"\"Test when return from date\"\"\"\n+\n+        body = read_file('data/pagure/pagure_repo_issue_from_2020_03_07')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=body,\n+                               status=200,\n+                               )\n+\n+        from_date = datetime.datetime(2020, 3, 8)\n+        pagure = Pagure(repository='Project-example')\n+        issues = [issues for issues in pagure.fetch(from_date=from_date)]\n+\n+        self.assertEqual(len(issues), 1)\n+        issue = issues[0]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['uuid'], '7dd3642664c8a7e475814b9037277df775657850')\n+        self.assertEqual(issue['updated_on'], 1583558174.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk0806')\n+        self.assertEqual(len(issue['data']['comments']), 2)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+\n+    @httpretty.activate\n+    def test_fetch_issues_namespace(self):\n+        \"\"\"Test issues fetch from a repository within a namespace\"\"\"\n+\n+        issue_1 = read_file('data/pagure/pagure_namespace_issue_2')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_NAMESPACE_ISSUES_URL,\n+                               body=issue_1, status=200,\n+                               )\n+\n+        pagure = Pagure(namespace='Test-group', repository='Project-namespace-example')\n+        issues = [issues for issues in pagure.fetch()]\n+\n+        self.assertEqual(len(issues), 2)\n+\n+        issue = issues[0]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Test-group/Project-namespace-example')\n+        self.assertEqual(issue['uuid'], 'bdf90e94bf3b17ed2f75f5e5187e21a62512ca5a')\n+        self.assertEqual(issue['updated_on'], 1583509042.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Test-group/Project-namespace-example')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk08')\n+        self.assertEqual(len(issue['data']['comments']), 1)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+\n+        issue = issues[1]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Test-group/Project-namespace-example')\n+        self.assertEqual(issue['uuid'], 'eec4d7bf5c3ca405e39f39a8c6faf616fd4fa425')\n+        self.assertEqual(issue['updated_on'], 1583562831.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Test-group/Project-namespace-example')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk0806')\n+        self.assertEqual(len(issue['data']['comments']), 2)\n+        self.assertEqual(issue['data']['comments'][1]['user']['name'], 'animeshk08')\n+\n+    @httpretty.activate\n+    def test_fetch_issues_namespace_reaction(self):",
        "path": "tests/test_pagure.py",
        "position": null,
        "original_position": 353,
        "commit_id": "70a89aa1dccc5152ed4a52cb4c5e4e327ba3595a",
        "original_commit_id": "bea6bc459c6829df8be725bc163f944501d55107",
        "user": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "Probably this test isn't needed since the reactions aren't fetched from a specific endpoint.",
        "created_at": "2020-03-07T11:45:54Z",
        "updated_at": "2020-03-08T18:21:42Z",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r389249114",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621",
        "author_association": "MEMBER",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389249114"
          },
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r389249114"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389249114/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "user_data": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false,
          "name": "valerio",
          "company": "@Bitergia ",
          "blog": "http://valeriocos.github.io/",
          "location": "Madrid, Spain",
          "email": "valcos@bitergia.com",
          "hireable": true,
          "bio": null,
          "public_repos": 57,
          "public_gists": 28,
          "followers": 34,
          "following": 5,
          "created_at": "2014-01-27T14:30:30Z",
          "updated_at": "2020-03-17T10:02:44Z",
          "organizations": [
            {
              "login": "Bitergia",
              "id": 1918070,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=",
              "url": "https://api.github.com/orgs/Bitergia",
              "repos_url": "https://api.github.com/orgs/Bitergia/repos",
              "events_url": "https://api.github.com/orgs/Bitergia/events",
              "hooks_url": "https://api.github.com/orgs/Bitergia/hooks",
              "issues_url": "https://api.github.com/orgs/Bitergia/issues",
              "members_url": "https://api.github.com/orgs/Bitergia/members{/member}",
              "public_members_url": "https://api.github.com/orgs/Bitergia/public_members{/member}",
              "avatar_url": "https://avatars3.githubusercontent.com/u/1918070?v=4",
              "description": null
            },
            {
              "login": "grimoirelab",
              "id": 16151805,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1",
              "url": "https://api.github.com/orgs/grimoirelab",
              "repos_url": "https://api.github.com/orgs/grimoirelab/repos",
              "events_url": "https://api.github.com/orgs/grimoirelab/events",
              "hooks_url": "https://api.github.com/orgs/grimoirelab/hooks",
              "issues_url": "https://api.github.com/orgs/grimoirelab/issues",
              "members_url": "https://api.github.com/orgs/grimoirelab/members{/member}",
              "public_members_url": "https://api.github.com/orgs/grimoirelab/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/16151805?v=4",
              "description": ""
            },
            {
              "login": "chaoss",
              "id": 29740296,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
              "url": "https://api.github.com/orgs/chaoss",
              "repos_url": "https://api.github.com/orgs/chaoss/repos",
              "events_url": "https://api.github.com/orgs/chaoss/events",
              "hooks_url": "https://api.github.com/orgs/chaoss/hooks",
              "issues_url": "https://api.github.com/orgs/chaoss/issues",
              "members_url": "https://api.github.com/orgs/chaoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/chaoss/public_members{/member}",
              "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
              "description": ""
            }
          ]
        },
        "reactions_data": []
      },
      {
        "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389249154",
        "pull_request_review_id": 370737508,
        "id": 389249154,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0OTE1NA==",
        "diff_hunk": "@@ -0,0 +1,749 @@\n+#!/usr/bin/env python3\n+# -*- coding: utf-8 -*-\n+#\n+# Copyright (C) 2015-2019 Bitergia\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program. If not, see <http://www.gnu.org/licenses/>.\n+#\n+# Authors:\n+#     Animesh Kumar<animuz111@gmail.com>\n+#\n+\n+import datetime\n+import os\n+import unittest.mock\n+import httpretty\n+import pkg_resources\n+import requests\n+\n+pkg_resources.declare_namespace('perceval.backends')\n+\n+from perceval.backend import BackendCommandArgumentParser\n+from perceval.utils import (DEFAULT_DATETIME, DEFAULT_LAST_DATETIME)\n+from perceval.backends.core.pagure import (Pagure,\n+                                           PagureCommand,\n+                                           PagureClient,\n+                                           CATEGORY_ISSUE,\n+                                           MAX_CATEGORY_ITEMS_PER_PAGE)\n+from base import TestCaseBackendArchive\n+\n+PAGURE_API_URL = \"https://pagure.io/api/0\"\n+PAGURE_REPO_URL = PAGURE_API_URL + \"/Project-example\"\n+PAGURE_ISSUES_URL = PAGURE_REPO_URL + \"/issues\"\n+\n+# Repository with issue tracker disabled\n+PAGURE_REPO_URL_DISABLED_URL = PAGURE_API_URL + \"/Project-test-example\"\n+PAGURE_ISSUES_DISABLED_URL = PAGURE_REPO_URL_DISABLED_URL + \"/issues\"\n+\n+PAGURE_NAMESPACE_REPO_URL = PAGURE_API_URL + \"Test-group/Project-namespace-example\"\n+PAGURE_NAMESPACE_ISSUES_URL = PAGURE_NAMESPACE_REPO_URL + \"/issues\"\n+\n+\n+def read_file(filename, mode='r'):\n+    with open(os.path.join(os.path.dirname(os.path.abspath(__file__)), filename), mode) as f:\n+        content = f.read()\n+    return content\n+\n+\n+class TestPagureBackend(unittest.TestCase):\n+    \"\"\" Pagure backend tests \"\"\"\n+\n+    @httpretty.activate\n+    def test_initialization(self):\n+        \"\"\"Test whether attributes are initialized\"\"\"\n+\n+        pagure = Pagure(namespace=None, repository='Project-example', api_token='aaa', tag='test')\n+\n+        # Testing initialization when repository is not within a namespace\n+        self.assertEqual(pagure.repository, 'Project-example')\n+        self.assertIsNone(pagure.namespace)\n+        self.assertEqual(pagure.origin, 'https://pagure.io/Project-example')\n+        self.assertEqual(pagure.tag, 'test')\n+        self.assertEqual(pagure.max_items, MAX_CATEGORY_ITEMS_PER_PAGE)\n+        self.assertEqual(pagure.categories, [CATEGORY_ISSUE])\n+        self.assertTrue(pagure.ssl_verify)\n+\n+        # When tag is empty or None it will be set to the value in origin\n+        pagure = Pagure(namespace=None, repository='Project-example', api_token='aaa', ssl_verify=False)\n+        self.assertEqual(pagure.repository, 'Project-example')\n+        self.assertIsNone(pagure.namespace)\n+        self.assertEqual(pagure.origin, 'https://pagure.io/Project-example')\n+        self.assertEqual(pagure.tag, 'https://pagure.io/Project-example')\n+        self.assertFalse(pagure.ssl_verify)\n+\n+        pagure = Pagure(namespace=None, repository='Project-example', api_token='aaa', tag='')\n+        self.assertEqual(pagure.repository, 'Project-example')\n+        self.assertIsNone(pagure.namespace)\n+        self.assertEqual(pagure.origin, 'https://pagure.io/Project-example')\n+        self.assertEqual(pagure.tag, 'https://pagure.io/Project-example')\n+\n+        # Testing initialization when repository is within a namespace\n+        pagure = Pagure(namespace='Test-group', repository='Project-example-namespace', api_token='', tag='testing')\n+        self.assertEqual(pagure.repository, 'Project-example-namespace')\n+        self.assertEqual(pagure.namespace, 'Test-group')\n+        self.assertEqual(pagure.origin, 'https://pagure.io/Test-group/Project-example-namespace')\n+        self.assertEqual(pagure.tag, 'testing')\n+        self.assertEqual(pagure.max_items, MAX_CATEGORY_ITEMS_PER_PAGE)\n+        self.assertEqual(pagure.categories, [CATEGORY_ISSUE])\n+        self.assertTrue(pagure.ssl_verify)\n+\n+    def test_token_initialization(self):\n+        \"\"\"Test whether token parameter is initialized\"\"\"\n+\n+        # Empty value generates a None API token\n+        pagure = Pagure(repository='Project-test-example', tag='test')\n+        self.assertIsNone(pagure.api_token)\n+\n+        # Initialize the token\n+        pagure = Pagure(repository='Project-test-example', api_token='aaa', tag='test')\n+        self.assertEqual(pagure.api_token, 'aaa')\n+\n+    def test_has_resuming(self):\n+        \"\"\"Test if it returns True when has_resuming is called\"\"\"\n+\n+        self.assertEqual(Pagure.has_resuming(), True)\n+\n+    def test_has_archiving(self):\n+        \"\"\"Test if it returns True when has_archiving is called\"\"\"\n+\n+        self.assertEqual(Pagure.has_archiving(), True)\n+\n+    @httpretty.activate\n+    def test_fetch_issues(self):\n+        \"\"\"Test whether a list of issues is returned\"\"\"\n+\n+        body = read_file('data/pagure/pagure_repo_issue_1')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=body,\n+                               status=200,\n+                               )\n+        pagure = Pagure(repository='Project-example', api_token='aaa')\n+        issues = [issues for issues in pagure.fetch(from_date=None, to_date=None)]\n+\n+        self.assertEqual(len(issues), 1)\n+\n+        issue = issues[0]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['uuid'], '41071b08dd75f34ca92c6d5ecb844e7a3e5939c6')\n+        self.assertEqual(issue['updated_on'], 1583508642.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Project-example')\n+        self.assertEqual(len(issue['data']['comments']), 1)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+\n+    @httpretty.activate\n+    def test_fetch_issues_disabled(self):\n+        \"\"\"Test whether an empty response is returned in case a repository\n+           has disabled issue tracker\n+        \"\"\"\n+        body = read_file('data/pagure/pagure_empty_request')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=body,\n+                               status=404,\n+                               )\n+        pagure = Pagure(repository='Project-test-example')\n+        issues = [issues for issues in pagure.fetch(from_date=None, to_date=None)]\n+        self.assertEqual(len(issues), 0)\n+        self.assertListEqual(issues, [])\n+\n+    @httpretty.activate\n+    def test_search_fields_issues(self):\n+        \"\"\"Test whether the search_fields is properly set\"\"\"\n+\n+        body = read_file('data/pagure/pagure_repo_issue_1')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=body,\n+                               status=200,\n+                               )\n+\n+        pagure = Pagure(repository='Project-example', api_token='aaa')\n+        issues = [issues for issues in pagure.fetch(from_date=None, to_date=None)]\n+\n+        issue = issues[0]\n+        self.assertEqual(pagure.metadata_id(issue['data']), issue['search_fields']['item_id'])\n+        self.assertIsNone(issue['search_fields']['namespace'])\n+        self.assertEqual(issue['search_fields']['repo'], 'Project-example')\n+\n+    @httpretty.activate\n+    def test_fetch_issues_reaction(self):\n+        \"\"\"Test the reactions on an issue comment\"\"\"\n+\n+        issue_2 = read_file('data/pagure/pagure_repo_issue_2')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=issue_2,\n+                               status=200,\n+                               )\n+\n+        pagure = Pagure(repository='Project-example')\n+        issues = [issues for issues in pagure.fetch()]\n+\n+        self.assertEqual(len(issues), 2)\n+\n+        issue = issues[0]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['uuid'], '41071b08dd75f34ca92c6d5ecb844e7a3e5939c6')\n+        self.assertEqual(issue['updated_on'], 1583508642.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Project-example')\n+        self.assertEqual(len(issue['data']['comments']), 1)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk08')\n+        self.assertEqual(len(issue['data']['comments'][0]['reactions']), 0)\n+\n+        issue = issues[1]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['uuid'], '7dd3642664c8a7e475814b9037277df775657850')\n+        self.assertEqual(issue['updated_on'], 1583558174.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk0806')\n+        self.assertEqual(len(issue['data']['comments']), 2)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+        self.assertEqual(len(issue['data']['comments'][0]['reactions']), 0)\n+        self.assertEqual(len(issue['data']['comments'][1]['reactions']), 1)\n+        self.assertListEqual(issue['data']['comments'][1]['reactions']['Thumbs up'], ['animeshk0806'])\n+\n+    @httpretty.activate\n+    def test_fetch_more_issues(self):\n+        \"\"\"Test when return two issues\"\"\"\n+\n+        issue_2 = read_file('data/pagure/pagure_repo_issue_2')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=issue_2,\n+                               status=200,\n+                               )\n+\n+        pagure = Pagure(repository='Project-example')\n+        issues = [issues for issues in pagure.fetch()]\n+\n+        self.assertEqual(len(issues), 2)\n+\n+        issue = issues[0]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['uuid'], '41071b08dd75f34ca92c6d5ecb844e7a3e5939c6')\n+        self.assertEqual(issue['updated_on'], 1583508642.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Project-example')\n+        self.assertEqual(len(issue['data']['comments']), 1)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk08')\n+\n+        issue = issues[1]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['uuid'], '7dd3642664c8a7e475814b9037277df775657850')\n+        self.assertEqual(issue['updated_on'], 1583558174.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk0806')\n+        self.assertEqual(len(issue['data']['comments']), 2)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+\n+    @httpretty.activate\n+    def test_fetch_issues_until_date(self):\n+        \"\"\"Test when return issue till a particular date\"\"\"\n+\n+        issue_1 = read_file('data/pagure/pagure_repo_issue_1')\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=issue_1,\n+                               status=200,\n+                               )\n+\n+        to_date = datetime.datetime(2020, 3, 7)\n+        pagure = Pagure(repository='Project-example')\n+        issues = [issues for issues in pagure.fetch(to_date=to_date)]\n+\n+        self.assertEqual(len(issues), 1)\n+\n+        issue = issues[0]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['uuid'], '41071b08dd75f34ca92c6d5ecb844e7a3e5939c6')\n+        self.assertEqual(issue['updated_on'], 1583508642.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk08')\n+        self.assertEqual(len(issue['data']['comments']), 1)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+\n+    @httpretty.activate\n+    def test_fetch_from_date(self):\n+        \"\"\"Test when return from date\"\"\"\n+\n+        body = read_file('data/pagure/pagure_repo_issue_from_2020_03_07')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=body,\n+                               status=200,\n+                               )\n+\n+        from_date = datetime.datetime(2020, 3, 8)\n+        pagure = Pagure(repository='Project-example')\n+        issues = [issues for issues in pagure.fetch(from_date=from_date)]\n+\n+        self.assertEqual(len(issues), 1)\n+        issue = issues[0]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['uuid'], '7dd3642664c8a7e475814b9037277df775657850')\n+        self.assertEqual(issue['updated_on'], 1583558174.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk0806')\n+        self.assertEqual(len(issue['data']['comments']), 2)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+\n+    @httpretty.activate\n+    def test_fetch_issues_namespace(self):\n+        \"\"\"Test issues fetch from a repository within a namespace\"\"\"\n+\n+        issue_1 = read_file('data/pagure/pagure_namespace_issue_2')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_NAMESPACE_ISSUES_URL,\n+                               body=issue_1, status=200,\n+                               )\n+\n+        pagure = Pagure(namespace='Test-group', repository='Project-namespace-example')\n+        issues = [issues for issues in pagure.fetch()]\n+\n+        self.assertEqual(len(issues), 2)\n+\n+        issue = issues[0]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Test-group/Project-namespace-example')\n+        self.assertEqual(issue['uuid'], 'bdf90e94bf3b17ed2f75f5e5187e21a62512ca5a')\n+        self.assertEqual(issue['updated_on'], 1583509042.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Test-group/Project-namespace-example')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk08')\n+        self.assertEqual(len(issue['data']['comments']), 1)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+\n+        issue = issues[1]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Test-group/Project-namespace-example')\n+        self.assertEqual(issue['uuid'], 'eec4d7bf5c3ca405e39f39a8c6faf616fd4fa425')\n+        self.assertEqual(issue['updated_on'], 1583562831.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Test-group/Project-namespace-example')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk0806')\n+        self.assertEqual(len(issue['data']['comments']), 2)\n+        self.assertEqual(issue['data']['comments'][1]['user']['name'], 'animeshk08')\n+\n+    @httpretty.activate\n+    def test_fetch_issues_namespace_reaction(self):\n+        \"\"\"Test reactions on a comment from an issue fetch from a repository within a namespace\"\"\"\n+\n+        issue_1 = read_file('data/pagure/pagure_namespace_issue_2')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_NAMESPACE_ISSUES_URL,\n+                               body=issue_1, status=200,\n+                               )\n+\n+        pagure = Pagure(namespace='Test-group', repository='Project-namespace-example')\n+        issues = [issues for issues in pagure.fetch()]\n+\n+        self.assertEqual(len(issues), 2)\n+\n+        issue = issues[0]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Test-group/Project-namespace-example')\n+        self.assertEqual(issue['uuid'], 'bdf90e94bf3b17ed2f75f5e5187e21a62512ca5a')\n+        self.assertEqual(issue['updated_on'], 1583509042.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Test-group/Project-namespace-example')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk08')\n+        self.assertEqual(len(issue['data']['comments']), 1)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+        self.assertEqual(len(issue['data']['comments'][0]['reactions']), 0)\n+\n+        issue = issues[1]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Test-group/Project-namespace-example')\n+        self.assertEqual(issue['uuid'], 'eec4d7bf5c3ca405e39f39a8c6faf616fd4fa425')\n+        self.assertEqual(issue['updated_on'], 1583562831.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Test-group/Project-namespace-example')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk0806')\n+        self.assertEqual(len(issue['data']['comments']), 2)\n+        self.assertEqual(issue['data']['comments'][1]['user']['name'], 'animeshk08')\n+        self.assertEqual(len(issue['data']['comments'][1]['reactions']), 0)\n+        self.assertEqual(len(issue['data']['comments'][0]['reactions']), 1)\n+        self.assertListEqual(issue['data']['comments'][0]['reactions']['Heart'], ['animeshk0806'])\n+\n+    @httpretty.activate\n+    def test_fetch_empty(self):\n+        \"\"\"Test when return empty\"\"\"\n+\n+        body = \"\"\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=body, status=200,\n+                               )\n+        from_date = datetime.datetime(2016, 1, 1)\n+        pagure = Pagure(repository='Project-example', api_token='aaa')\n+\n+        issues = [issues for issues in pagure.fetch(from_date=from_date)]\n+\n+        self.assertEqual(len(issues), 0)\n+\n+\n+class TestPagureBackendArchive(TestCaseBackendArchive):\n+    \"\"\"Pagure backend tests using an archive\"\"\"\n+\n+    def setUp(self):\n+        super().setUp()\n+        self.backend_write_archive = Pagure(repository='Project-example', api_token='aaa', archive=self.archive)\n+        self.backend_read_archive = Pagure(repository='Project-example', api_token='aaa', archive=self.archive)\n+\n+    @httpretty.activate\n+    def test_fetch_issues_from_archive(self):\n+        \"\"\"Test whether a list of issues is returned from archive\"\"\"\n+\n+        issue_2 = read_file('data/pagure/pagure_repo_issue_1')\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=issue_2,\n+                               status=200,\n+                               )\n+\n+        self._test_fetch_from_archive(from_date=None)\n+\n+    @httpretty.activate\n+    def test_fetch_from_date_from_archive(self):\n+        \"\"\"Test whether a list of issues is returned from archive after a given date\"\"\"\n+\n+        body = read_file('data/pagure/pagure_repo_issue_from_2020_03_07')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=body,\n+                               status=200,\n+                               )\n+        from_date = datetime.datetime(2020, 3, 7)\n+        self._test_fetch_from_archive(from_date=from_date)\n+\n+    @httpretty.activate\n+    def test_fetch_from_empty_archive(self):\n+        \"\"\"Test whether no issues are returned when the archive is empty\"\"\"\n+\n+        body = \"\"\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=body, status=200,\n+                               )\n+\n+        self._test_fetch_from_archive()\n+\n+\n+class TestPagureClient(unittest.TestCase):\n+    \"\"\"Pagure API client tests\"\"\"\n+\n+    @httpretty.activate\n+    def test_init(self):\n+        \"\"\"Test initialisation of client\"\"\"",
        "path": "tests/test_pagure.py",
        "position": null,
        "original_position": 464,
        "commit_id": "70a89aa1dccc5152ed4a52cb4c5e4e327ba3595a",
        "original_commit_id": "bea6bc459c6829df8be725bc163f944501d55107",
        "user": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "Small typo: initialization?",
        "created_at": "2020-03-07T11:46:21Z",
        "updated_at": "2020-03-08T18:21:42Z",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r389249154",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621",
        "author_association": "MEMBER",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389249154"
          },
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r389249154"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389249154/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "user_data": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false,
          "name": "valerio",
          "company": "@Bitergia ",
          "blog": "http://valeriocos.github.io/",
          "location": "Madrid, Spain",
          "email": "valcos@bitergia.com",
          "hireable": true,
          "bio": null,
          "public_repos": 57,
          "public_gists": 28,
          "followers": 34,
          "following": 5,
          "created_at": "2014-01-27T14:30:30Z",
          "updated_at": "2020-03-17T10:02:44Z",
          "organizations": [
            {
              "login": "Bitergia",
              "id": 1918070,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=",
              "url": "https://api.github.com/orgs/Bitergia",
              "repos_url": "https://api.github.com/orgs/Bitergia/repos",
              "events_url": "https://api.github.com/orgs/Bitergia/events",
              "hooks_url": "https://api.github.com/orgs/Bitergia/hooks",
              "issues_url": "https://api.github.com/orgs/Bitergia/issues",
              "members_url": "https://api.github.com/orgs/Bitergia/members{/member}",
              "public_members_url": "https://api.github.com/orgs/Bitergia/public_members{/member}",
              "avatar_url": "https://avatars3.githubusercontent.com/u/1918070?v=4",
              "description": null
            },
            {
              "login": "grimoirelab",
              "id": 16151805,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1",
              "url": "https://api.github.com/orgs/grimoirelab",
              "repos_url": "https://api.github.com/orgs/grimoirelab/repos",
              "events_url": "https://api.github.com/orgs/grimoirelab/events",
              "hooks_url": "https://api.github.com/orgs/grimoirelab/hooks",
              "issues_url": "https://api.github.com/orgs/grimoirelab/issues",
              "members_url": "https://api.github.com/orgs/grimoirelab/members{/member}",
              "public_members_url": "https://api.github.com/orgs/grimoirelab/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/16151805?v=4",
              "description": ""
            },
            {
              "login": "chaoss",
              "id": 29740296,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
              "url": "https://api.github.com/orgs/chaoss",
              "repos_url": "https://api.github.com/orgs/chaoss/repos",
              "events_url": "https://api.github.com/orgs/chaoss/events",
              "hooks_url": "https://api.github.com/orgs/chaoss/hooks",
              "issues_url": "https://api.github.com/orgs/chaoss/issues",
              "members_url": "https://api.github.com/orgs/chaoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/chaoss/public_members{/member}",
              "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
              "description": ""
            }
          ]
        },
        "reactions_data": []
      },
      {
        "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389249192",
        "pull_request_review_id": 370737508,
        "id": 389249192,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0OTE5Mg==",
        "diff_hunk": "@@ -0,0 +1,749 @@\n+#!/usr/bin/env python3\n+# -*- coding: utf-8 -*-\n+#\n+# Copyright (C) 2015-2019 Bitergia\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program. If not, see <http://www.gnu.org/licenses/>.\n+#\n+# Authors:\n+#     Animesh Kumar<animuz111@gmail.com>\n+#\n+\n+import datetime\n+import os\n+import unittest.mock\n+import httpretty\n+import pkg_resources\n+import requests\n+\n+pkg_resources.declare_namespace('perceval.backends')\n+\n+from perceval.backend import BackendCommandArgumentParser\n+from perceval.utils import (DEFAULT_DATETIME, DEFAULT_LAST_DATETIME)\n+from perceval.backends.core.pagure import (Pagure,\n+                                           PagureCommand,\n+                                           PagureClient,\n+                                           CATEGORY_ISSUE,\n+                                           MAX_CATEGORY_ITEMS_PER_PAGE)\n+from base import TestCaseBackendArchive\n+\n+PAGURE_API_URL = \"https://pagure.io/api/0\"\n+PAGURE_REPO_URL = PAGURE_API_URL + \"/Project-example\"\n+PAGURE_ISSUES_URL = PAGURE_REPO_URL + \"/issues\"\n+\n+# Repository with issue tracker disabled\n+PAGURE_REPO_URL_DISABLED_URL = PAGURE_API_URL + \"/Project-test-example\"\n+PAGURE_ISSUES_DISABLED_URL = PAGURE_REPO_URL_DISABLED_URL + \"/issues\"\n+\n+PAGURE_NAMESPACE_REPO_URL = PAGURE_API_URL + \"Test-group/Project-namespace-example\"\n+PAGURE_NAMESPACE_ISSUES_URL = PAGURE_NAMESPACE_REPO_URL + \"/issues\"\n+\n+\n+def read_file(filename, mode='r'):\n+    with open(os.path.join(os.path.dirname(os.path.abspath(__file__)), filename), mode) as f:\n+        content = f.read()\n+    return content\n+\n+\n+class TestPagureBackend(unittest.TestCase):\n+    \"\"\" Pagure backend tests \"\"\"\n+\n+    @httpretty.activate\n+    def test_initialization(self):\n+        \"\"\"Test whether attributes are initialized\"\"\"\n+\n+        pagure = Pagure(namespace=None, repository='Project-example', api_token='aaa', tag='test')\n+\n+        # Testing initialization when repository is not within a namespace\n+        self.assertEqual(pagure.repository, 'Project-example')\n+        self.assertIsNone(pagure.namespace)\n+        self.assertEqual(pagure.origin, 'https://pagure.io/Project-example')\n+        self.assertEqual(pagure.tag, 'test')\n+        self.assertEqual(pagure.max_items, MAX_CATEGORY_ITEMS_PER_PAGE)\n+        self.assertEqual(pagure.categories, [CATEGORY_ISSUE])\n+        self.assertTrue(pagure.ssl_verify)\n+\n+        # When tag is empty or None it will be set to the value in origin\n+        pagure = Pagure(namespace=None, repository='Project-example', api_token='aaa', ssl_verify=False)\n+        self.assertEqual(pagure.repository, 'Project-example')\n+        self.assertIsNone(pagure.namespace)\n+        self.assertEqual(pagure.origin, 'https://pagure.io/Project-example')\n+        self.assertEqual(pagure.tag, 'https://pagure.io/Project-example')\n+        self.assertFalse(pagure.ssl_verify)\n+\n+        pagure = Pagure(namespace=None, repository='Project-example', api_token='aaa', tag='')\n+        self.assertEqual(pagure.repository, 'Project-example')\n+        self.assertIsNone(pagure.namespace)\n+        self.assertEqual(pagure.origin, 'https://pagure.io/Project-example')\n+        self.assertEqual(pagure.tag, 'https://pagure.io/Project-example')\n+\n+        # Testing initialization when repository is within a namespace\n+        pagure = Pagure(namespace='Test-group', repository='Project-example-namespace', api_token='', tag='testing')\n+        self.assertEqual(pagure.repository, 'Project-example-namespace')\n+        self.assertEqual(pagure.namespace, 'Test-group')\n+        self.assertEqual(pagure.origin, 'https://pagure.io/Test-group/Project-example-namespace')\n+        self.assertEqual(pagure.tag, 'testing')\n+        self.assertEqual(pagure.max_items, MAX_CATEGORY_ITEMS_PER_PAGE)\n+        self.assertEqual(pagure.categories, [CATEGORY_ISSUE])\n+        self.assertTrue(pagure.ssl_verify)\n+\n+    def test_token_initialization(self):\n+        \"\"\"Test whether token parameter is initialized\"\"\"\n+\n+        # Empty value generates a None API token\n+        pagure = Pagure(repository='Project-test-example', tag='test')\n+        self.assertIsNone(pagure.api_token)\n+\n+        # Initialize the token\n+        pagure = Pagure(repository='Project-test-example', api_token='aaa', tag='test')\n+        self.assertEqual(pagure.api_token, 'aaa')\n+\n+    def test_has_resuming(self):\n+        \"\"\"Test if it returns True when has_resuming is called\"\"\"\n+\n+        self.assertEqual(Pagure.has_resuming(), True)\n+\n+    def test_has_archiving(self):\n+        \"\"\"Test if it returns True when has_archiving is called\"\"\"\n+\n+        self.assertEqual(Pagure.has_archiving(), True)\n+\n+    @httpretty.activate\n+    def test_fetch_issues(self):\n+        \"\"\"Test whether a list of issues is returned\"\"\"\n+\n+        body = read_file('data/pagure/pagure_repo_issue_1')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=body,\n+                               status=200,\n+                               )\n+        pagure = Pagure(repository='Project-example', api_token='aaa')\n+        issues = [issues for issues in pagure.fetch(from_date=None, to_date=None)]\n+\n+        self.assertEqual(len(issues), 1)\n+\n+        issue = issues[0]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['uuid'], '41071b08dd75f34ca92c6d5ecb844e7a3e5939c6')\n+        self.assertEqual(issue['updated_on'], 1583508642.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Project-example')\n+        self.assertEqual(len(issue['data']['comments']), 1)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+\n+    @httpretty.activate\n+    def test_fetch_issues_disabled(self):\n+        \"\"\"Test whether an empty response is returned in case a repository\n+           has disabled issue tracker\n+        \"\"\"\n+        body = read_file('data/pagure/pagure_empty_request')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=body,\n+                               status=404,\n+                               )\n+        pagure = Pagure(repository='Project-test-example')\n+        issues = [issues for issues in pagure.fetch(from_date=None, to_date=None)]\n+        self.assertEqual(len(issues), 0)\n+        self.assertListEqual(issues, [])\n+\n+    @httpretty.activate\n+    def test_search_fields_issues(self):\n+        \"\"\"Test whether the search_fields is properly set\"\"\"\n+\n+        body = read_file('data/pagure/pagure_repo_issue_1')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=body,\n+                               status=200,\n+                               )\n+\n+        pagure = Pagure(repository='Project-example', api_token='aaa')\n+        issues = [issues for issues in pagure.fetch(from_date=None, to_date=None)]\n+\n+        issue = issues[0]\n+        self.assertEqual(pagure.metadata_id(issue['data']), issue['search_fields']['item_id'])\n+        self.assertIsNone(issue['search_fields']['namespace'])\n+        self.assertEqual(issue['search_fields']['repo'], 'Project-example')\n+\n+    @httpretty.activate\n+    def test_fetch_issues_reaction(self):\n+        \"\"\"Test the reactions on an issue comment\"\"\"\n+\n+        issue_2 = read_file('data/pagure/pagure_repo_issue_2')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=issue_2,\n+                               status=200,\n+                               )\n+\n+        pagure = Pagure(repository='Project-example')\n+        issues = [issues for issues in pagure.fetch()]\n+\n+        self.assertEqual(len(issues), 2)\n+\n+        issue = issues[0]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['uuid'], '41071b08dd75f34ca92c6d5ecb844e7a3e5939c6')\n+        self.assertEqual(issue['updated_on'], 1583508642.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Project-example')\n+        self.assertEqual(len(issue['data']['comments']), 1)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk08')\n+        self.assertEqual(len(issue['data']['comments'][0]['reactions']), 0)\n+\n+        issue = issues[1]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['uuid'], '7dd3642664c8a7e475814b9037277df775657850')\n+        self.assertEqual(issue['updated_on'], 1583558174.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk0806')\n+        self.assertEqual(len(issue['data']['comments']), 2)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+        self.assertEqual(len(issue['data']['comments'][0]['reactions']), 0)\n+        self.assertEqual(len(issue['data']['comments'][1]['reactions']), 1)\n+        self.assertListEqual(issue['data']['comments'][1]['reactions']['Thumbs up'], ['animeshk0806'])\n+\n+    @httpretty.activate\n+    def test_fetch_more_issues(self):\n+        \"\"\"Test when return two issues\"\"\"\n+\n+        issue_2 = read_file('data/pagure/pagure_repo_issue_2')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=issue_2,\n+                               status=200,\n+                               )\n+\n+        pagure = Pagure(repository='Project-example')\n+        issues = [issues for issues in pagure.fetch()]\n+\n+        self.assertEqual(len(issues), 2)\n+\n+        issue = issues[0]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['uuid'], '41071b08dd75f34ca92c6d5ecb844e7a3e5939c6')\n+        self.assertEqual(issue['updated_on'], 1583508642.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Project-example')\n+        self.assertEqual(len(issue['data']['comments']), 1)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk08')\n+\n+        issue = issues[1]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['uuid'], '7dd3642664c8a7e475814b9037277df775657850')\n+        self.assertEqual(issue['updated_on'], 1583558174.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk0806')\n+        self.assertEqual(len(issue['data']['comments']), 2)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+\n+    @httpretty.activate\n+    def test_fetch_issues_until_date(self):\n+        \"\"\"Test when return issue till a particular date\"\"\"\n+\n+        issue_1 = read_file('data/pagure/pagure_repo_issue_1')\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=issue_1,\n+                               status=200,\n+                               )\n+\n+        to_date = datetime.datetime(2020, 3, 7)\n+        pagure = Pagure(repository='Project-example')\n+        issues = [issues for issues in pagure.fetch(to_date=to_date)]\n+\n+        self.assertEqual(len(issues), 1)\n+\n+        issue = issues[0]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['uuid'], '41071b08dd75f34ca92c6d5ecb844e7a3e5939c6')\n+        self.assertEqual(issue['updated_on'], 1583508642.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk08')\n+        self.assertEqual(len(issue['data']['comments']), 1)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+\n+    @httpretty.activate\n+    def test_fetch_from_date(self):\n+        \"\"\"Test when return from date\"\"\"\n+\n+        body = read_file('data/pagure/pagure_repo_issue_from_2020_03_07')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=body,\n+                               status=200,\n+                               )\n+\n+        from_date = datetime.datetime(2020, 3, 8)\n+        pagure = Pagure(repository='Project-example')\n+        issues = [issues for issues in pagure.fetch(from_date=from_date)]\n+\n+        self.assertEqual(len(issues), 1)\n+        issue = issues[0]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['uuid'], '7dd3642664c8a7e475814b9037277df775657850')\n+        self.assertEqual(issue['updated_on'], 1583558174.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk0806')\n+        self.assertEqual(len(issue['data']['comments']), 2)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+\n+    @httpretty.activate\n+    def test_fetch_issues_namespace(self):\n+        \"\"\"Test issues fetch from a repository within a namespace\"\"\"\n+\n+        issue_1 = read_file('data/pagure/pagure_namespace_issue_2')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_NAMESPACE_ISSUES_URL,\n+                               body=issue_1, status=200,\n+                               )\n+\n+        pagure = Pagure(namespace='Test-group', repository='Project-namespace-example')\n+        issues = [issues for issues in pagure.fetch()]\n+\n+        self.assertEqual(len(issues), 2)\n+\n+        issue = issues[0]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Test-group/Project-namespace-example')\n+        self.assertEqual(issue['uuid'], 'bdf90e94bf3b17ed2f75f5e5187e21a62512ca5a')\n+        self.assertEqual(issue['updated_on'], 1583509042.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Test-group/Project-namespace-example')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk08')\n+        self.assertEqual(len(issue['data']['comments']), 1)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+\n+        issue = issues[1]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Test-group/Project-namespace-example')\n+        self.assertEqual(issue['uuid'], 'eec4d7bf5c3ca405e39f39a8c6faf616fd4fa425')\n+        self.assertEqual(issue['updated_on'], 1583562831.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Test-group/Project-namespace-example')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk0806')\n+        self.assertEqual(len(issue['data']['comments']), 2)\n+        self.assertEqual(issue['data']['comments'][1]['user']['name'], 'animeshk08')\n+\n+    @httpretty.activate\n+    def test_fetch_issues_namespace_reaction(self):\n+        \"\"\"Test reactions on a comment from an issue fetch from a repository within a namespace\"\"\"\n+\n+        issue_1 = read_file('data/pagure/pagure_namespace_issue_2')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_NAMESPACE_ISSUES_URL,\n+                               body=issue_1, status=200,\n+                               )\n+\n+        pagure = Pagure(namespace='Test-group', repository='Project-namespace-example')\n+        issues = [issues for issues in pagure.fetch()]\n+\n+        self.assertEqual(len(issues), 2)\n+\n+        issue = issues[0]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Test-group/Project-namespace-example')\n+        self.assertEqual(issue['uuid'], 'bdf90e94bf3b17ed2f75f5e5187e21a62512ca5a')\n+        self.assertEqual(issue['updated_on'], 1583509042.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Test-group/Project-namespace-example')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk08')\n+        self.assertEqual(len(issue['data']['comments']), 1)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+        self.assertEqual(len(issue['data']['comments'][0]['reactions']), 0)\n+\n+        issue = issues[1]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Test-group/Project-namespace-example')\n+        self.assertEqual(issue['uuid'], 'eec4d7bf5c3ca405e39f39a8c6faf616fd4fa425')\n+        self.assertEqual(issue['updated_on'], 1583562831.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Test-group/Project-namespace-example')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk0806')\n+        self.assertEqual(len(issue['data']['comments']), 2)\n+        self.assertEqual(issue['data']['comments'][1]['user']['name'], 'animeshk08')\n+        self.assertEqual(len(issue['data']['comments'][1]['reactions']), 0)\n+        self.assertEqual(len(issue['data']['comments'][0]['reactions']), 1)\n+        self.assertListEqual(issue['data']['comments'][0]['reactions']['Heart'], ['animeshk0806'])\n+\n+    @httpretty.activate\n+    def test_fetch_empty(self):\n+        \"\"\"Test when return empty\"\"\"\n+\n+        body = \"\"\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=body, status=200,\n+                               )\n+        from_date = datetime.datetime(2016, 1, 1)\n+        pagure = Pagure(repository='Project-example', api_token='aaa')\n+\n+        issues = [issues for issues in pagure.fetch(from_date=from_date)]\n+\n+        self.assertEqual(len(issues), 0)\n+\n+\n+class TestPagureBackendArchive(TestCaseBackendArchive):\n+    \"\"\"Pagure backend tests using an archive\"\"\"\n+\n+    def setUp(self):\n+        super().setUp()\n+        self.backend_write_archive = Pagure(repository='Project-example', api_token='aaa', archive=self.archive)\n+        self.backend_read_archive = Pagure(repository='Project-example', api_token='aaa', archive=self.archive)\n+\n+    @httpretty.activate\n+    def test_fetch_issues_from_archive(self):\n+        \"\"\"Test whether a list of issues is returned from archive\"\"\"\n+\n+        issue_2 = read_file('data/pagure/pagure_repo_issue_1')\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=issue_2,\n+                               status=200,\n+                               )\n+\n+        self._test_fetch_from_archive(from_date=None)\n+\n+    @httpretty.activate\n+    def test_fetch_from_date_from_archive(self):\n+        \"\"\"Test whether a list of issues is returned from archive after a given date\"\"\"\n+\n+        body = read_file('data/pagure/pagure_repo_issue_from_2020_03_07')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=body,\n+                               status=200,\n+                               )\n+        from_date = datetime.datetime(2020, 3, 7)\n+        self._test_fetch_from_archive(from_date=from_date)\n+\n+    @httpretty.activate\n+    def test_fetch_from_empty_archive(self):\n+        \"\"\"Test whether no issues are returned when the archive is empty\"\"\"\n+\n+        body = \"\"\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=body, status=200,\n+                               )\n+\n+        self._test_fetch_from_archive()\n+\n+\n+class TestPagureClient(unittest.TestCase):\n+    \"\"\"Pagure API client tests\"\"\"\n+\n+    @httpretty.activate\n+    def test_init(self):\n+        \"\"\"Test initialisation of client\"\"\"\n+\n+        client = PagureClient(namespace=None, repository=\"Project-example\", token=\"aaa\")\n+\n+        self.assertIsNone(client.namespace)\n+        self.assertEqual(client.repository, \"Project-example\")\n+        self.assertEqual(client.sleep_time, PagureClient.DEFAULT_SLEEP_TIME)\n+        self.assertEqual(client.max_retries, PagureClient.MAX_RETRIES)\n+        self.assertEqual(client.base_url, PAGURE_API_URL)\n+        self.assertTrue(client.ssl_verify)\n+\n+        client = PagureClient(None, \"Project-test-example\", token='aaa',\n+                              sleep_time=20, max_retries=2, max_items=1,\n+                              archive=None, from_archive=False)\n+        self.assertIsNone(client.namespace)\n+        self.assertEqual(client.repository, \"Project-test-example\")\n+        self.assertEqual(client.token, 'aaa')\n+        self.assertEqual(client.sleep_time, 20)\n+        self.assertEqual(client.max_retries, 2)\n+        self.assertEqual(client.max_items, 1)\n+        self.assertIsNone(client.archive)\n+        self.assertFalse(client.from_archive)\n+\n+        client = PagureClient(None, repository='Project-test-example', token=None)\n+        self.assertIsNone(client.token)\n+\n+        # When the repository is within a namespace\n+        client = PagureClient(namespace='Test-group', repository=\"Project-namespace-example\", token=\"aaa\")\n+\n+        self.assertEqual(client.namespace, 'Test-group')\n+        self.assertEqual(client.repository, \"Project-namespace-example\")\n+        self.assertEqual(client.sleep_time, PagureClient.DEFAULT_SLEEP_TIME)\n+        self.assertEqual(client.max_retries, PagureClient.MAX_RETRIES)\n+        self.assertEqual(client.base_url, PAGURE_API_URL)\n+        self.assertTrue(client.ssl_verify)\n+\n+    @httpretty.activate\n+    def test_issues(self):\n+        \"\"\"Test issues API call\"\"\"\n+\n+        issues = read_file('data/pagure/pagure_repo_issue_1')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=issues, status=200,\n+                               )\n+\n+        client = PagureClient(namespace=None, repository='Project-example', token='aaa')\n+        raw_issues = [issues for issues in client.issues()]\n+        self.assertEqual(raw_issues[0], issues)\n+\n+        # Check requests\n+        expected = {\n+            'status': ['all'],\n+            'per_page': ['100'],\n+            'order': ['asc']\n+        }\n+\n+        self.assertDictEqual(httpretty.last_request().querystring, expected)\n+        self.assertEqual(httpretty.last_request().headers[\"Authorization\"], 'token aaa')  # check\n+\n+    @httpretty.activate\n+    def test_namespace_issues(self):\n+        \"\"\"Test fetching issues from a repository within a namespace\"\"\"\n+\n+        issue = read_file('data/pagure/pagure_namespace_issue_2')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_NAMESPACE_ISSUES_URL,\n+                               body=issue, status=200)\n+\n+        client = PagureClient(namespace='Test-group', repository='Project-namespace-example', token=None)\n+\n+        raw_issues = [issues for issues in client.issues()]\n+        self.assertEqual(raw_issues[0], issue)\n+\n+        # Check requests\n+        expected = {\n+            'status': ['all'],\n+            'per_page': ['100'],\n+            'order': ['asc']\n+        }\n+\n+        self.assertDictEqual(httpretty.last_request().querystring, expected)\n+        self.assertIsNone(httpretty.last_request().headers[\"Authorization\"])\n+\n+    @httpretty.activate\n+    def test_get_from_date_issues(self):\n+        \"\"\"Test issues from date API call\"\"\"\n+\n+        issues = read_file('data/pagure/pagure_repo_issue_from_2020_03_07')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=issues,\n+                               status=200,\n+                               )\n+\n+        from_date = datetime.datetime(2020, 3, 7)\n+        client = PagureClient(namespace=None, repository='Project-example', token='aaa')\n+\n+        raw_issues = [issues for issues in client.issues(from_date=from_date)]\n+        self.assertEqual(raw_issues[0], issues)\n+\n+        # Check requests\n+        expected = {\n+            'status': ['all'],\n+            'per_page': ['100'],\n+            'order': ['asc'],\n+            'since': ['2020-03-07 00:00:00']\n+        }\n+        self.assertDictEqual(httpretty.last_request().querystring, expected)\n+        self.assertEqual(httpretty.last_request().headers[\"Authorization\"], \"token aaa\")\n+\n+    @httpretty.activate\n+    def test_get_empty_issues(self):\n+        \"\"\" Test when issue is empty API call \"\"\"\n+\n+        issue = read_file('data/pagure/pagure_empty_request')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=issue, status=200,\n+                               )\n+\n+        client = PagureClient(namespace=None, repository=\"Project-example\", token=\"aaa\")\n+\n+        raw_issues = [issues for issues in client.issues()]\n+        self.assertEqual(raw_issues[0], issue)\n+\n+        # Check requests\n+        expected = {\n+            'status': ['all'],\n+            'per_page': ['100'],\n+            'order': ['asc']\n+        }\n+\n+        self.assertDictEqual(httpretty.last_request().querystring, expected)\n+        self.assertEqual(httpretty.last_request().headers[\"Authorization\"], \"token aaa\")\n+\n+    @httpretty.activate\n+    def test_http_wrong_status(self):\n+        \"\"\"Test if a error is raised when the http status was not 200\"\"\"",
        "path": "tests/test_pagure.py",
        "position": null,
        "original_position": 606,
        "commit_id": "70a89aa1dccc5152ed4a52cb4c5e4e327ba3595a",
        "original_commit_id": "bea6bc459c6829df8be725bc163f944501d55107",
        "user": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "small typo: `an error`",
        "created_at": "2020-03-07T11:47:01Z",
        "updated_at": "2020-03-08T18:21:42Z",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r389249192",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621",
        "author_association": "MEMBER",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389249192"
          },
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r389249192"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389249192/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "user_data": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false,
          "name": "valerio",
          "company": "@Bitergia ",
          "blog": "http://valeriocos.github.io/",
          "location": "Madrid, Spain",
          "email": "valcos@bitergia.com",
          "hireable": true,
          "bio": null,
          "public_repos": 57,
          "public_gists": 28,
          "followers": 34,
          "following": 5,
          "created_at": "2014-01-27T14:30:30Z",
          "updated_at": "2020-03-17T10:02:44Z",
          "organizations": [
            {
              "login": "Bitergia",
              "id": 1918070,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=",
              "url": "https://api.github.com/orgs/Bitergia",
              "repos_url": "https://api.github.com/orgs/Bitergia/repos",
              "events_url": "https://api.github.com/orgs/Bitergia/events",
              "hooks_url": "https://api.github.com/orgs/Bitergia/hooks",
              "issues_url": "https://api.github.com/orgs/Bitergia/issues",
              "members_url": "https://api.github.com/orgs/Bitergia/members{/member}",
              "public_members_url": "https://api.github.com/orgs/Bitergia/public_members{/member}",
              "avatar_url": "https://avatars3.githubusercontent.com/u/1918070?v=4",
              "description": null
            },
            {
              "login": "grimoirelab",
              "id": 16151805,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1",
              "url": "https://api.github.com/orgs/grimoirelab",
              "repos_url": "https://api.github.com/orgs/grimoirelab/repos",
              "events_url": "https://api.github.com/orgs/grimoirelab/events",
              "hooks_url": "https://api.github.com/orgs/grimoirelab/hooks",
              "issues_url": "https://api.github.com/orgs/grimoirelab/issues",
              "members_url": "https://api.github.com/orgs/grimoirelab/members{/member}",
              "public_members_url": "https://api.github.com/orgs/grimoirelab/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/16151805?v=4",
              "description": ""
            },
            {
              "login": "chaoss",
              "id": 29740296,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
              "url": "https://api.github.com/orgs/chaoss",
              "repos_url": "https://api.github.com/orgs/chaoss/repos",
              "events_url": "https://api.github.com/orgs/chaoss/events",
              "hooks_url": "https://api.github.com/orgs/chaoss/hooks",
              "issues_url": "https://api.github.com/orgs/chaoss/issues",
              "members_url": "https://api.github.com/orgs/chaoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/chaoss/public_members{/member}",
              "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
              "description": ""
            }
          ]
        },
        "reactions_data": []
      },
      {
        "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389249202",
        "pull_request_review_id": 370737508,
        "id": 389249202,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0OTIwMg==",
        "diff_hunk": "@@ -0,0 +1,749 @@\n+#!/usr/bin/env python3\n+# -*- coding: utf-8 -*-\n+#\n+# Copyright (C) 2015-2019 Bitergia\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program. If not, see <http://www.gnu.org/licenses/>.\n+#\n+# Authors:\n+#     Animesh Kumar<animuz111@gmail.com>\n+#\n+\n+import datetime\n+import os\n+import unittest.mock\n+import httpretty\n+import pkg_resources\n+import requests\n+\n+pkg_resources.declare_namespace('perceval.backends')\n+\n+from perceval.backend import BackendCommandArgumentParser\n+from perceval.utils import (DEFAULT_DATETIME, DEFAULT_LAST_DATETIME)\n+from perceval.backends.core.pagure import (Pagure,\n+                                           PagureCommand,\n+                                           PagureClient,\n+                                           CATEGORY_ISSUE,\n+                                           MAX_CATEGORY_ITEMS_PER_PAGE)\n+from base import TestCaseBackendArchive\n+\n+PAGURE_API_URL = \"https://pagure.io/api/0\"\n+PAGURE_REPO_URL = PAGURE_API_URL + \"/Project-example\"\n+PAGURE_ISSUES_URL = PAGURE_REPO_URL + \"/issues\"\n+\n+# Repository with issue tracker disabled\n+PAGURE_REPO_URL_DISABLED_URL = PAGURE_API_URL + \"/Project-test-example\"\n+PAGURE_ISSUES_DISABLED_URL = PAGURE_REPO_URL_DISABLED_URL + \"/issues\"\n+\n+PAGURE_NAMESPACE_REPO_URL = PAGURE_API_URL + \"Test-group/Project-namespace-example\"\n+PAGURE_NAMESPACE_ISSUES_URL = PAGURE_NAMESPACE_REPO_URL + \"/issues\"\n+\n+\n+def read_file(filename, mode='r'):\n+    with open(os.path.join(os.path.dirname(os.path.abspath(__file__)), filename), mode) as f:\n+        content = f.read()\n+    return content\n+\n+\n+class TestPagureBackend(unittest.TestCase):\n+    \"\"\" Pagure backend tests \"\"\"\n+\n+    @httpretty.activate\n+    def test_initialization(self):\n+        \"\"\"Test whether attributes are initialized\"\"\"\n+\n+        pagure = Pagure(namespace=None, repository='Project-example', api_token='aaa', tag='test')\n+\n+        # Testing initialization when repository is not within a namespace\n+        self.assertEqual(pagure.repository, 'Project-example')\n+        self.assertIsNone(pagure.namespace)\n+        self.assertEqual(pagure.origin, 'https://pagure.io/Project-example')\n+        self.assertEqual(pagure.tag, 'test')\n+        self.assertEqual(pagure.max_items, MAX_CATEGORY_ITEMS_PER_PAGE)\n+        self.assertEqual(pagure.categories, [CATEGORY_ISSUE])\n+        self.assertTrue(pagure.ssl_verify)\n+\n+        # When tag is empty or None it will be set to the value in origin\n+        pagure = Pagure(namespace=None, repository='Project-example', api_token='aaa', ssl_verify=False)\n+        self.assertEqual(pagure.repository, 'Project-example')\n+        self.assertIsNone(pagure.namespace)\n+        self.assertEqual(pagure.origin, 'https://pagure.io/Project-example')\n+        self.assertEqual(pagure.tag, 'https://pagure.io/Project-example')\n+        self.assertFalse(pagure.ssl_verify)\n+\n+        pagure = Pagure(namespace=None, repository='Project-example', api_token='aaa', tag='')\n+        self.assertEqual(pagure.repository, 'Project-example')\n+        self.assertIsNone(pagure.namespace)\n+        self.assertEqual(pagure.origin, 'https://pagure.io/Project-example')\n+        self.assertEqual(pagure.tag, 'https://pagure.io/Project-example')\n+\n+        # Testing initialization when repository is within a namespace\n+        pagure = Pagure(namespace='Test-group', repository='Project-example-namespace', api_token='', tag='testing')\n+        self.assertEqual(pagure.repository, 'Project-example-namespace')\n+        self.assertEqual(pagure.namespace, 'Test-group')\n+        self.assertEqual(pagure.origin, 'https://pagure.io/Test-group/Project-example-namespace')\n+        self.assertEqual(pagure.tag, 'testing')\n+        self.assertEqual(pagure.max_items, MAX_CATEGORY_ITEMS_PER_PAGE)\n+        self.assertEqual(pagure.categories, [CATEGORY_ISSUE])\n+        self.assertTrue(pagure.ssl_verify)\n+\n+    def test_token_initialization(self):\n+        \"\"\"Test whether token parameter is initialized\"\"\"\n+\n+        # Empty value generates a None API token\n+        pagure = Pagure(repository='Project-test-example', tag='test')\n+        self.assertIsNone(pagure.api_token)\n+\n+        # Initialize the token\n+        pagure = Pagure(repository='Project-test-example', api_token='aaa', tag='test')\n+        self.assertEqual(pagure.api_token, 'aaa')\n+\n+    def test_has_resuming(self):\n+        \"\"\"Test if it returns True when has_resuming is called\"\"\"\n+\n+        self.assertEqual(Pagure.has_resuming(), True)\n+\n+    def test_has_archiving(self):\n+        \"\"\"Test if it returns True when has_archiving is called\"\"\"\n+\n+        self.assertEqual(Pagure.has_archiving(), True)\n+\n+    @httpretty.activate\n+    def test_fetch_issues(self):\n+        \"\"\"Test whether a list of issues is returned\"\"\"\n+\n+        body = read_file('data/pagure/pagure_repo_issue_1')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=body,\n+                               status=200,\n+                               )\n+        pagure = Pagure(repository='Project-example', api_token='aaa')\n+        issues = [issues for issues in pagure.fetch(from_date=None, to_date=None)]\n+\n+        self.assertEqual(len(issues), 1)\n+\n+        issue = issues[0]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['uuid'], '41071b08dd75f34ca92c6d5ecb844e7a3e5939c6')\n+        self.assertEqual(issue['updated_on'], 1583508642.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Project-example')\n+        self.assertEqual(len(issue['data']['comments']), 1)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+\n+    @httpretty.activate\n+    def test_fetch_issues_disabled(self):\n+        \"\"\"Test whether an empty response is returned in case a repository\n+           has disabled issue tracker\n+        \"\"\"\n+        body = read_file('data/pagure/pagure_empty_request')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=body,\n+                               status=404,\n+                               )\n+        pagure = Pagure(repository='Project-test-example')\n+        issues = [issues for issues in pagure.fetch(from_date=None, to_date=None)]\n+        self.assertEqual(len(issues), 0)\n+        self.assertListEqual(issues, [])\n+\n+    @httpretty.activate\n+    def test_search_fields_issues(self):\n+        \"\"\"Test whether the search_fields is properly set\"\"\"\n+\n+        body = read_file('data/pagure/pagure_repo_issue_1')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=body,\n+                               status=200,\n+                               )\n+\n+        pagure = Pagure(repository='Project-example', api_token='aaa')\n+        issues = [issues for issues in pagure.fetch(from_date=None, to_date=None)]\n+\n+        issue = issues[0]\n+        self.assertEqual(pagure.metadata_id(issue['data']), issue['search_fields']['item_id'])\n+        self.assertIsNone(issue['search_fields']['namespace'])\n+        self.assertEqual(issue['search_fields']['repo'], 'Project-example')\n+\n+    @httpretty.activate\n+    def test_fetch_issues_reaction(self):\n+        \"\"\"Test the reactions on an issue comment\"\"\"\n+\n+        issue_2 = read_file('data/pagure/pagure_repo_issue_2')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=issue_2,\n+                               status=200,\n+                               )\n+\n+        pagure = Pagure(repository='Project-example')\n+        issues = [issues for issues in pagure.fetch()]\n+\n+        self.assertEqual(len(issues), 2)\n+\n+        issue = issues[0]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['uuid'], '41071b08dd75f34ca92c6d5ecb844e7a3e5939c6')\n+        self.assertEqual(issue['updated_on'], 1583508642.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Project-example')\n+        self.assertEqual(len(issue['data']['comments']), 1)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk08')\n+        self.assertEqual(len(issue['data']['comments'][0]['reactions']), 0)\n+\n+        issue = issues[1]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['uuid'], '7dd3642664c8a7e475814b9037277df775657850')\n+        self.assertEqual(issue['updated_on'], 1583558174.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk0806')\n+        self.assertEqual(len(issue['data']['comments']), 2)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+        self.assertEqual(len(issue['data']['comments'][0]['reactions']), 0)\n+        self.assertEqual(len(issue['data']['comments'][1]['reactions']), 1)\n+        self.assertListEqual(issue['data']['comments'][1]['reactions']['Thumbs up'], ['animeshk0806'])\n+\n+    @httpretty.activate\n+    def test_fetch_more_issues(self):\n+        \"\"\"Test when return two issues\"\"\"\n+\n+        issue_2 = read_file('data/pagure/pagure_repo_issue_2')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=issue_2,\n+                               status=200,\n+                               )\n+\n+        pagure = Pagure(repository='Project-example')\n+        issues = [issues for issues in pagure.fetch()]\n+\n+        self.assertEqual(len(issues), 2)\n+\n+        issue = issues[0]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['uuid'], '41071b08dd75f34ca92c6d5ecb844e7a3e5939c6')\n+        self.assertEqual(issue['updated_on'], 1583508642.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Project-example')\n+        self.assertEqual(len(issue['data']['comments']), 1)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk08')\n+\n+        issue = issues[1]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['uuid'], '7dd3642664c8a7e475814b9037277df775657850')\n+        self.assertEqual(issue['updated_on'], 1583558174.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk0806')\n+        self.assertEqual(len(issue['data']['comments']), 2)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+\n+    @httpretty.activate\n+    def test_fetch_issues_until_date(self):\n+        \"\"\"Test when return issue till a particular date\"\"\"\n+\n+        issue_1 = read_file('data/pagure/pagure_repo_issue_1')\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=issue_1,\n+                               status=200,\n+                               )\n+\n+        to_date = datetime.datetime(2020, 3, 7)\n+        pagure = Pagure(repository='Project-example')\n+        issues = [issues for issues in pagure.fetch(to_date=to_date)]\n+\n+        self.assertEqual(len(issues), 1)\n+\n+        issue = issues[0]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['uuid'], '41071b08dd75f34ca92c6d5ecb844e7a3e5939c6')\n+        self.assertEqual(issue['updated_on'], 1583508642.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk08')\n+        self.assertEqual(len(issue['data']['comments']), 1)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+\n+    @httpretty.activate\n+    def test_fetch_from_date(self):\n+        \"\"\"Test when return from date\"\"\"\n+\n+        body = read_file('data/pagure/pagure_repo_issue_from_2020_03_07')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=body,\n+                               status=200,\n+                               )\n+\n+        from_date = datetime.datetime(2020, 3, 8)\n+        pagure = Pagure(repository='Project-example')\n+        issues = [issues for issues in pagure.fetch(from_date=from_date)]\n+\n+        self.assertEqual(len(issues), 1)\n+        issue = issues[0]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['uuid'], '7dd3642664c8a7e475814b9037277df775657850')\n+        self.assertEqual(issue['updated_on'], 1583558174.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk0806')\n+        self.assertEqual(len(issue['data']['comments']), 2)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+\n+    @httpretty.activate\n+    def test_fetch_issues_namespace(self):\n+        \"\"\"Test issues fetch from a repository within a namespace\"\"\"\n+\n+        issue_1 = read_file('data/pagure/pagure_namespace_issue_2')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_NAMESPACE_ISSUES_URL,\n+                               body=issue_1, status=200,\n+                               )\n+\n+        pagure = Pagure(namespace='Test-group', repository='Project-namespace-example')\n+        issues = [issues for issues in pagure.fetch()]\n+\n+        self.assertEqual(len(issues), 2)\n+\n+        issue = issues[0]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Test-group/Project-namespace-example')\n+        self.assertEqual(issue['uuid'], 'bdf90e94bf3b17ed2f75f5e5187e21a62512ca5a')\n+        self.assertEqual(issue['updated_on'], 1583509042.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Test-group/Project-namespace-example')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk08')\n+        self.assertEqual(len(issue['data']['comments']), 1)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+\n+        issue = issues[1]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Test-group/Project-namespace-example')\n+        self.assertEqual(issue['uuid'], 'eec4d7bf5c3ca405e39f39a8c6faf616fd4fa425')\n+        self.assertEqual(issue['updated_on'], 1583562831.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Test-group/Project-namespace-example')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk0806')\n+        self.assertEqual(len(issue['data']['comments']), 2)\n+        self.assertEqual(issue['data']['comments'][1]['user']['name'], 'animeshk08')\n+\n+    @httpretty.activate\n+    def test_fetch_issues_namespace_reaction(self):\n+        \"\"\"Test reactions on a comment from an issue fetch from a repository within a namespace\"\"\"\n+\n+        issue_1 = read_file('data/pagure/pagure_namespace_issue_2')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_NAMESPACE_ISSUES_URL,\n+                               body=issue_1, status=200,\n+                               )\n+\n+        pagure = Pagure(namespace='Test-group', repository='Project-namespace-example')\n+        issues = [issues for issues in pagure.fetch()]\n+\n+        self.assertEqual(len(issues), 2)\n+\n+        issue = issues[0]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Test-group/Project-namespace-example')\n+        self.assertEqual(issue['uuid'], 'bdf90e94bf3b17ed2f75f5e5187e21a62512ca5a')\n+        self.assertEqual(issue['updated_on'], 1583509042.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Test-group/Project-namespace-example')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk08')\n+        self.assertEqual(len(issue['data']['comments']), 1)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+        self.assertEqual(len(issue['data']['comments'][0]['reactions']), 0)\n+\n+        issue = issues[1]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Test-group/Project-namespace-example')\n+        self.assertEqual(issue['uuid'], 'eec4d7bf5c3ca405e39f39a8c6faf616fd4fa425')\n+        self.assertEqual(issue['updated_on'], 1583562831.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Test-group/Project-namespace-example')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk0806')\n+        self.assertEqual(len(issue['data']['comments']), 2)\n+        self.assertEqual(issue['data']['comments'][1]['user']['name'], 'animeshk08')\n+        self.assertEqual(len(issue['data']['comments'][1]['reactions']), 0)\n+        self.assertEqual(len(issue['data']['comments'][0]['reactions']), 1)\n+        self.assertListEqual(issue['data']['comments'][0]['reactions']['Heart'], ['animeshk0806'])\n+\n+    @httpretty.activate\n+    def test_fetch_empty(self):\n+        \"\"\"Test when return empty\"\"\"\n+\n+        body = \"\"\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=body, status=200,\n+                               )\n+        from_date = datetime.datetime(2016, 1, 1)\n+        pagure = Pagure(repository='Project-example', api_token='aaa')\n+\n+        issues = [issues for issues in pagure.fetch(from_date=from_date)]\n+\n+        self.assertEqual(len(issues), 0)\n+\n+\n+class TestPagureBackendArchive(TestCaseBackendArchive):\n+    \"\"\"Pagure backend tests using an archive\"\"\"\n+\n+    def setUp(self):\n+        super().setUp()\n+        self.backend_write_archive = Pagure(repository='Project-example', api_token='aaa', archive=self.archive)\n+        self.backend_read_archive = Pagure(repository='Project-example', api_token='aaa', archive=self.archive)\n+\n+    @httpretty.activate\n+    def test_fetch_issues_from_archive(self):\n+        \"\"\"Test whether a list of issues is returned from archive\"\"\"\n+\n+        issue_2 = read_file('data/pagure/pagure_repo_issue_1')\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=issue_2,\n+                               status=200,\n+                               )\n+\n+        self._test_fetch_from_archive(from_date=None)\n+\n+    @httpretty.activate\n+    def test_fetch_from_date_from_archive(self):\n+        \"\"\"Test whether a list of issues is returned from archive after a given date\"\"\"\n+\n+        body = read_file('data/pagure/pagure_repo_issue_from_2020_03_07')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=body,\n+                               status=200,\n+                               )\n+        from_date = datetime.datetime(2020, 3, 7)\n+        self._test_fetch_from_archive(from_date=from_date)\n+\n+    @httpretty.activate\n+    def test_fetch_from_empty_archive(self):\n+        \"\"\"Test whether no issues are returned when the archive is empty\"\"\"\n+\n+        body = \"\"\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=body, status=200,\n+                               )\n+\n+        self._test_fetch_from_archive()\n+\n+\n+class TestPagureClient(unittest.TestCase):\n+    \"\"\"Pagure API client tests\"\"\"\n+\n+    @httpretty.activate\n+    def test_init(self):\n+        \"\"\"Test initialisation of client\"\"\"\n+\n+        client = PagureClient(namespace=None, repository=\"Project-example\", token=\"aaa\")\n+\n+        self.assertIsNone(client.namespace)\n+        self.assertEqual(client.repository, \"Project-example\")\n+        self.assertEqual(client.sleep_time, PagureClient.DEFAULT_SLEEP_TIME)\n+        self.assertEqual(client.max_retries, PagureClient.MAX_RETRIES)\n+        self.assertEqual(client.base_url, PAGURE_API_URL)\n+        self.assertTrue(client.ssl_verify)\n+\n+        client = PagureClient(None, \"Project-test-example\", token='aaa',\n+                              sleep_time=20, max_retries=2, max_items=1,\n+                              archive=None, from_archive=False)\n+        self.assertIsNone(client.namespace)\n+        self.assertEqual(client.repository, \"Project-test-example\")\n+        self.assertEqual(client.token, 'aaa')\n+        self.assertEqual(client.sleep_time, 20)\n+        self.assertEqual(client.max_retries, 2)\n+        self.assertEqual(client.max_items, 1)\n+        self.assertIsNone(client.archive)\n+        self.assertFalse(client.from_archive)\n+\n+        client = PagureClient(None, repository='Project-test-example', token=None)\n+        self.assertIsNone(client.token)\n+\n+        # When the repository is within a namespace\n+        client = PagureClient(namespace='Test-group', repository=\"Project-namespace-example\", token=\"aaa\")\n+\n+        self.assertEqual(client.namespace, 'Test-group')\n+        self.assertEqual(client.repository, \"Project-namespace-example\")\n+        self.assertEqual(client.sleep_time, PagureClient.DEFAULT_SLEEP_TIME)\n+        self.assertEqual(client.max_retries, PagureClient.MAX_RETRIES)\n+        self.assertEqual(client.base_url, PAGURE_API_URL)\n+        self.assertTrue(client.ssl_verify)\n+\n+    @httpretty.activate\n+    def test_issues(self):\n+        \"\"\"Test issues API call\"\"\"\n+\n+        issues = read_file('data/pagure/pagure_repo_issue_1')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=issues, status=200,\n+                               )\n+\n+        client = PagureClient(namespace=None, repository='Project-example', token='aaa')\n+        raw_issues = [issues for issues in client.issues()]\n+        self.assertEqual(raw_issues[0], issues)\n+\n+        # Check requests\n+        expected = {\n+            'status': ['all'],\n+            'per_page': ['100'],\n+            'order': ['asc']\n+        }\n+\n+        self.assertDictEqual(httpretty.last_request().querystring, expected)\n+        self.assertEqual(httpretty.last_request().headers[\"Authorization\"], 'token aaa')  # check\n+\n+    @httpretty.activate\n+    def test_namespace_issues(self):\n+        \"\"\"Test fetching issues from a repository within a namespace\"\"\"\n+\n+        issue = read_file('data/pagure/pagure_namespace_issue_2')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_NAMESPACE_ISSUES_URL,\n+                               body=issue, status=200)\n+\n+        client = PagureClient(namespace='Test-group', repository='Project-namespace-example', token=None)\n+\n+        raw_issues = [issues for issues in client.issues()]\n+        self.assertEqual(raw_issues[0], issue)\n+\n+        # Check requests\n+        expected = {\n+            'status': ['all'],\n+            'per_page': ['100'],\n+            'order': ['asc']\n+        }\n+\n+        self.assertDictEqual(httpretty.last_request().querystring, expected)\n+        self.assertIsNone(httpretty.last_request().headers[\"Authorization\"])\n+\n+    @httpretty.activate\n+    def test_get_from_date_issues(self):\n+        \"\"\"Test issues from date API call\"\"\"\n+\n+        issues = read_file('data/pagure/pagure_repo_issue_from_2020_03_07')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=issues,\n+                               status=200,\n+                               )\n+\n+        from_date = datetime.datetime(2020, 3, 7)\n+        client = PagureClient(namespace=None, repository='Project-example', token='aaa')\n+\n+        raw_issues = [issues for issues in client.issues(from_date=from_date)]\n+        self.assertEqual(raw_issues[0], issues)\n+\n+        # Check requests\n+        expected = {\n+            'status': ['all'],\n+            'per_page': ['100'],\n+            'order': ['asc'],\n+            'since': ['2020-03-07 00:00:00']\n+        }\n+        self.assertDictEqual(httpretty.last_request().querystring, expected)\n+        self.assertEqual(httpretty.last_request().headers[\"Authorization\"], \"token aaa\")\n+\n+    @httpretty.activate\n+    def test_get_empty_issues(self):\n+        \"\"\" Test when issue is empty API call \"\"\"",
        "path": "tests/test_pagure.py",
        "position": null,
        "original_position": 580,
        "commit_id": "70a89aa1dccc5152ed4a52cb4c5e4e327ba3595a",
        "original_commit_id": "bea6bc459c6829df8be725bc163f944501d55107",
        "user": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "Please remove the empty space at the beginning and at the end.",
        "created_at": "2020-03-07T11:47:17Z",
        "updated_at": "2020-03-08T18:21:42Z",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r389249202",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621",
        "author_association": "MEMBER",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389249202"
          },
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r389249202"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389249202/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "user_data": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false,
          "name": "valerio",
          "company": "@Bitergia ",
          "blog": "http://valeriocos.github.io/",
          "location": "Madrid, Spain",
          "email": "valcos@bitergia.com",
          "hireable": true,
          "bio": null,
          "public_repos": 57,
          "public_gists": 28,
          "followers": 34,
          "following": 5,
          "created_at": "2014-01-27T14:30:30Z",
          "updated_at": "2020-03-17T10:02:44Z",
          "organizations": [
            {
              "login": "Bitergia",
              "id": 1918070,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=",
              "url": "https://api.github.com/orgs/Bitergia",
              "repos_url": "https://api.github.com/orgs/Bitergia/repos",
              "events_url": "https://api.github.com/orgs/Bitergia/events",
              "hooks_url": "https://api.github.com/orgs/Bitergia/hooks",
              "issues_url": "https://api.github.com/orgs/Bitergia/issues",
              "members_url": "https://api.github.com/orgs/Bitergia/members{/member}",
              "public_members_url": "https://api.github.com/orgs/Bitergia/public_members{/member}",
              "avatar_url": "https://avatars3.githubusercontent.com/u/1918070?v=4",
              "description": null
            },
            {
              "login": "grimoirelab",
              "id": 16151805,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1",
              "url": "https://api.github.com/orgs/grimoirelab",
              "repos_url": "https://api.github.com/orgs/grimoirelab/repos",
              "events_url": "https://api.github.com/orgs/grimoirelab/events",
              "hooks_url": "https://api.github.com/orgs/grimoirelab/hooks",
              "issues_url": "https://api.github.com/orgs/grimoirelab/issues",
              "members_url": "https://api.github.com/orgs/grimoirelab/members{/member}",
              "public_members_url": "https://api.github.com/orgs/grimoirelab/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/16151805?v=4",
              "description": ""
            },
            {
              "login": "chaoss",
              "id": 29740296,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
              "url": "https://api.github.com/orgs/chaoss",
              "repos_url": "https://api.github.com/orgs/chaoss/repos",
              "events_url": "https://api.github.com/orgs/chaoss/events",
              "hooks_url": "https://api.github.com/orgs/chaoss/hooks",
              "issues_url": "https://api.github.com/orgs/chaoss/issues",
              "members_url": "https://api.github.com/orgs/chaoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/chaoss/public_members{/member}",
              "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
              "description": ""
            }
          ]
        },
        "reactions_data": []
      },
      {
        "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389249256",
        "pull_request_review_id": 370737508,
        "id": 389249256,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0OTI1Ng==",
        "diff_hunk": "@@ -0,0 +1,749 @@\n+#!/usr/bin/env python3\n+# -*- coding: utf-8 -*-\n+#\n+# Copyright (C) 2015-2019 Bitergia\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program. If not, see <http://www.gnu.org/licenses/>.\n+#\n+# Authors:\n+#     Animesh Kumar<animuz111@gmail.com>\n+#\n+\n+import datetime\n+import os\n+import unittest.mock\n+import httpretty\n+import pkg_resources\n+import requests\n+\n+pkg_resources.declare_namespace('perceval.backends')\n+\n+from perceval.backend import BackendCommandArgumentParser\n+from perceval.utils import (DEFAULT_DATETIME, DEFAULT_LAST_DATETIME)\n+from perceval.backends.core.pagure import (Pagure,\n+                                           PagureCommand,\n+                                           PagureClient,\n+                                           CATEGORY_ISSUE,\n+                                           MAX_CATEGORY_ITEMS_PER_PAGE)\n+from base import TestCaseBackendArchive\n+\n+PAGURE_API_URL = \"https://pagure.io/api/0\"\n+PAGURE_REPO_URL = PAGURE_API_URL + \"/Project-example\"\n+PAGURE_ISSUES_URL = PAGURE_REPO_URL + \"/issues\"\n+\n+# Repository with issue tracker disabled\n+PAGURE_REPO_URL_DISABLED_URL = PAGURE_API_URL + \"/Project-test-example\"\n+PAGURE_ISSUES_DISABLED_URL = PAGURE_REPO_URL_DISABLED_URL + \"/issues\"\n+\n+PAGURE_NAMESPACE_REPO_URL = PAGURE_API_URL + \"Test-group/Project-namespace-example\"\n+PAGURE_NAMESPACE_ISSUES_URL = PAGURE_NAMESPACE_REPO_URL + \"/issues\"\n+\n+\n+def read_file(filename, mode='r'):\n+    with open(os.path.join(os.path.dirname(os.path.abspath(__file__)), filename), mode) as f:\n+        content = f.read()\n+    return content\n+\n+\n+class TestPagureBackend(unittest.TestCase):\n+    \"\"\" Pagure backend tests \"\"\"\n+\n+    @httpretty.activate\n+    def test_initialization(self):\n+        \"\"\"Test whether attributes are initialized\"\"\"\n+\n+        pagure = Pagure(namespace=None, repository='Project-example', api_token='aaa', tag='test')\n+\n+        # Testing initialization when repository is not within a namespace\n+        self.assertEqual(pagure.repository, 'Project-example')\n+        self.assertIsNone(pagure.namespace)\n+        self.assertEqual(pagure.origin, 'https://pagure.io/Project-example')\n+        self.assertEqual(pagure.tag, 'test')\n+        self.assertEqual(pagure.max_items, MAX_CATEGORY_ITEMS_PER_PAGE)\n+        self.assertEqual(pagure.categories, [CATEGORY_ISSUE])\n+        self.assertTrue(pagure.ssl_verify)\n+\n+        # When tag is empty or None it will be set to the value in origin\n+        pagure = Pagure(namespace=None, repository='Project-example', api_token='aaa', ssl_verify=False)\n+        self.assertEqual(pagure.repository, 'Project-example')\n+        self.assertIsNone(pagure.namespace)\n+        self.assertEqual(pagure.origin, 'https://pagure.io/Project-example')\n+        self.assertEqual(pagure.tag, 'https://pagure.io/Project-example')\n+        self.assertFalse(pagure.ssl_verify)\n+\n+        pagure = Pagure(namespace=None, repository='Project-example', api_token='aaa', tag='')\n+        self.assertEqual(pagure.repository, 'Project-example')\n+        self.assertIsNone(pagure.namespace)\n+        self.assertEqual(pagure.origin, 'https://pagure.io/Project-example')\n+        self.assertEqual(pagure.tag, 'https://pagure.io/Project-example')\n+\n+        # Testing initialization when repository is within a namespace\n+        pagure = Pagure(namespace='Test-group', repository='Project-example-namespace', api_token='', tag='testing')\n+        self.assertEqual(pagure.repository, 'Project-example-namespace')\n+        self.assertEqual(pagure.namespace, 'Test-group')\n+        self.assertEqual(pagure.origin, 'https://pagure.io/Test-group/Project-example-namespace')\n+        self.assertEqual(pagure.tag, 'testing')\n+        self.assertEqual(pagure.max_items, MAX_CATEGORY_ITEMS_PER_PAGE)\n+        self.assertEqual(pagure.categories, [CATEGORY_ISSUE])\n+        self.assertTrue(pagure.ssl_verify)\n+\n+    def test_token_initialization(self):\n+        \"\"\"Test whether token parameter is initialized\"\"\"\n+\n+        # Empty value generates a None API token\n+        pagure = Pagure(repository='Project-test-example', tag='test')\n+        self.assertIsNone(pagure.api_token)\n+\n+        # Initialize the token\n+        pagure = Pagure(repository='Project-test-example', api_token='aaa', tag='test')\n+        self.assertEqual(pagure.api_token, 'aaa')\n+\n+    def test_has_resuming(self):\n+        \"\"\"Test if it returns True when has_resuming is called\"\"\"\n+\n+        self.assertEqual(Pagure.has_resuming(), True)\n+\n+    def test_has_archiving(self):\n+        \"\"\"Test if it returns True when has_archiving is called\"\"\"\n+\n+        self.assertEqual(Pagure.has_archiving(), True)\n+\n+    @httpretty.activate\n+    def test_fetch_issues(self):\n+        \"\"\"Test whether a list of issues is returned\"\"\"\n+\n+        body = read_file('data/pagure/pagure_repo_issue_1')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=body,\n+                               status=200,\n+                               )\n+        pagure = Pagure(repository='Project-example', api_token='aaa')\n+        issues = [issues for issues in pagure.fetch(from_date=None, to_date=None)]\n+\n+        self.assertEqual(len(issues), 1)\n+\n+        issue = issues[0]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['uuid'], '41071b08dd75f34ca92c6d5ecb844e7a3e5939c6')\n+        self.assertEqual(issue['updated_on'], 1583508642.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Project-example')\n+        self.assertEqual(len(issue['data']['comments']), 1)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+\n+    @httpretty.activate\n+    def test_fetch_issues_disabled(self):\n+        \"\"\"Test whether an empty response is returned in case a repository\n+           has disabled issue tracker\n+        \"\"\"\n+        body = read_file('data/pagure/pagure_empty_request')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=body,\n+                               status=404,\n+                               )\n+        pagure = Pagure(repository='Project-test-example')\n+        issues = [issues for issues in pagure.fetch(from_date=None, to_date=None)]\n+        self.assertEqual(len(issues), 0)\n+        self.assertListEqual(issues, [])\n+\n+    @httpretty.activate\n+    def test_search_fields_issues(self):\n+        \"\"\"Test whether the search_fields is properly set\"\"\"\n+\n+        body = read_file('data/pagure/pagure_repo_issue_1')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=body,\n+                               status=200,\n+                               )\n+\n+        pagure = Pagure(repository='Project-example', api_token='aaa')\n+        issues = [issues for issues in pagure.fetch(from_date=None, to_date=None)]\n+\n+        issue = issues[0]\n+        self.assertEqual(pagure.metadata_id(issue['data']), issue['search_fields']['item_id'])\n+        self.assertIsNone(issue['search_fields']['namespace'])\n+        self.assertEqual(issue['search_fields']['repo'], 'Project-example')\n+\n+    @httpretty.activate\n+    def test_fetch_issues_reaction(self):\n+        \"\"\"Test the reactions on an issue comment\"\"\"\n+\n+        issue_2 = read_file('data/pagure/pagure_repo_issue_2')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=issue_2,\n+                               status=200,\n+                               )\n+\n+        pagure = Pagure(repository='Project-example')\n+        issues = [issues for issues in pagure.fetch()]\n+\n+        self.assertEqual(len(issues), 2)\n+\n+        issue = issues[0]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['uuid'], '41071b08dd75f34ca92c6d5ecb844e7a3e5939c6')\n+        self.assertEqual(issue['updated_on'], 1583508642.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Project-example')\n+        self.assertEqual(len(issue['data']['comments']), 1)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk08')\n+        self.assertEqual(len(issue['data']['comments'][0]['reactions']), 0)\n+\n+        issue = issues[1]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['uuid'], '7dd3642664c8a7e475814b9037277df775657850')\n+        self.assertEqual(issue['updated_on'], 1583558174.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk0806')\n+        self.assertEqual(len(issue['data']['comments']), 2)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+        self.assertEqual(len(issue['data']['comments'][0]['reactions']), 0)\n+        self.assertEqual(len(issue['data']['comments'][1]['reactions']), 1)\n+        self.assertListEqual(issue['data']['comments'][1]['reactions']['Thumbs up'], ['animeshk0806'])\n+\n+    @httpretty.activate\n+    def test_fetch_more_issues(self):\n+        \"\"\"Test when return two issues\"\"\"\n+\n+        issue_2 = read_file('data/pagure/pagure_repo_issue_2')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=issue_2,\n+                               status=200,\n+                               )\n+\n+        pagure = Pagure(repository='Project-example')\n+        issues = [issues for issues in pagure.fetch()]\n+\n+        self.assertEqual(len(issues), 2)\n+\n+        issue = issues[0]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['uuid'], '41071b08dd75f34ca92c6d5ecb844e7a3e5939c6')\n+        self.assertEqual(issue['updated_on'], 1583508642.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Project-example')\n+        self.assertEqual(len(issue['data']['comments']), 1)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk08')\n+\n+        issue = issues[1]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['uuid'], '7dd3642664c8a7e475814b9037277df775657850')\n+        self.assertEqual(issue['updated_on'], 1583558174.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk0806')\n+        self.assertEqual(len(issue['data']['comments']), 2)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+\n+    @httpretty.activate\n+    def test_fetch_issues_until_date(self):\n+        \"\"\"Test when return issue till a particular date\"\"\"\n+\n+        issue_1 = read_file('data/pagure/pagure_repo_issue_1')\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=issue_1,\n+                               status=200,\n+                               )\n+\n+        to_date = datetime.datetime(2020, 3, 7)\n+        pagure = Pagure(repository='Project-example')\n+        issues = [issues for issues in pagure.fetch(to_date=to_date)]\n+\n+        self.assertEqual(len(issues), 1)\n+\n+        issue = issues[0]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['uuid'], '41071b08dd75f34ca92c6d5ecb844e7a3e5939c6')\n+        self.assertEqual(issue['updated_on'], 1583508642.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk08')\n+        self.assertEqual(len(issue['data']['comments']), 1)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+\n+    @httpretty.activate\n+    def test_fetch_from_date(self):\n+        \"\"\"Test when return from date\"\"\"\n+\n+        body = read_file('data/pagure/pagure_repo_issue_from_2020_03_07')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=body,\n+                               status=200,\n+                               )\n+\n+        from_date = datetime.datetime(2020, 3, 8)\n+        pagure = Pagure(repository='Project-example')\n+        issues = [issues for issues in pagure.fetch(from_date=from_date)]\n+\n+        self.assertEqual(len(issues), 1)\n+        issue = issues[0]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['uuid'], '7dd3642664c8a7e475814b9037277df775657850')\n+        self.assertEqual(issue['updated_on'], 1583558174.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk0806')\n+        self.assertEqual(len(issue['data']['comments']), 2)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+\n+    @httpretty.activate\n+    def test_fetch_issues_namespace(self):\n+        \"\"\"Test issues fetch from a repository within a namespace\"\"\"\n+\n+        issue_1 = read_file('data/pagure/pagure_namespace_issue_2')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_NAMESPACE_ISSUES_URL,\n+                               body=issue_1, status=200,\n+                               )\n+\n+        pagure = Pagure(namespace='Test-group', repository='Project-namespace-example')\n+        issues = [issues for issues in pagure.fetch()]\n+\n+        self.assertEqual(len(issues), 2)\n+\n+        issue = issues[0]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Test-group/Project-namespace-example')\n+        self.assertEqual(issue['uuid'], 'bdf90e94bf3b17ed2f75f5e5187e21a62512ca5a')\n+        self.assertEqual(issue['updated_on'], 1583509042.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Test-group/Project-namespace-example')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk08')\n+        self.assertEqual(len(issue['data']['comments']), 1)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+\n+        issue = issues[1]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Test-group/Project-namespace-example')\n+        self.assertEqual(issue['uuid'], 'eec4d7bf5c3ca405e39f39a8c6faf616fd4fa425')\n+        self.assertEqual(issue['updated_on'], 1583562831.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Test-group/Project-namespace-example')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk0806')\n+        self.assertEqual(len(issue['data']['comments']), 2)\n+        self.assertEqual(issue['data']['comments'][1]['user']['name'], 'animeshk08')\n+\n+    @httpretty.activate\n+    def test_fetch_issues_namespace_reaction(self):\n+        \"\"\"Test reactions on a comment from an issue fetch from a repository within a namespace\"\"\"\n+\n+        issue_1 = read_file('data/pagure/pagure_namespace_issue_2')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_NAMESPACE_ISSUES_URL,\n+                               body=issue_1, status=200,\n+                               )\n+\n+        pagure = Pagure(namespace='Test-group', repository='Project-namespace-example')\n+        issues = [issues for issues in pagure.fetch()]\n+\n+        self.assertEqual(len(issues), 2)\n+\n+        issue = issues[0]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Test-group/Project-namespace-example')\n+        self.assertEqual(issue['uuid'], 'bdf90e94bf3b17ed2f75f5e5187e21a62512ca5a')\n+        self.assertEqual(issue['updated_on'], 1583509042.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Test-group/Project-namespace-example')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk08')\n+        self.assertEqual(len(issue['data']['comments']), 1)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+        self.assertEqual(len(issue['data']['comments'][0]['reactions']), 0)\n+\n+        issue = issues[1]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Test-group/Project-namespace-example')\n+        self.assertEqual(issue['uuid'], 'eec4d7bf5c3ca405e39f39a8c6faf616fd4fa425')\n+        self.assertEqual(issue['updated_on'], 1583562831.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Test-group/Project-namespace-example')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk0806')\n+        self.assertEqual(len(issue['data']['comments']), 2)\n+        self.assertEqual(issue['data']['comments'][1]['user']['name'], 'animeshk08')\n+        self.assertEqual(len(issue['data']['comments'][1]['reactions']), 0)\n+        self.assertEqual(len(issue['data']['comments'][0]['reactions']), 1)\n+        self.assertListEqual(issue['data']['comments'][0]['reactions']['Heart'], ['animeshk0806'])\n+\n+    @httpretty.activate\n+    def test_fetch_empty(self):\n+        \"\"\"Test when return empty\"\"\"\n+\n+        body = \"\"\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=body, status=200,\n+                               )\n+        from_date = datetime.datetime(2016, 1, 1)\n+        pagure = Pagure(repository='Project-example', api_token='aaa')\n+\n+        issues = [issues for issues in pagure.fetch(from_date=from_date)]\n+\n+        self.assertEqual(len(issues), 0)\n+\n+\n+class TestPagureBackendArchive(TestCaseBackendArchive):\n+    \"\"\"Pagure backend tests using an archive\"\"\"\n+\n+    def setUp(self):\n+        super().setUp()\n+        self.backend_write_archive = Pagure(repository='Project-example', api_token='aaa', archive=self.archive)\n+        self.backend_read_archive = Pagure(repository='Project-example', api_token='aaa', archive=self.archive)\n+\n+    @httpretty.activate\n+    def test_fetch_issues_from_archive(self):\n+        \"\"\"Test whether a list of issues is returned from archive\"\"\"\n+\n+        issue_2 = read_file('data/pagure/pagure_repo_issue_1')\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=issue_2,\n+                               status=200,\n+                               )\n+\n+        self._test_fetch_from_archive(from_date=None)\n+\n+    @httpretty.activate\n+    def test_fetch_from_date_from_archive(self):\n+        \"\"\"Test whether a list of issues is returned from archive after a given date\"\"\"\n+\n+        body = read_file('data/pagure/pagure_repo_issue_from_2020_03_07')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=body,\n+                               status=200,\n+                               )\n+        from_date = datetime.datetime(2020, 3, 7)\n+        self._test_fetch_from_archive(from_date=from_date)\n+\n+    @httpretty.activate\n+    def test_fetch_from_empty_archive(self):\n+        \"\"\"Test whether no issues are returned when the archive is empty\"\"\"\n+\n+        body = \"\"\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=body, status=200,\n+                               )\n+\n+        self._test_fetch_from_archive()\n+\n+\n+class TestPagureClient(unittest.TestCase):\n+    \"\"\"Pagure API client tests\"\"\"\n+\n+    @httpretty.activate\n+    def test_init(self):\n+        \"\"\"Test initialisation of client\"\"\"\n+\n+        client = PagureClient(namespace=None, repository=\"Project-example\", token=\"aaa\")\n+\n+        self.assertIsNone(client.namespace)\n+        self.assertEqual(client.repository, \"Project-example\")\n+        self.assertEqual(client.sleep_time, PagureClient.DEFAULT_SLEEP_TIME)\n+        self.assertEqual(client.max_retries, PagureClient.MAX_RETRIES)\n+        self.assertEqual(client.base_url, PAGURE_API_URL)\n+        self.assertTrue(client.ssl_verify)\n+\n+        client = PagureClient(None, \"Project-test-example\", token='aaa',\n+                              sleep_time=20, max_retries=2, max_items=1,\n+                              archive=None, from_archive=False)\n+        self.assertIsNone(client.namespace)\n+        self.assertEqual(client.repository, \"Project-test-example\")\n+        self.assertEqual(client.token, 'aaa')\n+        self.assertEqual(client.sleep_time, 20)\n+        self.assertEqual(client.max_retries, 2)\n+        self.assertEqual(client.max_items, 1)\n+        self.assertIsNone(client.archive)\n+        self.assertFalse(client.from_archive)\n+\n+        client = PagureClient(None, repository='Project-test-example', token=None)\n+        self.assertIsNone(client.token)\n+\n+        # When the repository is within a namespace\n+        client = PagureClient(namespace='Test-group', repository=\"Project-namespace-example\", token=\"aaa\")\n+\n+        self.assertEqual(client.namespace, 'Test-group')\n+        self.assertEqual(client.repository, \"Project-namespace-example\")\n+        self.assertEqual(client.sleep_time, PagureClient.DEFAULT_SLEEP_TIME)\n+        self.assertEqual(client.max_retries, PagureClient.MAX_RETRIES)\n+        self.assertEqual(client.base_url, PAGURE_API_URL)\n+        self.assertTrue(client.ssl_verify)\n+\n+    @httpretty.activate\n+    def test_issues(self):\n+        \"\"\"Test issues API call\"\"\"\n+\n+        issues = read_file('data/pagure/pagure_repo_issue_1')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=issues, status=200,\n+                               )\n+\n+        client = PagureClient(namespace=None, repository='Project-example', token='aaa')\n+        raw_issues = [issues for issues in client.issues()]\n+        self.assertEqual(raw_issues[0], issues)\n+\n+        # Check requests\n+        expected = {\n+            'status': ['all'],\n+            'per_page': ['100'],\n+            'order': ['asc']\n+        }\n+\n+        self.assertDictEqual(httpretty.last_request().querystring, expected)\n+        self.assertEqual(httpretty.last_request().headers[\"Authorization\"], 'token aaa')  # check\n+\n+    @httpretty.activate\n+    def test_namespace_issues(self):\n+        \"\"\"Test fetching issues from a repository within a namespace\"\"\"\n+\n+        issue = read_file('data/pagure/pagure_namespace_issue_2')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_NAMESPACE_ISSUES_URL,\n+                               body=issue, status=200)\n+\n+        client = PagureClient(namespace='Test-group', repository='Project-namespace-example', token=None)\n+\n+        raw_issues = [issues for issues in client.issues()]\n+        self.assertEqual(raw_issues[0], issue)\n+\n+        # Check requests\n+        expected = {\n+            'status': ['all'],\n+            'per_page': ['100'],\n+            'order': ['asc']\n+        }\n+\n+        self.assertDictEqual(httpretty.last_request().querystring, expected)\n+        self.assertIsNone(httpretty.last_request().headers[\"Authorization\"])\n+\n+    @httpretty.activate\n+    def test_get_from_date_issues(self):\n+        \"\"\"Test issues from date API call\"\"\"\n+\n+        issues = read_file('data/pagure/pagure_repo_issue_from_2020_03_07')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=issues,\n+                               status=200,\n+                               )\n+\n+        from_date = datetime.datetime(2020, 3, 7)\n+        client = PagureClient(namespace=None, repository='Project-example', token='aaa')\n+\n+        raw_issues = [issues for issues in client.issues(from_date=from_date)]\n+        self.assertEqual(raw_issues[0], issues)\n+\n+        # Check requests\n+        expected = {\n+            'status': ['all'],\n+            'per_page': ['100'],\n+            'order': ['asc'],\n+            'since': ['2020-03-07 00:00:00']\n+        }\n+        self.assertDictEqual(httpretty.last_request().querystring, expected)\n+        self.assertEqual(httpretty.last_request().headers[\"Authorization\"], \"token aaa\")\n+\n+    @httpretty.activate\n+    def test_get_empty_issues(self):\n+        \"\"\" Test when issue is empty API call \"\"\"\n+\n+        issue = read_file('data/pagure/pagure_empty_request')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=issue, status=200,\n+                               )\n+\n+        client = PagureClient(namespace=None, repository=\"Project-example\", token=\"aaa\")\n+\n+        raw_issues = [issues for issues in client.issues()]\n+        self.assertEqual(raw_issues[0], issue)\n+\n+        # Check requests\n+        expected = {\n+            'status': ['all'],\n+            'per_page': ['100'],\n+            'order': ['asc']\n+        }\n+\n+        self.assertDictEqual(httpretty.last_request().querystring, expected)\n+        self.assertEqual(httpretty.last_request().headers[\"Authorization\"], \"token aaa\")\n+\n+    @httpretty.activate\n+    def test_http_wrong_status(self):\n+        \"\"\"Test if a error is raised when the http status was not 200\"\"\"\n+\n+        issue = \"\"\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=issue,\n+                               status=501,\n+                               )\n+\n+        client = PagureClient(namespace=None, repository=\"Project-example\", token=\"aaa\", sleep_time=1, max_retries=1)\n+\n+        with self.assertRaises(requests.exceptions.HTTPError):\n+            _ = [issues for issues in client.issues()]\n+\n+        # Check requests\n+        expected = {\n+            'status': ['all'],\n+            'per_page': ['100'],\n+            'order': ['asc']\n+        }\n+\n+        self.assertDictEqual(httpretty.last_request().querystring, expected)\n+        self.assertEqual(httpretty.last_request().headers[\"Authorization\"], \"token aaa\")\n+\n+    @httpretty.activate\n+    def test_http_retry_error(self):",
        "path": "tests/test_pagure.py",
        "position": null,
        "original_position": 632,
        "commit_id": "70a89aa1dccc5152ed4a52cb4c5e4e327ba3595a",
        "original_commit_id": "bea6bc459c6829df8be725bc163f944501d55107",
        "user": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "This test isn't needed anymore if the extra_status_forcelist is removed from the pagureclient",
        "created_at": "2020-03-07T11:48:11Z",
        "updated_at": "2020-03-08T18:21:42Z",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r389249256",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621",
        "author_association": "MEMBER",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389249256"
          },
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r389249256"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389249256/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "user_data": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false,
          "name": "valerio",
          "company": "@Bitergia ",
          "blog": "http://valeriocos.github.io/",
          "location": "Madrid, Spain",
          "email": "valcos@bitergia.com",
          "hireable": true,
          "bio": null,
          "public_repos": 57,
          "public_gists": 28,
          "followers": 34,
          "following": 5,
          "created_at": "2014-01-27T14:30:30Z",
          "updated_at": "2020-03-17T10:02:44Z",
          "organizations": [
            {
              "login": "Bitergia",
              "id": 1918070,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=",
              "url": "https://api.github.com/orgs/Bitergia",
              "repos_url": "https://api.github.com/orgs/Bitergia/repos",
              "events_url": "https://api.github.com/orgs/Bitergia/events",
              "hooks_url": "https://api.github.com/orgs/Bitergia/hooks",
              "issues_url": "https://api.github.com/orgs/Bitergia/issues",
              "members_url": "https://api.github.com/orgs/Bitergia/members{/member}",
              "public_members_url": "https://api.github.com/orgs/Bitergia/public_members{/member}",
              "avatar_url": "https://avatars3.githubusercontent.com/u/1918070?v=4",
              "description": null
            },
            {
              "login": "grimoirelab",
              "id": 16151805,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1",
              "url": "https://api.github.com/orgs/grimoirelab",
              "repos_url": "https://api.github.com/orgs/grimoirelab/repos",
              "events_url": "https://api.github.com/orgs/grimoirelab/events",
              "hooks_url": "https://api.github.com/orgs/grimoirelab/hooks",
              "issues_url": "https://api.github.com/orgs/grimoirelab/issues",
              "members_url": "https://api.github.com/orgs/grimoirelab/members{/member}",
              "public_members_url": "https://api.github.com/orgs/grimoirelab/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/16151805?v=4",
              "description": ""
            },
            {
              "login": "chaoss",
              "id": 29740296,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
              "url": "https://api.github.com/orgs/chaoss",
              "repos_url": "https://api.github.com/orgs/chaoss/repos",
              "events_url": "https://api.github.com/orgs/chaoss/events",
              "hooks_url": "https://api.github.com/orgs/chaoss/hooks",
              "issues_url": "https://api.github.com/orgs/chaoss/issues",
              "members_url": "https://api.github.com/orgs/chaoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/chaoss/public_members{/member}",
              "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
              "description": ""
            }
          ]
        },
        "reactions_data": []
      },
      {
        "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389249294",
        "pull_request_review_id": 370737508,
        "id": 389249294,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0OTI5NA==",
        "diff_hunk": "@@ -0,0 +1,749 @@\n+#!/usr/bin/env python3\n+# -*- coding: utf-8 -*-\n+#\n+# Copyright (C) 2015-2019 Bitergia\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program. If not, see <http://www.gnu.org/licenses/>.\n+#\n+# Authors:\n+#     Animesh Kumar<animuz111@gmail.com>\n+#\n+\n+import datetime\n+import os\n+import unittest.mock\n+import httpretty\n+import pkg_resources\n+import requests\n+\n+pkg_resources.declare_namespace('perceval.backends')\n+\n+from perceval.backend import BackendCommandArgumentParser\n+from perceval.utils import (DEFAULT_DATETIME, DEFAULT_LAST_DATETIME)\n+from perceval.backends.core.pagure import (Pagure,\n+                                           PagureCommand,\n+                                           PagureClient,\n+                                           CATEGORY_ISSUE,\n+                                           MAX_CATEGORY_ITEMS_PER_PAGE)\n+from base import TestCaseBackendArchive\n+\n+PAGURE_API_URL = \"https://pagure.io/api/0\"\n+PAGURE_REPO_URL = PAGURE_API_URL + \"/Project-example\"\n+PAGURE_ISSUES_URL = PAGURE_REPO_URL + \"/issues\"\n+\n+# Repository with issue tracker disabled\n+PAGURE_REPO_URL_DISABLED_URL = PAGURE_API_URL + \"/Project-test-example\"\n+PAGURE_ISSUES_DISABLED_URL = PAGURE_REPO_URL_DISABLED_URL + \"/issues\"\n+\n+PAGURE_NAMESPACE_REPO_URL = PAGURE_API_URL + \"Test-group/Project-namespace-example\"\n+PAGURE_NAMESPACE_ISSUES_URL = PAGURE_NAMESPACE_REPO_URL + \"/issues\"\n+\n+\n+def read_file(filename, mode='r'):\n+    with open(os.path.join(os.path.dirname(os.path.abspath(__file__)), filename), mode) as f:\n+        content = f.read()\n+    return content\n+\n+\n+class TestPagureBackend(unittest.TestCase):\n+    \"\"\" Pagure backend tests \"\"\"\n+\n+    @httpretty.activate\n+    def test_initialization(self):\n+        \"\"\"Test whether attributes are initialized\"\"\"\n+\n+        pagure = Pagure(namespace=None, repository='Project-example', api_token='aaa', tag='test')\n+\n+        # Testing initialization when repository is not within a namespace\n+        self.assertEqual(pagure.repository, 'Project-example')\n+        self.assertIsNone(pagure.namespace)\n+        self.assertEqual(pagure.origin, 'https://pagure.io/Project-example')\n+        self.assertEqual(pagure.tag, 'test')\n+        self.assertEqual(pagure.max_items, MAX_CATEGORY_ITEMS_PER_PAGE)\n+        self.assertEqual(pagure.categories, [CATEGORY_ISSUE])\n+        self.assertTrue(pagure.ssl_verify)\n+\n+        # When tag is empty or None it will be set to the value in origin\n+        pagure = Pagure(namespace=None, repository='Project-example', api_token='aaa', ssl_verify=False)\n+        self.assertEqual(pagure.repository, 'Project-example')\n+        self.assertIsNone(pagure.namespace)\n+        self.assertEqual(pagure.origin, 'https://pagure.io/Project-example')\n+        self.assertEqual(pagure.tag, 'https://pagure.io/Project-example')\n+        self.assertFalse(pagure.ssl_verify)\n+\n+        pagure = Pagure(namespace=None, repository='Project-example', api_token='aaa', tag='')\n+        self.assertEqual(pagure.repository, 'Project-example')\n+        self.assertIsNone(pagure.namespace)\n+        self.assertEqual(pagure.origin, 'https://pagure.io/Project-example')\n+        self.assertEqual(pagure.tag, 'https://pagure.io/Project-example')\n+\n+        # Testing initialization when repository is within a namespace\n+        pagure = Pagure(namespace='Test-group', repository='Project-example-namespace', api_token='', tag='testing')\n+        self.assertEqual(pagure.repository, 'Project-example-namespace')\n+        self.assertEqual(pagure.namespace, 'Test-group')\n+        self.assertEqual(pagure.origin, 'https://pagure.io/Test-group/Project-example-namespace')\n+        self.assertEqual(pagure.tag, 'testing')\n+        self.assertEqual(pagure.max_items, MAX_CATEGORY_ITEMS_PER_PAGE)\n+        self.assertEqual(pagure.categories, [CATEGORY_ISSUE])\n+        self.assertTrue(pagure.ssl_verify)\n+\n+    def test_token_initialization(self):\n+        \"\"\"Test whether token parameter is initialized\"\"\"\n+\n+        # Empty value generates a None API token\n+        pagure = Pagure(repository='Project-test-example', tag='test')\n+        self.assertIsNone(pagure.api_token)\n+\n+        # Initialize the token\n+        pagure = Pagure(repository='Project-test-example', api_token='aaa', tag='test')\n+        self.assertEqual(pagure.api_token, 'aaa')\n+\n+    def test_has_resuming(self):\n+        \"\"\"Test if it returns True when has_resuming is called\"\"\"\n+\n+        self.assertEqual(Pagure.has_resuming(), True)\n+\n+    def test_has_archiving(self):\n+        \"\"\"Test if it returns True when has_archiving is called\"\"\"\n+\n+        self.assertEqual(Pagure.has_archiving(), True)\n+\n+    @httpretty.activate\n+    def test_fetch_issues(self):\n+        \"\"\"Test whether a list of issues is returned\"\"\"\n+\n+        body = read_file('data/pagure/pagure_repo_issue_1')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=body,\n+                               status=200,\n+                               )\n+        pagure = Pagure(repository='Project-example', api_token='aaa')\n+        issues = [issues for issues in pagure.fetch(from_date=None, to_date=None)]\n+\n+        self.assertEqual(len(issues), 1)\n+\n+        issue = issues[0]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['uuid'], '41071b08dd75f34ca92c6d5ecb844e7a3e5939c6')\n+        self.assertEqual(issue['updated_on'], 1583508642.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Project-example')\n+        self.assertEqual(len(issue['data']['comments']), 1)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+\n+    @httpretty.activate\n+    def test_fetch_issues_disabled(self):\n+        \"\"\"Test whether an empty response is returned in case a repository\n+           has disabled issue tracker\n+        \"\"\"\n+        body = read_file('data/pagure/pagure_empty_request')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=body,\n+                               status=404,\n+                               )\n+        pagure = Pagure(repository='Project-test-example')\n+        issues = [issues for issues in pagure.fetch(from_date=None, to_date=None)]\n+        self.assertEqual(len(issues), 0)\n+        self.assertListEqual(issues, [])\n+\n+    @httpretty.activate\n+    def test_search_fields_issues(self):\n+        \"\"\"Test whether the search_fields is properly set\"\"\"\n+\n+        body = read_file('data/pagure/pagure_repo_issue_1')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=body,\n+                               status=200,\n+                               )\n+\n+        pagure = Pagure(repository='Project-example', api_token='aaa')\n+        issues = [issues for issues in pagure.fetch(from_date=None, to_date=None)]\n+\n+        issue = issues[0]\n+        self.assertEqual(pagure.metadata_id(issue['data']), issue['search_fields']['item_id'])\n+        self.assertIsNone(issue['search_fields']['namespace'])\n+        self.assertEqual(issue['search_fields']['repo'], 'Project-example')\n+\n+    @httpretty.activate\n+    def test_fetch_issues_reaction(self):\n+        \"\"\"Test the reactions on an issue comment\"\"\"\n+\n+        issue_2 = read_file('data/pagure/pagure_repo_issue_2')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=issue_2,\n+                               status=200,\n+                               )\n+\n+        pagure = Pagure(repository='Project-example')\n+        issues = [issues for issues in pagure.fetch()]\n+\n+        self.assertEqual(len(issues), 2)\n+\n+        issue = issues[0]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['uuid'], '41071b08dd75f34ca92c6d5ecb844e7a3e5939c6')\n+        self.assertEqual(issue['updated_on'], 1583508642.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Project-example')\n+        self.assertEqual(len(issue['data']['comments']), 1)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk08')\n+        self.assertEqual(len(issue['data']['comments'][0]['reactions']), 0)\n+\n+        issue = issues[1]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['uuid'], '7dd3642664c8a7e475814b9037277df775657850')\n+        self.assertEqual(issue['updated_on'], 1583558174.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk0806')\n+        self.assertEqual(len(issue['data']['comments']), 2)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+        self.assertEqual(len(issue['data']['comments'][0]['reactions']), 0)\n+        self.assertEqual(len(issue['data']['comments'][1]['reactions']), 1)\n+        self.assertListEqual(issue['data']['comments'][1]['reactions']['Thumbs up'], ['animeshk0806'])\n+\n+    @httpretty.activate\n+    def test_fetch_more_issues(self):\n+        \"\"\"Test when return two issues\"\"\"\n+\n+        issue_2 = read_file('data/pagure/pagure_repo_issue_2')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=issue_2,\n+                               status=200,\n+                               )\n+\n+        pagure = Pagure(repository='Project-example')\n+        issues = [issues for issues in pagure.fetch()]\n+\n+        self.assertEqual(len(issues), 2)\n+\n+        issue = issues[0]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['uuid'], '41071b08dd75f34ca92c6d5ecb844e7a3e5939c6')\n+        self.assertEqual(issue['updated_on'], 1583508642.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Project-example')\n+        self.assertEqual(len(issue['data']['comments']), 1)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk08')\n+\n+        issue = issues[1]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['uuid'], '7dd3642664c8a7e475814b9037277df775657850')\n+        self.assertEqual(issue['updated_on'], 1583558174.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk0806')\n+        self.assertEqual(len(issue['data']['comments']), 2)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+\n+    @httpretty.activate\n+    def test_fetch_issues_until_date(self):\n+        \"\"\"Test when return issue till a particular date\"\"\"\n+\n+        issue_1 = read_file('data/pagure/pagure_repo_issue_1')\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=issue_1,\n+                               status=200,\n+                               )\n+\n+        to_date = datetime.datetime(2020, 3, 7)\n+        pagure = Pagure(repository='Project-example')\n+        issues = [issues for issues in pagure.fetch(to_date=to_date)]\n+\n+        self.assertEqual(len(issues), 1)\n+\n+        issue = issues[0]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['uuid'], '41071b08dd75f34ca92c6d5ecb844e7a3e5939c6')\n+        self.assertEqual(issue['updated_on'], 1583508642.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk08')\n+        self.assertEqual(len(issue['data']['comments']), 1)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+\n+    @httpretty.activate\n+    def test_fetch_from_date(self):\n+        \"\"\"Test when return from date\"\"\"\n+\n+        body = read_file('data/pagure/pagure_repo_issue_from_2020_03_07')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=body,\n+                               status=200,\n+                               )\n+\n+        from_date = datetime.datetime(2020, 3, 8)\n+        pagure = Pagure(repository='Project-example')\n+        issues = [issues for issues in pagure.fetch(from_date=from_date)]\n+\n+        self.assertEqual(len(issues), 1)\n+        issue = issues[0]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['uuid'], '7dd3642664c8a7e475814b9037277df775657850')\n+        self.assertEqual(issue['updated_on'], 1583558174.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk0806')\n+        self.assertEqual(len(issue['data']['comments']), 2)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+\n+    @httpretty.activate\n+    def test_fetch_issues_namespace(self):\n+        \"\"\"Test issues fetch from a repository within a namespace\"\"\"\n+\n+        issue_1 = read_file('data/pagure/pagure_namespace_issue_2')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_NAMESPACE_ISSUES_URL,\n+                               body=issue_1, status=200,\n+                               )\n+\n+        pagure = Pagure(namespace='Test-group', repository='Project-namespace-example')\n+        issues = [issues for issues in pagure.fetch()]\n+\n+        self.assertEqual(len(issues), 2)\n+\n+        issue = issues[0]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Test-group/Project-namespace-example')\n+        self.assertEqual(issue['uuid'], 'bdf90e94bf3b17ed2f75f5e5187e21a62512ca5a')\n+        self.assertEqual(issue['updated_on'], 1583509042.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Test-group/Project-namespace-example')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk08')\n+        self.assertEqual(len(issue['data']['comments']), 1)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+\n+        issue = issues[1]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Test-group/Project-namespace-example')\n+        self.assertEqual(issue['uuid'], 'eec4d7bf5c3ca405e39f39a8c6faf616fd4fa425')\n+        self.assertEqual(issue['updated_on'], 1583562831.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Test-group/Project-namespace-example')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk0806')\n+        self.assertEqual(len(issue['data']['comments']), 2)\n+        self.assertEqual(issue['data']['comments'][1]['user']['name'], 'animeshk08')\n+\n+    @httpretty.activate\n+    def test_fetch_issues_namespace_reaction(self):\n+        \"\"\"Test reactions on a comment from an issue fetch from a repository within a namespace\"\"\"\n+\n+        issue_1 = read_file('data/pagure/pagure_namespace_issue_2')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_NAMESPACE_ISSUES_URL,\n+                               body=issue_1, status=200,\n+                               )\n+\n+        pagure = Pagure(namespace='Test-group', repository='Project-namespace-example')\n+        issues = [issues for issues in pagure.fetch()]\n+\n+        self.assertEqual(len(issues), 2)\n+\n+        issue = issues[0]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Test-group/Project-namespace-example')\n+        self.assertEqual(issue['uuid'], 'bdf90e94bf3b17ed2f75f5e5187e21a62512ca5a')\n+        self.assertEqual(issue['updated_on'], 1583509042.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Test-group/Project-namespace-example')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk08')\n+        self.assertEqual(len(issue['data']['comments']), 1)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+        self.assertEqual(len(issue['data']['comments'][0]['reactions']), 0)\n+\n+        issue = issues[1]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Test-group/Project-namespace-example')\n+        self.assertEqual(issue['uuid'], 'eec4d7bf5c3ca405e39f39a8c6faf616fd4fa425')\n+        self.assertEqual(issue['updated_on'], 1583562831.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Test-group/Project-namespace-example')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk0806')\n+        self.assertEqual(len(issue['data']['comments']), 2)\n+        self.assertEqual(issue['data']['comments'][1]['user']['name'], 'animeshk08')\n+        self.assertEqual(len(issue['data']['comments'][1]['reactions']), 0)\n+        self.assertEqual(len(issue['data']['comments'][0]['reactions']), 1)\n+        self.assertListEqual(issue['data']['comments'][0]['reactions']['Heart'], ['animeshk0806'])\n+\n+    @httpretty.activate\n+    def test_fetch_empty(self):\n+        \"\"\"Test when return empty\"\"\"\n+\n+        body = \"\"\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=body, status=200,\n+                               )\n+        from_date = datetime.datetime(2016, 1, 1)\n+        pagure = Pagure(repository='Project-example', api_token='aaa')\n+\n+        issues = [issues for issues in pagure.fetch(from_date=from_date)]\n+\n+        self.assertEqual(len(issues), 0)\n+\n+\n+class TestPagureBackendArchive(TestCaseBackendArchive):\n+    \"\"\"Pagure backend tests using an archive\"\"\"\n+\n+    def setUp(self):\n+        super().setUp()\n+        self.backend_write_archive = Pagure(repository='Project-example', api_token='aaa', archive=self.archive)\n+        self.backend_read_archive = Pagure(repository='Project-example', api_token='aaa', archive=self.archive)\n+\n+    @httpretty.activate\n+    def test_fetch_issues_from_archive(self):\n+        \"\"\"Test whether a list of issues is returned from archive\"\"\"\n+\n+        issue_2 = read_file('data/pagure/pagure_repo_issue_1')\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=issue_2,\n+                               status=200,\n+                               )\n+\n+        self._test_fetch_from_archive(from_date=None)\n+\n+    @httpretty.activate\n+    def test_fetch_from_date_from_archive(self):\n+        \"\"\"Test whether a list of issues is returned from archive after a given date\"\"\"\n+\n+        body = read_file('data/pagure/pagure_repo_issue_from_2020_03_07')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=body,\n+                               status=200,\n+                               )\n+        from_date = datetime.datetime(2020, 3, 7)\n+        self._test_fetch_from_archive(from_date=from_date)\n+\n+    @httpretty.activate\n+    def test_fetch_from_empty_archive(self):\n+        \"\"\"Test whether no issues are returned when the archive is empty\"\"\"\n+\n+        body = \"\"\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=body, status=200,\n+                               )\n+\n+        self._test_fetch_from_archive()\n+\n+\n+class TestPagureClient(unittest.TestCase):\n+    \"\"\"Pagure API client tests\"\"\"\n+\n+    @httpretty.activate\n+    def test_init(self):\n+        \"\"\"Test initialisation of client\"\"\"\n+\n+        client = PagureClient(namespace=None, repository=\"Project-example\", token=\"aaa\")\n+\n+        self.assertIsNone(client.namespace)\n+        self.assertEqual(client.repository, \"Project-example\")\n+        self.assertEqual(client.sleep_time, PagureClient.DEFAULT_SLEEP_TIME)\n+        self.assertEqual(client.max_retries, PagureClient.MAX_RETRIES)\n+        self.assertEqual(client.base_url, PAGURE_API_URL)\n+        self.assertTrue(client.ssl_verify)\n+\n+        client = PagureClient(None, \"Project-test-example\", token='aaa',\n+                              sleep_time=20, max_retries=2, max_items=1,\n+                              archive=None, from_archive=False)\n+        self.assertIsNone(client.namespace)\n+        self.assertEqual(client.repository, \"Project-test-example\")\n+        self.assertEqual(client.token, 'aaa')\n+        self.assertEqual(client.sleep_time, 20)\n+        self.assertEqual(client.max_retries, 2)\n+        self.assertEqual(client.max_items, 1)\n+        self.assertIsNone(client.archive)\n+        self.assertFalse(client.from_archive)\n+\n+        client = PagureClient(None, repository='Project-test-example', token=None)\n+        self.assertIsNone(client.token)\n+\n+        # When the repository is within a namespace\n+        client = PagureClient(namespace='Test-group', repository=\"Project-namespace-example\", token=\"aaa\")\n+\n+        self.assertEqual(client.namespace, 'Test-group')\n+        self.assertEqual(client.repository, \"Project-namespace-example\")\n+        self.assertEqual(client.sleep_time, PagureClient.DEFAULT_SLEEP_TIME)\n+        self.assertEqual(client.max_retries, PagureClient.MAX_RETRIES)\n+        self.assertEqual(client.base_url, PAGURE_API_URL)\n+        self.assertTrue(client.ssl_verify)\n+\n+    @httpretty.activate\n+    def test_issues(self):\n+        \"\"\"Test issues API call\"\"\"\n+\n+        issues = read_file('data/pagure/pagure_repo_issue_1')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=issues, status=200,\n+                               )\n+\n+        client = PagureClient(namespace=None, repository='Project-example', token='aaa')\n+        raw_issues = [issues for issues in client.issues()]\n+        self.assertEqual(raw_issues[0], issues)\n+\n+        # Check requests\n+        expected = {\n+            'status': ['all'],\n+            'per_page': ['100'],\n+            'order': ['asc']\n+        }\n+\n+        self.assertDictEqual(httpretty.last_request().querystring, expected)\n+        self.assertEqual(httpretty.last_request().headers[\"Authorization\"], 'token aaa')  # check\n+\n+    @httpretty.activate\n+    def test_namespace_issues(self):\n+        \"\"\"Test fetching issues from a repository within a namespace\"\"\"\n+\n+        issue = read_file('data/pagure/pagure_namespace_issue_2')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_NAMESPACE_ISSUES_URL,\n+                               body=issue, status=200)\n+\n+        client = PagureClient(namespace='Test-group', repository='Project-namespace-example', token=None)\n+\n+        raw_issues = [issues for issues in client.issues()]\n+        self.assertEqual(raw_issues[0], issue)\n+\n+        # Check requests\n+        expected = {\n+            'status': ['all'],\n+            'per_page': ['100'],\n+            'order': ['asc']\n+        }\n+\n+        self.assertDictEqual(httpretty.last_request().querystring, expected)\n+        self.assertIsNone(httpretty.last_request().headers[\"Authorization\"])\n+\n+    @httpretty.activate\n+    def test_get_from_date_issues(self):\n+        \"\"\"Test issues from date API call\"\"\"\n+\n+        issues = read_file('data/pagure/pagure_repo_issue_from_2020_03_07')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=issues,\n+                               status=200,\n+                               )\n+\n+        from_date = datetime.datetime(2020, 3, 7)\n+        client = PagureClient(namespace=None, repository='Project-example', token='aaa')\n+\n+        raw_issues = [issues for issues in client.issues(from_date=from_date)]\n+        self.assertEqual(raw_issues[0], issues)\n+\n+        # Check requests\n+        expected = {\n+            'status': ['all'],\n+            'per_page': ['100'],\n+            'order': ['asc'],\n+            'since': ['2020-03-07 00:00:00']\n+        }\n+        self.assertDictEqual(httpretty.last_request().querystring, expected)\n+        self.assertEqual(httpretty.last_request().headers[\"Authorization\"], \"token aaa\")\n+\n+    @httpretty.activate\n+    def test_get_empty_issues(self):\n+        \"\"\" Test when issue is empty API call \"\"\"\n+\n+        issue = read_file('data/pagure/pagure_empty_request')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=issue, status=200,\n+                               )\n+\n+        client = PagureClient(namespace=None, repository=\"Project-example\", token=\"aaa\")\n+\n+        raw_issues = [issues for issues in client.issues()]\n+        self.assertEqual(raw_issues[0], issue)\n+\n+        # Check requests\n+        expected = {\n+            'status': ['all'],\n+            'per_page': ['100'],\n+            'order': ['asc']\n+        }\n+\n+        self.assertDictEqual(httpretty.last_request().querystring, expected)\n+        self.assertEqual(httpretty.last_request().headers[\"Authorization\"], \"token aaa\")\n+\n+    @httpretty.activate\n+    def test_http_wrong_status(self):\n+        \"\"\"Test if a error is raised when the http status was not 200\"\"\"\n+\n+        issue = \"\"\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=issue,\n+                               status=501,\n+                               )\n+\n+        client = PagureClient(namespace=None, repository=\"Project-example\", token=\"aaa\", sleep_time=1, max_retries=1)\n+\n+        with self.assertRaises(requests.exceptions.HTTPError):\n+            _ = [issues for issues in client.issues()]\n+\n+        # Check requests\n+        expected = {\n+            'status': ['all'],\n+            'per_page': ['100'],\n+            'order': ['asc']\n+        }\n+\n+        self.assertDictEqual(httpretty.last_request().querystring, expected)\n+        self.assertEqual(httpretty.last_request().headers[\"Authorization\"], \"token aaa\")\n+\n+    @httpretty.activate\n+    def test_http_retry_error(self):\n+        \"\"\"Test if a retry error is raised when the http error is one of\n+        the extra_status_forcelist [403, 500, 502, 503]\"\"\"\n+        issue = \"\"\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=issue,\n+                               status=502,\n+                               )\n+\n+        client = PagureClient(namespace=None, repository=\"Project-example\", token=\"aaa\", sleep_time=1,\n+                              max_retries=1)\n+\n+        with self.assertRaises(requests.exceptions.RetryError):\n+            _ = [issues for issues in client.issues()]\n+\n+    @httpretty.activate\n+    def test_get_page_issues(self):\n+        \"\"\"Test issues pagination API call\"\"\"\n+\n+        issue_1 = read_file('data/pagure/pagure_repo_issue_1')\n+        issue_2 = read_file('data/pagure/pagure_repo_only_issue_2')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=issue_1,\n+                               status=200,\n+                               forcing_headers={\n+                                   'Link': '<' + PAGURE_ISSUES_URL + '/?&page=2>; rel=\"next\", <' +\n+                                           PAGURE_ISSUES_URL + '/?&page=3>; rel=\"last\"'\n+                               })\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL + '/?&page=2',\n+                               body=issue_2,\n+                               status=200,\n+                               )\n+\n+        client = PagureClient(namespace=None, repository=\"Project-example\", token=\"aaa\")\n+\n+        issues = [issues for issues in client.issues()]\n+\n+        self.assertEqual(len(issues), 2)\n+        self.assertEqual(issues[0], issue_1)\n+        self.assertEqual(issues[1], issue_2)\n+\n+        # Check requests\n+        expected = {\n+            'status': ['all'],\n+            'page': ['2'],\n+            'per_page': ['100'],\n+            'order': ['asc']\n+        }\n+\n+        self.assertDictEqual(httpretty.last_request().querystring, expected)\n+        self.assertEqual(httpretty.last_request().headers[\"Authorization\"], \"token aaa\")\n+\n+\n+class TestPagureCommand(unittest.TestCase):\n+    \"\"\"PagureCommand unit tests\"\"\"\n+\n+    def test_backend_class(self):\n+        \"\"\"Test if the backend class is Pagure\"\"\"\n+\n+        self.assertIs(PagureCommand.BACKEND, Pagure)\n+\n+    def test_setup_cmd_parser(self):\n+        \"\"\"Test if it parser object is correctly initialized\"\"\"",
        "path": "tests/test_pagure.py",
        "position": null,
        "original_position": 699,
        "commit_id": "70a89aa1dccc5152ed4a52cb4c5e4e327ba3595a",
        "original_commit_id": "bea6bc459c6829df8be725bc163f944501d55107",
        "user": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "small typo: if it",
        "created_at": "2020-03-07T11:48:45Z",
        "updated_at": "2020-03-08T18:21:42Z",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r389249294",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621",
        "author_association": "MEMBER",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389249294"
          },
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r389249294"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389249294/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "user_data": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false,
          "name": "valerio",
          "company": "@Bitergia ",
          "blog": "http://valeriocos.github.io/",
          "location": "Madrid, Spain",
          "email": "valcos@bitergia.com",
          "hireable": true,
          "bio": null,
          "public_repos": 57,
          "public_gists": 28,
          "followers": 34,
          "following": 5,
          "created_at": "2014-01-27T14:30:30Z",
          "updated_at": "2020-03-17T10:02:44Z",
          "organizations": [
            {
              "login": "Bitergia",
              "id": 1918070,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=",
              "url": "https://api.github.com/orgs/Bitergia",
              "repos_url": "https://api.github.com/orgs/Bitergia/repos",
              "events_url": "https://api.github.com/orgs/Bitergia/events",
              "hooks_url": "https://api.github.com/orgs/Bitergia/hooks",
              "issues_url": "https://api.github.com/orgs/Bitergia/issues",
              "members_url": "https://api.github.com/orgs/Bitergia/members{/member}",
              "public_members_url": "https://api.github.com/orgs/Bitergia/public_members{/member}",
              "avatar_url": "https://avatars3.githubusercontent.com/u/1918070?v=4",
              "description": null
            },
            {
              "login": "grimoirelab",
              "id": 16151805,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1",
              "url": "https://api.github.com/orgs/grimoirelab",
              "repos_url": "https://api.github.com/orgs/grimoirelab/repos",
              "events_url": "https://api.github.com/orgs/grimoirelab/events",
              "hooks_url": "https://api.github.com/orgs/grimoirelab/hooks",
              "issues_url": "https://api.github.com/orgs/grimoirelab/issues",
              "members_url": "https://api.github.com/orgs/grimoirelab/members{/member}",
              "public_members_url": "https://api.github.com/orgs/grimoirelab/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/16151805?v=4",
              "description": ""
            },
            {
              "login": "chaoss",
              "id": 29740296,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
              "url": "https://api.github.com/orgs/chaoss",
              "repos_url": "https://api.github.com/orgs/chaoss/repos",
              "events_url": "https://api.github.com/orgs/chaoss/events",
              "hooks_url": "https://api.github.com/orgs/chaoss/hooks",
              "issues_url": "https://api.github.com/orgs/chaoss/issues",
              "members_url": "https://api.github.com/orgs/chaoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/chaoss/public_members{/member}",
              "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
              "description": ""
            }
          ]
        },
        "reactions_data": []
      },
      {
        "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389249332",
        "pull_request_review_id": 370737508,
        "id": 389249332,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0OTMzMg==",
        "diff_hunk": "@@ -0,0 +1,749 @@\n+#!/usr/bin/env python3\n+# -*- coding: utf-8 -*-\n+#\n+# Copyright (C) 2015-2019 Bitergia\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program. If not, see <http://www.gnu.org/licenses/>.\n+#\n+# Authors:\n+#     Animesh Kumar<animuz111@gmail.com>\n+#\n+\n+import datetime\n+import os\n+import unittest.mock\n+import httpretty\n+import pkg_resources\n+import requests\n+\n+pkg_resources.declare_namespace('perceval.backends')\n+\n+from perceval.backend import BackendCommandArgumentParser\n+from perceval.utils import (DEFAULT_DATETIME, DEFAULT_LAST_DATETIME)\n+from perceval.backends.core.pagure import (Pagure,\n+                                           PagureCommand,\n+                                           PagureClient,\n+                                           CATEGORY_ISSUE,\n+                                           MAX_CATEGORY_ITEMS_PER_PAGE)\n+from base import TestCaseBackendArchive\n+\n+PAGURE_API_URL = \"https://pagure.io/api/0\"\n+PAGURE_REPO_URL = PAGURE_API_URL + \"/Project-example\"\n+PAGURE_ISSUES_URL = PAGURE_REPO_URL + \"/issues\"\n+\n+# Repository with issue tracker disabled\n+PAGURE_REPO_URL_DISABLED_URL = PAGURE_API_URL + \"/Project-test-example\"\n+PAGURE_ISSUES_DISABLED_URL = PAGURE_REPO_URL_DISABLED_URL + \"/issues\"\n+\n+PAGURE_NAMESPACE_REPO_URL = PAGURE_API_URL + \"Test-group/Project-namespace-example\"\n+PAGURE_NAMESPACE_ISSUES_URL = PAGURE_NAMESPACE_REPO_URL + \"/issues\"\n+\n+\n+def read_file(filename, mode='r'):\n+    with open(os.path.join(os.path.dirname(os.path.abspath(__file__)), filename), mode) as f:\n+        content = f.read()\n+    return content\n+\n+\n+class TestPagureBackend(unittest.TestCase):\n+    \"\"\" Pagure backend tests \"\"\"\n+\n+    @httpretty.activate\n+    def test_initialization(self):\n+        \"\"\"Test whether attributes are initialized\"\"\"\n+\n+        pagure = Pagure(namespace=None, repository='Project-example', api_token='aaa', tag='test')\n+\n+        # Testing initialization when repository is not within a namespace\n+        self.assertEqual(pagure.repository, 'Project-example')\n+        self.assertIsNone(pagure.namespace)\n+        self.assertEqual(pagure.origin, 'https://pagure.io/Project-example')\n+        self.assertEqual(pagure.tag, 'test')\n+        self.assertEqual(pagure.max_items, MAX_CATEGORY_ITEMS_PER_PAGE)\n+        self.assertEqual(pagure.categories, [CATEGORY_ISSUE])\n+        self.assertTrue(pagure.ssl_verify)\n+\n+        # When tag is empty or None it will be set to the value in origin\n+        pagure = Pagure(namespace=None, repository='Project-example', api_token='aaa', ssl_verify=False)\n+        self.assertEqual(pagure.repository, 'Project-example')\n+        self.assertIsNone(pagure.namespace)\n+        self.assertEqual(pagure.origin, 'https://pagure.io/Project-example')\n+        self.assertEqual(pagure.tag, 'https://pagure.io/Project-example')\n+        self.assertFalse(pagure.ssl_verify)\n+\n+        pagure = Pagure(namespace=None, repository='Project-example', api_token='aaa', tag='')\n+        self.assertEqual(pagure.repository, 'Project-example')\n+        self.assertIsNone(pagure.namespace)\n+        self.assertEqual(pagure.origin, 'https://pagure.io/Project-example')\n+        self.assertEqual(pagure.tag, 'https://pagure.io/Project-example')\n+\n+        # Testing initialization when repository is within a namespace\n+        pagure = Pagure(namespace='Test-group', repository='Project-example-namespace', api_token='', tag='testing')\n+        self.assertEqual(pagure.repository, 'Project-example-namespace')\n+        self.assertEqual(pagure.namespace, 'Test-group')\n+        self.assertEqual(pagure.origin, 'https://pagure.io/Test-group/Project-example-namespace')\n+        self.assertEqual(pagure.tag, 'testing')\n+        self.assertEqual(pagure.max_items, MAX_CATEGORY_ITEMS_PER_PAGE)\n+        self.assertEqual(pagure.categories, [CATEGORY_ISSUE])\n+        self.assertTrue(pagure.ssl_verify)\n+\n+    def test_token_initialization(self):\n+        \"\"\"Test whether token parameter is initialized\"\"\"\n+\n+        # Empty value generates a None API token\n+        pagure = Pagure(repository='Project-test-example', tag='test')\n+        self.assertIsNone(pagure.api_token)\n+\n+        # Initialize the token\n+        pagure = Pagure(repository='Project-test-example', api_token='aaa', tag='test')\n+        self.assertEqual(pagure.api_token, 'aaa')\n+\n+    def test_has_resuming(self):\n+        \"\"\"Test if it returns True when has_resuming is called\"\"\"\n+\n+        self.assertEqual(Pagure.has_resuming(), True)\n+\n+    def test_has_archiving(self):\n+        \"\"\"Test if it returns True when has_archiving is called\"\"\"\n+\n+        self.assertEqual(Pagure.has_archiving(), True)\n+\n+    @httpretty.activate\n+    def test_fetch_issues(self):\n+        \"\"\"Test whether a list of issues is returned\"\"\"\n+\n+        body = read_file('data/pagure/pagure_repo_issue_1')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=body,\n+                               status=200,\n+                               )\n+        pagure = Pagure(repository='Project-example', api_token='aaa')\n+        issues = [issues for issues in pagure.fetch(from_date=None, to_date=None)]\n+\n+        self.assertEqual(len(issues), 1)\n+\n+        issue = issues[0]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['uuid'], '41071b08dd75f34ca92c6d5ecb844e7a3e5939c6')\n+        self.assertEqual(issue['updated_on'], 1583508642.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Project-example')\n+        self.assertEqual(len(issue['data']['comments']), 1)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+\n+    @httpretty.activate\n+    def test_fetch_issues_disabled(self):\n+        \"\"\"Test whether an empty response is returned in case a repository\n+           has disabled issue tracker\n+        \"\"\"\n+        body = read_file('data/pagure/pagure_empty_request')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=body,\n+                               status=404,\n+                               )\n+        pagure = Pagure(repository='Project-test-example')\n+        issues = [issues for issues in pagure.fetch(from_date=None, to_date=None)]\n+        self.assertEqual(len(issues), 0)\n+        self.assertListEqual(issues, [])\n+\n+    @httpretty.activate\n+    def test_search_fields_issues(self):\n+        \"\"\"Test whether the search_fields is properly set\"\"\"\n+\n+        body = read_file('data/pagure/pagure_repo_issue_1')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=body,\n+                               status=200,\n+                               )\n+\n+        pagure = Pagure(repository='Project-example', api_token='aaa')\n+        issues = [issues for issues in pagure.fetch(from_date=None, to_date=None)]\n+\n+        issue = issues[0]\n+        self.assertEqual(pagure.metadata_id(issue['data']), issue['search_fields']['item_id'])\n+        self.assertIsNone(issue['search_fields']['namespace'])\n+        self.assertEqual(issue['search_fields']['repo'], 'Project-example')\n+\n+    @httpretty.activate\n+    def test_fetch_issues_reaction(self):\n+        \"\"\"Test the reactions on an issue comment\"\"\"\n+\n+        issue_2 = read_file('data/pagure/pagure_repo_issue_2')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=issue_2,\n+                               status=200,\n+                               )\n+\n+        pagure = Pagure(repository='Project-example')\n+        issues = [issues for issues in pagure.fetch()]\n+\n+        self.assertEqual(len(issues), 2)\n+\n+        issue = issues[0]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['uuid'], '41071b08dd75f34ca92c6d5ecb844e7a3e5939c6')\n+        self.assertEqual(issue['updated_on'], 1583508642.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Project-example')\n+        self.assertEqual(len(issue['data']['comments']), 1)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk08')\n+        self.assertEqual(len(issue['data']['comments'][0]['reactions']), 0)\n+\n+        issue = issues[1]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['uuid'], '7dd3642664c8a7e475814b9037277df775657850')\n+        self.assertEqual(issue['updated_on'], 1583558174.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk0806')\n+        self.assertEqual(len(issue['data']['comments']), 2)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+        self.assertEqual(len(issue['data']['comments'][0]['reactions']), 0)\n+        self.assertEqual(len(issue['data']['comments'][1]['reactions']), 1)\n+        self.assertListEqual(issue['data']['comments'][1]['reactions']['Thumbs up'], ['animeshk0806'])\n+\n+    @httpretty.activate\n+    def test_fetch_more_issues(self):\n+        \"\"\"Test when return two issues\"\"\"\n+\n+        issue_2 = read_file('data/pagure/pagure_repo_issue_2')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=issue_2,\n+                               status=200,\n+                               )\n+\n+        pagure = Pagure(repository='Project-example')\n+        issues = [issues for issues in pagure.fetch()]\n+\n+        self.assertEqual(len(issues), 2)\n+\n+        issue = issues[0]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['uuid'], '41071b08dd75f34ca92c6d5ecb844e7a3e5939c6')\n+        self.assertEqual(issue['updated_on'], 1583508642.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Project-example')\n+        self.assertEqual(len(issue['data']['comments']), 1)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk08')\n+\n+        issue = issues[1]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['uuid'], '7dd3642664c8a7e475814b9037277df775657850')\n+        self.assertEqual(issue['updated_on'], 1583558174.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk0806')\n+        self.assertEqual(len(issue['data']['comments']), 2)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+\n+    @httpretty.activate\n+    def test_fetch_issues_until_date(self):\n+        \"\"\"Test when return issue till a particular date\"\"\"\n+\n+        issue_1 = read_file('data/pagure/pagure_repo_issue_1')\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=issue_1,\n+                               status=200,\n+                               )\n+\n+        to_date = datetime.datetime(2020, 3, 7)\n+        pagure = Pagure(repository='Project-example')\n+        issues = [issues for issues in pagure.fetch(to_date=to_date)]\n+\n+        self.assertEqual(len(issues), 1)\n+\n+        issue = issues[0]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['uuid'], '41071b08dd75f34ca92c6d5ecb844e7a3e5939c6')\n+        self.assertEqual(issue['updated_on'], 1583508642.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk08')\n+        self.assertEqual(len(issue['data']['comments']), 1)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+\n+    @httpretty.activate\n+    def test_fetch_from_date(self):\n+        \"\"\"Test when return from date\"\"\"\n+\n+        body = read_file('data/pagure/pagure_repo_issue_from_2020_03_07')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=body,\n+                               status=200,\n+                               )\n+\n+        from_date = datetime.datetime(2020, 3, 8)\n+        pagure = Pagure(repository='Project-example')\n+        issues = [issues for issues in pagure.fetch(from_date=from_date)]\n+\n+        self.assertEqual(len(issues), 1)\n+        issue = issues[0]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['uuid'], '7dd3642664c8a7e475814b9037277df775657850')\n+        self.assertEqual(issue['updated_on'], 1583558174.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk0806')\n+        self.assertEqual(len(issue['data']['comments']), 2)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+\n+    @httpretty.activate\n+    def test_fetch_issues_namespace(self):\n+        \"\"\"Test issues fetch from a repository within a namespace\"\"\"\n+\n+        issue_1 = read_file('data/pagure/pagure_namespace_issue_2')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_NAMESPACE_ISSUES_URL,\n+                               body=issue_1, status=200,\n+                               )\n+\n+        pagure = Pagure(namespace='Test-group', repository='Project-namespace-example')\n+        issues = [issues for issues in pagure.fetch()]\n+\n+        self.assertEqual(len(issues), 2)\n+\n+        issue = issues[0]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Test-group/Project-namespace-example')\n+        self.assertEqual(issue['uuid'], 'bdf90e94bf3b17ed2f75f5e5187e21a62512ca5a')\n+        self.assertEqual(issue['updated_on'], 1583509042.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Test-group/Project-namespace-example')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk08')\n+        self.assertEqual(len(issue['data']['comments']), 1)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+\n+        issue = issues[1]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Test-group/Project-namespace-example')\n+        self.assertEqual(issue['uuid'], 'eec4d7bf5c3ca405e39f39a8c6faf616fd4fa425')\n+        self.assertEqual(issue['updated_on'], 1583562831.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Test-group/Project-namespace-example')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk0806')\n+        self.assertEqual(len(issue['data']['comments']), 2)\n+        self.assertEqual(issue['data']['comments'][1]['user']['name'], 'animeshk08')\n+\n+    @httpretty.activate\n+    def test_fetch_issues_namespace_reaction(self):\n+        \"\"\"Test reactions on a comment from an issue fetch from a repository within a namespace\"\"\"\n+\n+        issue_1 = read_file('data/pagure/pagure_namespace_issue_2')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_NAMESPACE_ISSUES_URL,\n+                               body=issue_1, status=200,\n+                               )\n+\n+        pagure = Pagure(namespace='Test-group', repository='Project-namespace-example')\n+        issues = [issues for issues in pagure.fetch()]\n+\n+        self.assertEqual(len(issues), 2)\n+\n+        issue = issues[0]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Test-group/Project-namespace-example')\n+        self.assertEqual(issue['uuid'], 'bdf90e94bf3b17ed2f75f5e5187e21a62512ca5a')\n+        self.assertEqual(issue['updated_on'], 1583509042.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Test-group/Project-namespace-example')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk08')\n+        self.assertEqual(len(issue['data']['comments']), 1)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+        self.assertEqual(len(issue['data']['comments'][0]['reactions']), 0)\n+\n+        issue = issues[1]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Test-group/Project-namespace-example')\n+        self.assertEqual(issue['uuid'], 'eec4d7bf5c3ca405e39f39a8c6faf616fd4fa425')\n+        self.assertEqual(issue['updated_on'], 1583562831.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Test-group/Project-namespace-example')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk0806')\n+        self.assertEqual(len(issue['data']['comments']), 2)\n+        self.assertEqual(issue['data']['comments'][1]['user']['name'], 'animeshk08')\n+        self.assertEqual(len(issue['data']['comments'][1]['reactions']), 0)\n+        self.assertEqual(len(issue['data']['comments'][0]['reactions']), 1)\n+        self.assertListEqual(issue['data']['comments'][0]['reactions']['Heart'], ['animeshk0806'])\n+\n+    @httpretty.activate\n+    def test_fetch_empty(self):\n+        \"\"\"Test when return empty\"\"\"\n+\n+        body = \"\"\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=body, status=200,\n+                               )\n+        from_date = datetime.datetime(2016, 1, 1)\n+        pagure = Pagure(repository='Project-example', api_token='aaa')\n+\n+        issues = [issues for issues in pagure.fetch(from_date=from_date)]\n+\n+        self.assertEqual(len(issues), 0)\n+\n+\n+class TestPagureBackendArchive(TestCaseBackendArchive):\n+    \"\"\"Pagure backend tests using an archive\"\"\"\n+\n+    def setUp(self):\n+        super().setUp()\n+        self.backend_write_archive = Pagure(repository='Project-example', api_token='aaa', archive=self.archive)\n+        self.backend_read_archive = Pagure(repository='Project-example', api_token='aaa', archive=self.archive)\n+\n+    @httpretty.activate\n+    def test_fetch_issues_from_archive(self):\n+        \"\"\"Test whether a list of issues is returned from archive\"\"\"\n+\n+        issue_2 = read_file('data/pagure/pagure_repo_issue_1')\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=issue_2,\n+                               status=200,\n+                               )\n+\n+        self._test_fetch_from_archive(from_date=None)\n+\n+    @httpretty.activate\n+    def test_fetch_from_date_from_archive(self):\n+        \"\"\"Test whether a list of issues is returned from archive after a given date\"\"\"\n+\n+        body = read_file('data/pagure/pagure_repo_issue_from_2020_03_07')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=body,\n+                               status=200,\n+                               )\n+        from_date = datetime.datetime(2020, 3, 7)\n+        self._test_fetch_from_archive(from_date=from_date)\n+\n+    @httpretty.activate\n+    def test_fetch_from_empty_archive(self):\n+        \"\"\"Test whether no issues are returned when the archive is empty\"\"\"\n+\n+        body = \"\"\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=body, status=200,\n+                               )\n+\n+        self._test_fetch_from_archive()\n+\n+\n+class TestPagureClient(unittest.TestCase):\n+    \"\"\"Pagure API client tests\"\"\"\n+\n+    @httpretty.activate\n+    def test_init(self):\n+        \"\"\"Test initialisation of client\"\"\"\n+\n+        client = PagureClient(namespace=None, repository=\"Project-example\", token=\"aaa\")\n+\n+        self.assertIsNone(client.namespace)\n+        self.assertEqual(client.repository, \"Project-example\")\n+        self.assertEqual(client.sleep_time, PagureClient.DEFAULT_SLEEP_TIME)\n+        self.assertEqual(client.max_retries, PagureClient.MAX_RETRIES)\n+        self.assertEqual(client.base_url, PAGURE_API_URL)\n+        self.assertTrue(client.ssl_verify)\n+\n+        client = PagureClient(None, \"Project-test-example\", token='aaa',\n+                              sleep_time=20, max_retries=2, max_items=1,\n+                              archive=None, from_archive=False)\n+        self.assertIsNone(client.namespace)\n+        self.assertEqual(client.repository, \"Project-test-example\")\n+        self.assertEqual(client.token, 'aaa')\n+        self.assertEqual(client.sleep_time, 20)\n+        self.assertEqual(client.max_retries, 2)\n+        self.assertEqual(client.max_items, 1)\n+        self.assertIsNone(client.archive)\n+        self.assertFalse(client.from_archive)\n+\n+        client = PagureClient(None, repository='Project-test-example', token=None)\n+        self.assertIsNone(client.token)\n+\n+        # When the repository is within a namespace\n+        client = PagureClient(namespace='Test-group', repository=\"Project-namespace-example\", token=\"aaa\")\n+\n+        self.assertEqual(client.namespace, 'Test-group')\n+        self.assertEqual(client.repository, \"Project-namespace-example\")\n+        self.assertEqual(client.sleep_time, PagureClient.DEFAULT_SLEEP_TIME)\n+        self.assertEqual(client.max_retries, PagureClient.MAX_RETRIES)\n+        self.assertEqual(client.base_url, PAGURE_API_URL)\n+        self.assertTrue(client.ssl_verify)\n+\n+    @httpretty.activate\n+    def test_issues(self):\n+        \"\"\"Test issues API call\"\"\"\n+\n+        issues = read_file('data/pagure/pagure_repo_issue_1')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=issues, status=200,\n+                               )\n+\n+        client = PagureClient(namespace=None, repository='Project-example', token='aaa')\n+        raw_issues = [issues for issues in client.issues()]\n+        self.assertEqual(raw_issues[0], issues)\n+\n+        # Check requests\n+        expected = {\n+            'status': ['all'],\n+            'per_page': ['100'],\n+            'order': ['asc']\n+        }\n+\n+        self.assertDictEqual(httpretty.last_request().querystring, expected)\n+        self.assertEqual(httpretty.last_request().headers[\"Authorization\"], 'token aaa')  # check\n+\n+    @httpretty.activate\n+    def test_namespace_issues(self):\n+        \"\"\"Test fetching issues from a repository within a namespace\"\"\"\n+\n+        issue = read_file('data/pagure/pagure_namespace_issue_2')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_NAMESPACE_ISSUES_URL,\n+                               body=issue, status=200)\n+\n+        client = PagureClient(namespace='Test-group', repository='Project-namespace-example', token=None)\n+\n+        raw_issues = [issues for issues in client.issues()]\n+        self.assertEqual(raw_issues[0], issue)\n+\n+        # Check requests\n+        expected = {\n+            'status': ['all'],\n+            'per_page': ['100'],\n+            'order': ['asc']\n+        }\n+\n+        self.assertDictEqual(httpretty.last_request().querystring, expected)\n+        self.assertIsNone(httpretty.last_request().headers[\"Authorization\"])\n+\n+    @httpretty.activate\n+    def test_get_from_date_issues(self):\n+        \"\"\"Test issues from date API call\"\"\"\n+\n+        issues = read_file('data/pagure/pagure_repo_issue_from_2020_03_07')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=issues,\n+                               status=200,\n+                               )\n+\n+        from_date = datetime.datetime(2020, 3, 7)\n+        client = PagureClient(namespace=None, repository='Project-example', token='aaa')\n+\n+        raw_issues = [issues for issues in client.issues(from_date=from_date)]\n+        self.assertEqual(raw_issues[0], issues)\n+\n+        # Check requests\n+        expected = {\n+            'status': ['all'],\n+            'per_page': ['100'],\n+            'order': ['asc'],\n+            'since': ['2020-03-07 00:00:00']\n+        }\n+        self.assertDictEqual(httpretty.last_request().querystring, expected)\n+        self.assertEqual(httpretty.last_request().headers[\"Authorization\"], \"token aaa\")\n+\n+    @httpretty.activate\n+    def test_get_empty_issues(self):\n+        \"\"\" Test when issue is empty API call \"\"\"\n+\n+        issue = read_file('data/pagure/pagure_empty_request')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=issue, status=200,\n+                               )\n+\n+        client = PagureClient(namespace=None, repository=\"Project-example\", token=\"aaa\")\n+\n+        raw_issues = [issues for issues in client.issues()]\n+        self.assertEqual(raw_issues[0], issue)\n+\n+        # Check requests\n+        expected = {\n+            'status': ['all'],\n+            'per_page': ['100'],\n+            'order': ['asc']\n+        }\n+\n+        self.assertDictEqual(httpretty.last_request().querystring, expected)\n+        self.assertEqual(httpretty.last_request().headers[\"Authorization\"], \"token aaa\")\n+\n+    @httpretty.activate\n+    def test_http_wrong_status(self):\n+        \"\"\"Test if a error is raised when the http status was not 200\"\"\"\n+\n+        issue = \"\"\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=issue,\n+                               status=501,\n+                               )\n+\n+        client = PagureClient(namespace=None, repository=\"Project-example\", token=\"aaa\", sleep_time=1, max_retries=1)\n+\n+        with self.assertRaises(requests.exceptions.HTTPError):\n+            _ = [issues for issues in client.issues()]\n+\n+        # Check requests\n+        expected = {\n+            'status': ['all'],\n+            'per_page': ['100'],\n+            'order': ['asc']\n+        }\n+\n+        self.assertDictEqual(httpretty.last_request().querystring, expected)\n+        self.assertEqual(httpretty.last_request().headers[\"Authorization\"], \"token aaa\")\n+\n+    @httpretty.activate\n+    def test_http_retry_error(self):\n+        \"\"\"Test if a retry error is raised when the http error is one of\n+        the extra_status_forcelist [403, 500, 502, 503]\"\"\"\n+        issue = \"\"\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=issue,\n+                               status=502,\n+                               )\n+\n+        client = PagureClient(namespace=None, repository=\"Project-example\", token=\"aaa\", sleep_time=1,\n+                              max_retries=1)\n+\n+        with self.assertRaises(requests.exceptions.RetryError):\n+            _ = [issues for issues in client.issues()]\n+\n+    @httpretty.activate\n+    def test_get_page_issues(self):\n+        \"\"\"Test issues pagination API call\"\"\"\n+\n+        issue_1 = read_file('data/pagure/pagure_repo_issue_1')\n+        issue_2 = read_file('data/pagure/pagure_repo_only_issue_2')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=issue_1,\n+                               status=200,\n+                               forcing_headers={\n+                                   'Link': '<' + PAGURE_ISSUES_URL + '/?&page=2>; rel=\"next\", <' +\n+                                           PAGURE_ISSUES_URL + '/?&page=3>; rel=\"last\"'\n+                               })\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL + '/?&page=2',\n+                               body=issue_2,\n+                               status=200,\n+                               )\n+\n+        client = PagureClient(namespace=None, repository=\"Project-example\", token=\"aaa\")\n+\n+        issues = [issues for issues in client.issues()]\n+\n+        self.assertEqual(len(issues), 2)\n+        self.assertEqual(issues[0], issue_1)\n+        self.assertEqual(issues[1], issue_2)\n+\n+        # Check requests\n+        expected = {\n+            'status': ['all'],\n+            'page': ['2'],\n+            'per_page': ['100'],\n+            'order': ['asc']\n+        }\n+\n+        self.assertDictEqual(httpretty.last_request().querystring, expected)\n+        self.assertEqual(httpretty.last_request().headers[\"Authorization\"], \"token aaa\")\n+\n+\n+class TestPagureCommand(unittest.TestCase):\n+    \"\"\"PagureCommand unit tests\"\"\"\n+\n+    def test_backend_class(self):\n+        \"\"\"Test if the backend class is Pagure\"\"\"\n+\n+        self.assertIs(PagureCommand.BACKEND, Pagure)\n+\n+    def test_setup_cmd_parser(self):\n+        \"\"\"Test if it parser object is correctly initialized\"\"\"\n+\n+        parser = PagureCommand.setup_cmd_parser()\n+        self.assertIsInstance(parser, BackendCommandArgumentParser)\n+        self.assertEqual(parser._backend, Pagure)",
        "path": "tests/test_pagure.py",
        "position": 644,
        "original_position": 703,
        "commit_id": "70a89aa1dccc5152ed4a52cb4c5e4e327ba3595a",
        "original_commit_id": "bea6bc459c6829df8be725bc163f944501d55107",
        "user": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "One of the test could not contain the token, the from-date and to-date",
        "created_at": "2020-03-07T11:49:36Z",
        "updated_at": "2020-03-08T18:21:42Z",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r389249332",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621",
        "author_association": "MEMBER",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389249332"
          },
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r389249332"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389249332/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "user_data": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false,
          "name": "valerio",
          "company": "@Bitergia ",
          "blog": "http://valeriocos.github.io/",
          "location": "Madrid, Spain",
          "email": "valcos@bitergia.com",
          "hireable": true,
          "bio": null,
          "public_repos": 57,
          "public_gists": 28,
          "followers": 34,
          "following": 5,
          "created_at": "2014-01-27T14:30:30Z",
          "updated_at": "2020-03-17T10:02:44Z",
          "organizations": [
            {
              "login": "Bitergia",
              "id": 1918070,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=",
              "url": "https://api.github.com/orgs/Bitergia",
              "repos_url": "https://api.github.com/orgs/Bitergia/repos",
              "events_url": "https://api.github.com/orgs/Bitergia/events",
              "hooks_url": "https://api.github.com/orgs/Bitergia/hooks",
              "issues_url": "https://api.github.com/orgs/Bitergia/issues",
              "members_url": "https://api.github.com/orgs/Bitergia/members{/member}",
              "public_members_url": "https://api.github.com/orgs/Bitergia/public_members{/member}",
              "avatar_url": "https://avatars3.githubusercontent.com/u/1918070?v=4",
              "description": null
            },
            {
              "login": "grimoirelab",
              "id": 16151805,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1",
              "url": "https://api.github.com/orgs/grimoirelab",
              "repos_url": "https://api.github.com/orgs/grimoirelab/repos",
              "events_url": "https://api.github.com/orgs/grimoirelab/events",
              "hooks_url": "https://api.github.com/orgs/grimoirelab/hooks",
              "issues_url": "https://api.github.com/orgs/grimoirelab/issues",
              "members_url": "https://api.github.com/orgs/grimoirelab/members{/member}",
              "public_members_url": "https://api.github.com/orgs/grimoirelab/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/16151805?v=4",
              "description": ""
            },
            {
              "login": "chaoss",
              "id": 29740296,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
              "url": "https://api.github.com/orgs/chaoss",
              "repos_url": "https://api.github.com/orgs/chaoss/repos",
              "events_url": "https://api.github.com/orgs/chaoss/events",
              "hooks_url": "https://api.github.com/orgs/chaoss/hooks",
              "issues_url": "https://api.github.com/orgs/chaoss/issues",
              "members_url": "https://api.github.com/orgs/chaoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/chaoss/public_members{/member}",
              "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
              "description": ""
            }
          ]
        },
        "reactions_data": []
      },
      {
        "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389375151",
        "pull_request_review_id": 370834781,
        "id": 389375151,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM3NTE1MQ==",
        "diff_hunk": "@@ -0,0 +1,418 @@\n+# -*- coding: utf-8 -*-\n+#\n+# Copyright (C) 2015-2020 Bitergia\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program. If not, see <http://www.gnu.org/licenses/>.\n+#\n+# Authors:\n+#     Animesh Kumar <animuz111@gmail.com>\n+#\n+\n+import json\n+import logging\n+import requests\n+from grimoirelab_toolkit.datetime import (str_to_datetime)\n+from grimoirelab_toolkit.uris import urijoin\n+\n+from ...backend import (Backend,\n+                        BackendCommand,\n+                        BackendCommandArgumentParser,\n+                        DEFAULT_SEARCH_FIELD)\n+from ...client import HttpClient\n+from ...utils import DEFAULT_DATETIME, DEFAULT_LAST_DATETIME\n+from datetime import datetime\n+\n+CATEGORY_ISSUE = \"issue\"\n+\n+PAGURE_URL = \"https://pagure.io/\"\n+PAGURE_API_URL = \"https://pagure.io/api/0\"\n+\n+MAX_CATEGORY_ITEMS_PER_PAGE = 100\n+PER_PAGE = 100\n+\n+# Default sleep time and retries to deal with connection/server problems\n+DEFAULT_SLEEP_TIME = 1\n+MAX_RETRIES = 5\n+\n+logger = logging.getLogger(__name__)\n+\n+\n+class Pagure(Backend):\n+    \"\"\"Pagure backend for Perceval.\n+\n+    This class allows the fetch the issues stored in a Pagure\n+    repository. Note that api token is needed to perform",
        "path": "perceval/backends/core/pagure.py",
        "position": null,
        "original_position": 55,
        "commit_id": "70a89aa1dccc5152ed4a52cb4c5e4e327ba3595a",
        "original_commit_id": "bc85386c68f52f62fcf7b392a494aca072b940d2",
        "user": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "Is the sentence `Note that ...` true? Which API calls can be done without/with authentication?",
        "created_at": "2020-03-08T14:37:20Z",
        "updated_at": "2020-03-08T18:21:42Z",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r389375151",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621",
        "author_association": "MEMBER",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389375151"
          },
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r389375151"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389375151/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "user_data": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false,
          "name": "valerio",
          "company": "@Bitergia ",
          "blog": "http://valeriocos.github.io/",
          "location": "Madrid, Spain",
          "email": "valcos@bitergia.com",
          "hireable": true,
          "bio": null,
          "public_repos": 57,
          "public_gists": 28,
          "followers": 34,
          "following": 5,
          "created_at": "2014-01-27T14:30:30Z",
          "updated_at": "2020-03-17T10:02:44Z",
          "organizations": [
            {
              "login": "Bitergia",
              "id": 1918070,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=",
              "url": "https://api.github.com/orgs/Bitergia",
              "repos_url": "https://api.github.com/orgs/Bitergia/repos",
              "events_url": "https://api.github.com/orgs/Bitergia/events",
              "hooks_url": "https://api.github.com/orgs/Bitergia/hooks",
              "issues_url": "https://api.github.com/orgs/Bitergia/issues",
              "members_url": "https://api.github.com/orgs/Bitergia/members{/member}",
              "public_members_url": "https://api.github.com/orgs/Bitergia/public_members{/member}",
              "avatar_url": "https://avatars3.githubusercontent.com/u/1918070?v=4",
              "description": null
            },
            {
              "login": "grimoirelab",
              "id": 16151805,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1",
              "url": "https://api.github.com/orgs/grimoirelab",
              "repos_url": "https://api.github.com/orgs/grimoirelab/repos",
              "events_url": "https://api.github.com/orgs/grimoirelab/events",
              "hooks_url": "https://api.github.com/orgs/grimoirelab/hooks",
              "issues_url": "https://api.github.com/orgs/grimoirelab/issues",
              "members_url": "https://api.github.com/orgs/grimoirelab/members{/member}",
              "public_members_url": "https://api.github.com/orgs/grimoirelab/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/16151805?v=4",
              "description": ""
            },
            {
              "login": "chaoss",
              "id": 29740296,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
              "url": "https://api.github.com/orgs/chaoss",
              "repos_url": "https://api.github.com/orgs/chaoss/repos",
              "events_url": "https://api.github.com/orgs/chaoss/events",
              "hooks_url": "https://api.github.com/orgs/chaoss/hooks",
              "issues_url": "https://api.github.com/orgs/chaoss/issues",
              "members_url": "https://api.github.com/orgs/chaoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/chaoss/public_members{/member}",
              "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
              "description": ""
            }
          ]
        },
        "reactions_data": []
      },
      {
        "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389375174",
        "pull_request_review_id": 370834781,
        "id": 389375174,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM3NTE3NA==",
        "diff_hunk": "@@ -0,0 +1,418 @@\n+# -*- coding: utf-8 -*-\n+#\n+# Copyright (C) 2015-2020 Bitergia\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program. If not, see <http://www.gnu.org/licenses/>.\n+#\n+# Authors:\n+#     Animesh Kumar <animuz111@gmail.com>\n+#\n+\n+import json\n+import logging\n+import requests\n+from grimoirelab_toolkit.datetime import (str_to_datetime)\n+from grimoirelab_toolkit.uris import urijoin\n+\n+from ...backend import (Backend,\n+                        BackendCommand,\n+                        BackendCommandArgumentParser,\n+                        DEFAULT_SEARCH_FIELD)\n+from ...client import HttpClient\n+from ...utils import DEFAULT_DATETIME, DEFAULT_LAST_DATETIME\n+from datetime import datetime\n+\n+CATEGORY_ISSUE = \"issue\"\n+\n+PAGURE_URL = \"https://pagure.io/\"\n+PAGURE_API_URL = \"https://pagure.io/api/0\"\n+\n+MAX_CATEGORY_ITEMS_PER_PAGE = 100\n+PER_PAGE = 100\n+\n+# Default sleep time and retries to deal with connection/server problems\n+DEFAULT_SLEEP_TIME = 1\n+MAX_RETRIES = 5\n+\n+logger = logging.getLogger(__name__)\n+\n+\n+class Pagure(Backend):\n+    \"\"\"Pagure backend for Perceval.\n+\n+    This class allows the fetch the issues stored in a Pagure\n+    repository. Note that api token is needed to perform\n+    certain API calls\n+\n+    :param namespace: Pagure namespace\n+    :param repository: Pagure repository; in case the repository is within a namespace",
        "path": "perceval/backends/core/pagure.py",
        "position": null,
        "original_position": 59,
        "commit_id": "70a89aa1dccc5152ed4a52cb4c5e4e327ba3595a",
        "original_commit_id": "bc85386c68f52f62fcf7b392a494aca072b940d2",
        "user": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "Is the part after `;` needed?",
        "created_at": "2020-03-08T14:37:49Z",
        "updated_at": "2020-03-08T18:21:42Z",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r389375174",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621",
        "author_association": "MEMBER",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389375174"
          },
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r389375174"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389375174/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "user_data": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false,
          "name": "valerio",
          "company": "@Bitergia ",
          "blog": "http://valeriocos.github.io/",
          "location": "Madrid, Spain",
          "email": "valcos@bitergia.com",
          "hireable": true,
          "bio": null,
          "public_repos": 57,
          "public_gists": 28,
          "followers": 34,
          "following": 5,
          "created_at": "2014-01-27T14:30:30Z",
          "updated_at": "2020-03-17T10:02:44Z",
          "organizations": [
            {
              "login": "Bitergia",
              "id": 1918070,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=",
              "url": "https://api.github.com/orgs/Bitergia",
              "repos_url": "https://api.github.com/orgs/Bitergia/repos",
              "events_url": "https://api.github.com/orgs/Bitergia/events",
              "hooks_url": "https://api.github.com/orgs/Bitergia/hooks",
              "issues_url": "https://api.github.com/orgs/Bitergia/issues",
              "members_url": "https://api.github.com/orgs/Bitergia/members{/member}",
              "public_members_url": "https://api.github.com/orgs/Bitergia/public_members{/member}",
              "avatar_url": "https://avatars3.githubusercontent.com/u/1918070?v=4",
              "description": null
            },
            {
              "login": "grimoirelab",
              "id": 16151805,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1",
              "url": "https://api.github.com/orgs/grimoirelab",
              "repos_url": "https://api.github.com/orgs/grimoirelab/repos",
              "events_url": "https://api.github.com/orgs/grimoirelab/events",
              "hooks_url": "https://api.github.com/orgs/grimoirelab/hooks",
              "issues_url": "https://api.github.com/orgs/grimoirelab/issues",
              "members_url": "https://api.github.com/orgs/grimoirelab/members{/member}",
              "public_members_url": "https://api.github.com/orgs/grimoirelab/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/16151805?v=4",
              "description": ""
            },
            {
              "login": "chaoss",
              "id": 29740296,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
              "url": "https://api.github.com/orgs/chaoss",
              "repos_url": "https://api.github.com/orgs/chaoss/repos",
              "events_url": "https://api.github.com/orgs/chaoss/events",
              "hooks_url": "https://api.github.com/orgs/chaoss/hooks",
              "issues_url": "https://api.github.com/orgs/chaoss/issues",
              "members_url": "https://api.github.com/orgs/chaoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/chaoss/public_members{/member}",
              "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
              "description": ""
            }
          ]
        },
        "reactions_data": []
      },
      {
        "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389375277",
        "pull_request_review_id": 370834781,
        "id": 389375277,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM3NTI3Nw==",
        "diff_hunk": "@@ -0,0 +1,418 @@\n+# -*- coding: utf-8 -*-\n+#\n+# Copyright (C) 2015-2020 Bitergia\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program. If not, see <http://www.gnu.org/licenses/>.\n+#\n+# Authors:\n+#     Animesh Kumar <animuz111@gmail.com>\n+#\n+\n+import json\n+import logging\n+import requests\n+from grimoirelab_toolkit.datetime import (str_to_datetime)\n+from grimoirelab_toolkit.uris import urijoin\n+\n+from ...backend import (Backend,\n+                        BackendCommand,\n+                        BackendCommandArgumentParser,\n+                        DEFAULT_SEARCH_FIELD)\n+from ...client import HttpClient\n+from ...utils import DEFAULT_DATETIME, DEFAULT_LAST_DATETIME\n+from datetime import datetime\n+\n+CATEGORY_ISSUE = \"issue\"\n+\n+PAGURE_URL = \"https://pagure.io/\"\n+PAGURE_API_URL = \"https://pagure.io/api/0\"\n+\n+MAX_CATEGORY_ITEMS_PER_PAGE = 100\n+PER_PAGE = 100\n+\n+# Default sleep time and retries to deal with connection/server problems\n+DEFAULT_SLEEP_TIME = 1\n+MAX_RETRIES = 5\n+\n+logger = logging.getLogger(__name__)\n+\n+\n+class Pagure(Backend):\n+    \"\"\"Pagure backend for Perceval.\n+\n+    This class allows the fetch the issues stored in a Pagure\n+    repository. Note that api token is needed to perform\n+    certain API calls\n+\n+    :param namespace: Pagure namespace\n+    :param repository: Pagure repository; in case the repository is within a namespace\n+    :param api_token: Pagure API token to access the API\n+    :param tag: label used to mark the data\n+    :param archive: archive to store/retrieve items\n+    :param max_retries: number of max retries to a data source\n+        before raising a RetryError exception\n+    :param max_items: max number of category items (e.g., issues,\n+        pull requests) per query\n+    :param sleep_time: time to sleep in case\n+        of connection problems\n+    :param ssl_verify: enable/disable SSL verification\n+    \"\"\"\n+    version = '0.1.0'\n+\n+    CATEGORIES = [CATEGORY_ISSUE]\n+\n+    def __init__(self, namespace=None, repository=None,\n+                 api_token=None,\n+                 tag=None, archive=None,\n+                 max_retries=MAX_RETRIES, sleep_time=DEFAULT_SLEEP_TIME,\n+                 max_items=MAX_CATEGORY_ITEMS_PER_PAGE, ssl_verify=True):\n+        origin = PAGURE_URL\n+\n+        # In case the repository is under a namespace add the namespace as well to the origin\n+        origin = urijoin(origin, namespace, repository) if namespace else urijoin(origin, repository)\n+\n+        super().__init__(origin, tag=tag, archive=archive, ssl_verify=ssl_verify)\n+\n+        self.namespace = namespace\n+        self.repository = repository\n+        self.api_token = api_token\n+        self.max_retries = max_retries\n+        self.sleep_time = sleep_time\n+        self.max_items = max_items\n+\n+        self.client = None\n+\n+    def search_fields(self, item):\n+        \"\"\"Add search fields to an item.\n+\n+        It adds the values of `metadata_id` plus the `namespace` and `repo`.\n+\n+        :param item: the item to extract the search fields values\n+\n+        :returns: a dict of search fields\n+        \"\"\"\n+        search_fields = {\n+            DEFAULT_SEARCH_FIELD: self.metadata_id(item),\n+            'namespace': self.namespace,\n+            'repo': self.repository\n+        }\n+\n+        return search_fields\n+\n+    def fetch(self, category=CATEGORY_ISSUE, from_date=DEFAULT_DATETIME, to_date=DEFAULT_LAST_DATETIME,\n+              filter_classified=False):\n+        \"\"\"Fetch the issues from the repository.\n+\n+        The method retrieves, from a Pagure repository,\n+        the issues updated since/until the given date.\n+\n+        :param category: the category of items to fetch\n+        :param from_date: obtain issues updated since this date\n+        :param to_date: obtain issues until a until a specific date (included)\n+        :param filter_classified: remove classified fields from the resulting items\n+\n+        :returns: a generator of issues\n+        \"\"\"\n+        if not from_date:\n+            from_date = DEFAULT_DATETIME\n+\n+        if not to_date:\n+            to_date = DEFAULT_LAST_DATETIME\n+\n+        from_date = from_date.strftime('%Y-%m-%d')\n+        to_date = to_date.strftime('%Y-%m-%d')\n+        kwargs = {\n+            'from_date': from_date,\n+            'to_date': to_date\n+        }\n+        items = super().fetch(category,\n+                              filter_classified=filter_classified,\n+                              **kwargs)\n+\n+        return items\n+\n+    def fetch_items(self, category, **kwargs):\n+        \"\"\"Fetch the items (issues)\n+\n+        :param category: the category of items to fetch\n+        :param kwargs: backend arguments\n+\n+        :returns: a generator of items\n+        \"\"\"\n+        from_date = kwargs['from_date']\n+        to_date = kwargs['to_date']\n+        items = self.__fetch_issues(from_date, to_date)\n+        return items\n+\n+    @classmethod\n+    def has_archiving(cls):\n+        \"\"\"Returns whether it supports archiving items on the fetch process.\n+\n+        :returns: this backend supports items archive\n+        \"\"\"\n+        return True\n+\n+    @classmethod\n+    def has_resuming(cls):\n+        \"\"\"Returns whether it supports to resume the fetch process.\n+\n+        :returns: this backend supports items resuming\n+        \"\"\"\n+        return True\n+\n+    @staticmethod\n+    def metadata_id(item):\n+        \"\"\"Extracts the identifier from a Pagure item.\"\"\"\n+\n+        return str(item['id'])\n+\n+    @staticmethod\n+    def metadata_updated_on(item):\n+        \"\"\"Extracts the update time from a Pagure item.\n+\n+        The timestamp used is extracted from 'last_updated' field.\n+        This date is converted to UNIX timestamp format. As Pagure\n+        dates are in timestamp format the conversion is straightforward.\n+\n+        :param item: item generated by the backend\n+\n+        :returns: a UNIX timestamp\n+        \"\"\"\n+        ts = int(item['last_updated'])\n+        ts = datetime.fromtimestamp(ts).timestamp()\n+\n+        return ts\n+\n+    @staticmethod\n+    def metadata_category(item):\n+        \"\"\"Extracts the category from a Pagure item.\n+\n+        This backend generates one type of item which is\n+        'issue'.\n+        \"\"\"\n+        category = CATEGORY_ISSUE\n+\n+        return category\n+\n+    def _init_client(self, from_archive=False):\n+        \"\"\"Init client\"\"\"\n+\n+        return PagureClient(self.namespace, self.repository, self.api_token,\n+                            self.sleep_time, self.max_retries, self.max_items,\n+                            self.archive, from_archive, self.ssl_verify)\n+\n+    def __fetch_issues(self, from_date, to_date):\n+        \"\"\"Fetch the issues\n+        :param from_date: starting date from which issues are fetched\n+        :param to_date: ending date till which issues are fetched\n+\n+        :returns: an issue object\n+        \"\"\"\n+        issues_groups = self.client.issues(from_date=from_date)\n+\n+        for raw_issues in issues_groups:\n+            issues = json.loads(raw_issues)\n+            issues = issues['issues']\n+            for issue in issues:\n+\n+                if int(issue['last_updated']) > str_to_datetime(to_date).timestamp():\n+                    return\n+\n+                yield issue\n+\n+\n+class PagureClient(HttpClient):\n+    \"\"\"Client for retrieving information from Pagure API\n+\n+    :param namespace: Pagure namespace\n+    :param repository: Pagure repository; in case the repository is within a namespace",
        "path": "perceval/backends/core/pagure.py",
        "position": null,
        "original_position": 239,
        "commit_id": "70a89aa1dccc5152ed4a52cb4c5e4e327ba3595a",
        "original_commit_id": "bc85386c68f52f62fcf7b392a494aca072b940d2",
        "user": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "is the part after `;` needed?",
        "created_at": "2020-03-08T14:38:45Z",
        "updated_at": "2020-03-08T18:21:42Z",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r389375277",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621",
        "author_association": "MEMBER",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389375277"
          },
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r389375277"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389375277/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "user_data": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false,
          "name": "valerio",
          "company": "@Bitergia ",
          "blog": "http://valeriocos.github.io/",
          "location": "Madrid, Spain",
          "email": "valcos@bitergia.com",
          "hireable": true,
          "bio": null,
          "public_repos": 57,
          "public_gists": 28,
          "followers": 34,
          "following": 5,
          "created_at": "2014-01-27T14:30:30Z",
          "updated_at": "2020-03-17T10:02:44Z",
          "organizations": [
            {
              "login": "Bitergia",
              "id": 1918070,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=",
              "url": "https://api.github.com/orgs/Bitergia",
              "repos_url": "https://api.github.com/orgs/Bitergia/repos",
              "events_url": "https://api.github.com/orgs/Bitergia/events",
              "hooks_url": "https://api.github.com/orgs/Bitergia/hooks",
              "issues_url": "https://api.github.com/orgs/Bitergia/issues",
              "members_url": "https://api.github.com/orgs/Bitergia/members{/member}",
              "public_members_url": "https://api.github.com/orgs/Bitergia/public_members{/member}",
              "avatar_url": "https://avatars3.githubusercontent.com/u/1918070?v=4",
              "description": null
            },
            {
              "login": "grimoirelab",
              "id": 16151805,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1",
              "url": "https://api.github.com/orgs/grimoirelab",
              "repos_url": "https://api.github.com/orgs/grimoirelab/repos",
              "events_url": "https://api.github.com/orgs/grimoirelab/events",
              "hooks_url": "https://api.github.com/orgs/grimoirelab/hooks",
              "issues_url": "https://api.github.com/orgs/grimoirelab/issues",
              "members_url": "https://api.github.com/orgs/grimoirelab/members{/member}",
              "public_members_url": "https://api.github.com/orgs/grimoirelab/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/16151805?v=4",
              "description": ""
            },
            {
              "login": "chaoss",
              "id": 29740296,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
              "url": "https://api.github.com/orgs/chaoss",
              "repos_url": "https://api.github.com/orgs/chaoss/repos",
              "events_url": "https://api.github.com/orgs/chaoss/events",
              "hooks_url": "https://api.github.com/orgs/chaoss/hooks",
              "issues_url": "https://api.github.com/orgs/chaoss/issues",
              "members_url": "https://api.github.com/orgs/chaoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/chaoss/public_members{/member}",
              "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
              "description": ""
            }
          ]
        },
        "reactions_data": []
      },
      {
        "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389375307",
        "pull_request_review_id": 370834781,
        "id": 389375307,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM3NTMwNw==",
        "diff_hunk": "@@ -0,0 +1,418 @@\n+# -*- coding: utf-8 -*-\n+#\n+# Copyright (C) 2015-2020 Bitergia\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program. If not, see <http://www.gnu.org/licenses/>.\n+#\n+# Authors:\n+#     Animesh Kumar <animuz111@gmail.com>\n+#\n+\n+import json\n+import logging\n+import requests\n+from grimoirelab_toolkit.datetime import (str_to_datetime)\n+from grimoirelab_toolkit.uris import urijoin\n+\n+from ...backend import (Backend,\n+                        BackendCommand,\n+                        BackendCommandArgumentParser,\n+                        DEFAULT_SEARCH_FIELD)\n+from ...client import HttpClient\n+from ...utils import DEFAULT_DATETIME, DEFAULT_LAST_DATETIME\n+from datetime import datetime\n+\n+CATEGORY_ISSUE = \"issue\"\n+\n+PAGURE_URL = \"https://pagure.io/\"\n+PAGURE_API_URL = \"https://pagure.io/api/0\"\n+\n+MAX_CATEGORY_ITEMS_PER_PAGE = 100\n+PER_PAGE = 100\n+\n+# Default sleep time and retries to deal with connection/server problems\n+DEFAULT_SLEEP_TIME = 1\n+MAX_RETRIES = 5\n+\n+logger = logging.getLogger(__name__)\n+\n+\n+class Pagure(Backend):\n+    \"\"\"Pagure backend for Perceval.\n+\n+    This class allows the fetch the issues stored in a Pagure\n+    repository. Note that api token is needed to perform\n+    certain API calls\n+\n+    :param namespace: Pagure namespace\n+    :param repository: Pagure repository; in case the repository is within a namespace\n+    :param api_token: Pagure API token to access the API\n+    :param tag: label used to mark the data\n+    :param archive: archive to store/retrieve items\n+    :param max_retries: number of max retries to a data source\n+        before raising a RetryError exception\n+    :param max_items: max number of category items (e.g., issues,\n+        pull requests) per query\n+    :param sleep_time: time to sleep in case\n+        of connection problems\n+    :param ssl_verify: enable/disable SSL verification\n+    \"\"\"\n+    version = '0.1.0'\n+\n+    CATEGORIES = [CATEGORY_ISSUE]\n+\n+    def __init__(self, namespace=None, repository=None,\n+                 api_token=None,\n+                 tag=None, archive=None,\n+                 max_retries=MAX_RETRIES, sleep_time=DEFAULT_SLEEP_TIME,\n+                 max_items=MAX_CATEGORY_ITEMS_PER_PAGE, ssl_verify=True):\n+        origin = PAGURE_URL\n+\n+        # In case the repository is under a namespace add the namespace as well to the origin\n+        origin = urijoin(origin, namespace, repository) if namespace else urijoin(origin, repository)\n+\n+        super().__init__(origin, tag=tag, archive=archive, ssl_verify=ssl_verify)\n+\n+        self.namespace = namespace\n+        self.repository = repository\n+        self.api_token = api_token\n+        self.max_retries = max_retries\n+        self.sleep_time = sleep_time\n+        self.max_items = max_items\n+\n+        self.client = None\n+\n+    def search_fields(self, item):\n+        \"\"\"Add search fields to an item.\n+\n+        It adds the values of `metadata_id` plus the `namespace` and `repo`.\n+\n+        :param item: the item to extract the search fields values\n+\n+        :returns: a dict of search fields\n+        \"\"\"\n+        search_fields = {\n+            DEFAULT_SEARCH_FIELD: self.metadata_id(item),\n+            'namespace': self.namespace,\n+            'repo': self.repository\n+        }\n+\n+        return search_fields\n+\n+    def fetch(self, category=CATEGORY_ISSUE, from_date=DEFAULT_DATETIME, to_date=DEFAULT_LAST_DATETIME,\n+              filter_classified=False):\n+        \"\"\"Fetch the issues from the repository.\n+\n+        The method retrieves, from a Pagure repository,\n+        the issues updated since/until the given date.\n+\n+        :param category: the category of items to fetch\n+        :param from_date: obtain issues updated since this date\n+        :param to_date: obtain issues until a until a specific date (included)\n+        :param filter_classified: remove classified fields from the resulting items\n+\n+        :returns: a generator of issues\n+        \"\"\"\n+        if not from_date:\n+            from_date = DEFAULT_DATETIME\n+\n+        if not to_date:\n+            to_date = DEFAULT_LAST_DATETIME\n+\n+        from_date = from_date.strftime('%Y-%m-%d')\n+        to_date = to_date.strftime('%Y-%m-%d')\n+        kwargs = {\n+            'from_date': from_date,\n+            'to_date': to_date\n+        }\n+        items = super().fetch(category,\n+                              filter_classified=filter_classified,\n+                              **kwargs)\n+\n+        return items\n+\n+    def fetch_items(self, category, **kwargs):\n+        \"\"\"Fetch the items (issues)\n+\n+        :param category: the category of items to fetch\n+        :param kwargs: backend arguments\n+\n+        :returns: a generator of items\n+        \"\"\"\n+        from_date = kwargs['from_date']\n+        to_date = kwargs['to_date']\n+        items = self.__fetch_issues(from_date, to_date)\n+        return items\n+\n+    @classmethod\n+    def has_archiving(cls):\n+        \"\"\"Returns whether it supports archiving items on the fetch process.\n+\n+        :returns: this backend supports items archive\n+        \"\"\"\n+        return True\n+\n+    @classmethod\n+    def has_resuming(cls):\n+        \"\"\"Returns whether it supports to resume the fetch process.\n+\n+        :returns: this backend supports items resuming\n+        \"\"\"\n+        return True\n+\n+    @staticmethod\n+    def metadata_id(item):\n+        \"\"\"Extracts the identifier from a Pagure item.\"\"\"\n+\n+        return str(item['id'])\n+\n+    @staticmethod\n+    def metadata_updated_on(item):\n+        \"\"\"Extracts the update time from a Pagure item.\n+\n+        The timestamp used is extracted from 'last_updated' field.\n+        This date is converted to UNIX timestamp format. As Pagure\n+        dates are in timestamp format the conversion is straightforward.\n+\n+        :param item: item generated by the backend\n+\n+        :returns: a UNIX timestamp\n+        \"\"\"\n+        ts = int(item['last_updated'])\n+        ts = datetime.fromtimestamp(ts).timestamp()\n+\n+        return ts\n+\n+    @staticmethod\n+    def metadata_category(item):\n+        \"\"\"Extracts the category from a Pagure item.\n+\n+        This backend generates one type of item which is\n+        'issue'.\n+        \"\"\"\n+        category = CATEGORY_ISSUE\n+\n+        return category\n+\n+    def _init_client(self, from_archive=False):\n+        \"\"\"Init client\"\"\"\n+\n+        return PagureClient(self.namespace, self.repository, self.api_token,\n+                            self.sleep_time, self.max_retries, self.max_items,\n+                            self.archive, from_archive, self.ssl_verify)\n+\n+    def __fetch_issues(self, from_date, to_date):\n+        \"\"\"Fetch the issues\n+        :param from_date: starting date from which issues are fetched\n+        :param to_date: ending date till which issues are fetched\n+\n+        :returns: an issue object\n+        \"\"\"\n+        issues_groups = self.client.issues(from_date=from_date)\n+\n+        for raw_issues in issues_groups:\n+            issues = json.loads(raw_issues)\n+            issues = issues['issues']\n+            for issue in issues:\n+\n+                if int(issue['last_updated']) > str_to_datetime(to_date).timestamp():\n+                    return\n+\n+                yield issue\n+\n+\n+class PagureClient(HttpClient):\n+    \"\"\"Client for retrieving information from Pagure API\n+\n+    :param namespace: Pagure namespace\n+    :param repository: Pagure repository; in case the repository is within a namespace\n+    :param token: Pagure API token to access the API\n+    :param sleep_time: time to sleep in case\n+        of connection problems\n+    :param max_retries: number of max retries to a data source\n+        before raising a RetryError exception\n+    :param max_items: max number of category items (e.g., issues,",
        "path": "perceval/backends/core/pagure.py",
        "position": null,
        "original_position": 245,
        "commit_id": "70a89aa1dccc5152ed4a52cb4c5e4e327ba3595a",
        "original_commit_id": "bc85386c68f52f62fcf7b392a494aca072b940d2",
        "user": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "the text between paranthesis can be removed",
        "created_at": "2020-03-08T14:39:16Z",
        "updated_at": "2020-03-08T18:21:42Z",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r389375307",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621",
        "author_association": "MEMBER",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389375307"
          },
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r389375307"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389375307/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "user_data": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false,
          "name": "valerio",
          "company": "@Bitergia ",
          "blog": "http://valeriocos.github.io/",
          "location": "Madrid, Spain",
          "email": "valcos@bitergia.com",
          "hireable": true,
          "bio": null,
          "public_repos": 57,
          "public_gists": 28,
          "followers": 34,
          "following": 5,
          "created_at": "2014-01-27T14:30:30Z",
          "updated_at": "2020-03-17T10:02:44Z",
          "organizations": [
            {
              "login": "Bitergia",
              "id": 1918070,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=",
              "url": "https://api.github.com/orgs/Bitergia",
              "repos_url": "https://api.github.com/orgs/Bitergia/repos",
              "events_url": "https://api.github.com/orgs/Bitergia/events",
              "hooks_url": "https://api.github.com/orgs/Bitergia/hooks",
              "issues_url": "https://api.github.com/orgs/Bitergia/issues",
              "members_url": "https://api.github.com/orgs/Bitergia/members{/member}",
              "public_members_url": "https://api.github.com/orgs/Bitergia/public_members{/member}",
              "avatar_url": "https://avatars3.githubusercontent.com/u/1918070?v=4",
              "description": null
            },
            {
              "login": "grimoirelab",
              "id": 16151805,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1",
              "url": "https://api.github.com/orgs/grimoirelab",
              "repos_url": "https://api.github.com/orgs/grimoirelab/repos",
              "events_url": "https://api.github.com/orgs/grimoirelab/events",
              "hooks_url": "https://api.github.com/orgs/grimoirelab/hooks",
              "issues_url": "https://api.github.com/orgs/grimoirelab/issues",
              "members_url": "https://api.github.com/orgs/grimoirelab/members{/member}",
              "public_members_url": "https://api.github.com/orgs/grimoirelab/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/16151805?v=4",
              "description": ""
            },
            {
              "login": "chaoss",
              "id": 29740296,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
              "url": "https://api.github.com/orgs/chaoss",
              "repos_url": "https://api.github.com/orgs/chaoss/repos",
              "events_url": "https://api.github.com/orgs/chaoss/events",
              "hooks_url": "https://api.github.com/orgs/chaoss/hooks",
              "issues_url": "https://api.github.com/orgs/chaoss/issues",
              "members_url": "https://api.github.com/orgs/chaoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/chaoss/public_members{/member}",
              "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
              "description": ""
            }
          ]
        },
        "reactions_data": []
      },
      {
        "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389375385",
        "pull_request_review_id": 370834781,
        "id": 389375385,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM3NTM4NQ==",
        "diff_hunk": "@@ -0,0 +1,418 @@\n+# -*- coding: utf-8 -*-\n+#\n+# Copyright (C) 2015-2020 Bitergia\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program. If not, see <http://www.gnu.org/licenses/>.\n+#\n+# Authors:\n+#     Animesh Kumar <animuz111@gmail.com>\n+#\n+\n+import json\n+import logging\n+import requests\n+from grimoirelab_toolkit.datetime import (str_to_datetime)\n+from grimoirelab_toolkit.uris import urijoin\n+\n+from ...backend import (Backend,\n+                        BackendCommand,\n+                        BackendCommandArgumentParser,\n+                        DEFAULT_SEARCH_FIELD)\n+from ...client import HttpClient\n+from ...utils import DEFAULT_DATETIME, DEFAULT_LAST_DATETIME\n+from datetime import datetime\n+\n+CATEGORY_ISSUE = \"issue\"\n+\n+PAGURE_URL = \"https://pagure.io/\"\n+PAGURE_API_URL = \"https://pagure.io/api/0\"\n+\n+MAX_CATEGORY_ITEMS_PER_PAGE = 100\n+PER_PAGE = 100\n+\n+# Default sleep time and retries to deal with connection/server problems\n+DEFAULT_SLEEP_TIME = 1\n+MAX_RETRIES = 5\n+\n+logger = logging.getLogger(__name__)\n+\n+\n+class Pagure(Backend):\n+    \"\"\"Pagure backend for Perceval.\n+\n+    This class allows the fetch the issues stored in a Pagure\n+    repository. Note that api token is needed to perform\n+    certain API calls\n+\n+    :param namespace: Pagure namespace\n+    :param repository: Pagure repository; in case the repository is within a namespace\n+    :param api_token: Pagure API token to access the API\n+    :param tag: label used to mark the data\n+    :param archive: archive to store/retrieve items\n+    :param max_retries: number of max retries to a data source\n+        before raising a RetryError exception\n+    :param max_items: max number of category items (e.g., issues,\n+        pull requests) per query\n+    :param sleep_time: time to sleep in case\n+        of connection problems\n+    :param ssl_verify: enable/disable SSL verification\n+    \"\"\"\n+    version = '0.1.0'\n+\n+    CATEGORIES = [CATEGORY_ISSUE]\n+\n+    def __init__(self, namespace=None, repository=None,\n+                 api_token=None,\n+                 tag=None, archive=None,\n+                 max_retries=MAX_RETRIES, sleep_time=DEFAULT_SLEEP_TIME,\n+                 max_items=MAX_CATEGORY_ITEMS_PER_PAGE, ssl_verify=True):\n+        origin = PAGURE_URL\n+\n+        # In case the repository is under a namespace add the namespace as well to the origin\n+        origin = urijoin(origin, namespace, repository) if namespace else urijoin(origin, repository)\n+\n+        super().__init__(origin, tag=tag, archive=archive, ssl_verify=ssl_verify)\n+\n+        self.namespace = namespace\n+        self.repository = repository\n+        self.api_token = api_token\n+        self.max_retries = max_retries\n+        self.sleep_time = sleep_time\n+        self.max_items = max_items\n+\n+        self.client = None\n+\n+    def search_fields(self, item):\n+        \"\"\"Add search fields to an item.\n+\n+        It adds the values of `metadata_id` plus the `namespace` and `repo`.\n+\n+        :param item: the item to extract the search fields values\n+\n+        :returns: a dict of search fields\n+        \"\"\"\n+        search_fields = {\n+            DEFAULT_SEARCH_FIELD: self.metadata_id(item),\n+            'namespace': self.namespace,\n+            'repo': self.repository\n+        }\n+\n+        return search_fields\n+\n+    def fetch(self, category=CATEGORY_ISSUE, from_date=DEFAULT_DATETIME, to_date=DEFAULT_LAST_DATETIME,\n+              filter_classified=False):\n+        \"\"\"Fetch the issues from the repository.\n+\n+        The method retrieves, from a Pagure repository,\n+        the issues updated since/until the given date.\n+\n+        :param category: the category of items to fetch\n+        :param from_date: obtain issues updated since this date\n+        :param to_date: obtain issues until a until a specific date (included)\n+        :param filter_classified: remove classified fields from the resulting items\n+\n+        :returns: a generator of issues\n+        \"\"\"\n+        if not from_date:\n+            from_date = DEFAULT_DATETIME\n+\n+        if not to_date:\n+            to_date = DEFAULT_LAST_DATETIME\n+\n+        from_date = from_date.strftime('%Y-%m-%d')\n+        to_date = to_date.strftime('%Y-%m-%d')\n+        kwargs = {\n+            'from_date': from_date,\n+            'to_date': to_date\n+        }\n+        items = super().fetch(category,\n+                              filter_classified=filter_classified,\n+                              **kwargs)\n+\n+        return items\n+\n+    def fetch_items(self, category, **kwargs):\n+        \"\"\"Fetch the items (issues)\n+\n+        :param category: the category of items to fetch\n+        :param kwargs: backend arguments\n+\n+        :returns: a generator of items\n+        \"\"\"\n+        from_date = kwargs['from_date']\n+        to_date = kwargs['to_date']\n+        items = self.__fetch_issues(from_date, to_date)\n+        return items\n+\n+    @classmethod\n+    def has_archiving(cls):\n+        \"\"\"Returns whether it supports archiving items on the fetch process.\n+\n+        :returns: this backend supports items archive\n+        \"\"\"\n+        return True\n+\n+    @classmethod\n+    def has_resuming(cls):\n+        \"\"\"Returns whether it supports to resume the fetch process.\n+\n+        :returns: this backend supports items resuming\n+        \"\"\"\n+        return True\n+\n+    @staticmethod\n+    def metadata_id(item):\n+        \"\"\"Extracts the identifier from a Pagure item.\"\"\"\n+\n+        return str(item['id'])\n+\n+    @staticmethod\n+    def metadata_updated_on(item):\n+        \"\"\"Extracts the update time from a Pagure item.\n+\n+        The timestamp used is extracted from 'last_updated' field.\n+        This date is converted to UNIX timestamp format. As Pagure\n+        dates are in timestamp format the conversion is straightforward.\n+\n+        :param item: item generated by the backend\n+\n+        :returns: a UNIX timestamp\n+        \"\"\"\n+        ts = int(item['last_updated'])\n+        ts = datetime.fromtimestamp(ts).timestamp()\n+\n+        return ts\n+\n+    @staticmethod\n+    def metadata_category(item):\n+        \"\"\"Extracts the category from a Pagure item.\n+\n+        This backend generates one type of item which is\n+        'issue'.\n+        \"\"\"\n+        category = CATEGORY_ISSUE\n+\n+        return category\n+\n+    def _init_client(self, from_archive=False):\n+        \"\"\"Init client\"\"\"\n+\n+        return PagureClient(self.namespace, self.repository, self.api_token,\n+                            self.sleep_time, self.max_retries, self.max_items,\n+                            self.archive, from_archive, self.ssl_verify)\n+\n+    def __fetch_issues(self, from_date, to_date):\n+        \"\"\"Fetch the issues\n+        :param from_date: starting date from which issues are fetched\n+        :param to_date: ending date till which issues are fetched\n+\n+        :returns: an issue object\n+        \"\"\"\n+        issues_groups = self.client.issues(from_date=from_date)\n+\n+        for raw_issues in issues_groups:\n+            issues = json.loads(raw_issues)\n+            issues = issues['issues']\n+            for issue in issues:\n+\n+                if int(issue['last_updated']) > str_to_datetime(to_date).timestamp():\n+                    return\n+\n+                yield issue\n+\n+\n+class PagureClient(HttpClient):\n+    \"\"\"Client for retrieving information from Pagure API\n+\n+    :param namespace: Pagure namespace\n+    :param repository: Pagure repository; in case the repository is within a namespace\n+    :param token: Pagure API token to access the API\n+    :param sleep_time: time to sleep in case\n+        of connection problems\n+    :param max_retries: number of max retries to a data source\n+        before raising a RetryError exception\n+    :param max_items: max number of category items (e.g., issues,\n+        pull requests) per query\n+    :param archive: collect issues already retrieved from an archive\n+    :param from_archive: it tells whether to write/read the archive\n+    :param ssl_verify: enable/disable SSL verification\n+    \"\"\"\n+\n+    def __init__(self, namespace, repository, token,\n+                 sleep_time=DEFAULT_SLEEP_TIME, max_retries=MAX_RETRIES,\n+                 max_items=MAX_CATEGORY_ITEMS_PER_PAGE, archive=None, from_archive=False, ssl_verify=True):\n+        self.namespace = namespace\n+        self.repository = repository\n+        self.token = token\n+        self.max_items = max_items\n+\n+        # URL to fetch the data from\n+        base_url = PAGURE_API_URL\n+\n+        super().__init__(base_url, sleep_time=sleep_time, max_retries=max_retries,\n+                         extra_headers=self._set_extra_headers(),\n+                         archive=archive, from_archive=from_archive, ssl_verify=ssl_verify)\n+\n+    def issues(self, from_date=None):\n+        \"\"\"Fetch the issues from the repository.\n+\n+        The method retrieves, from a Pagure repository, the issues\n+        updated since the given date.\n+\n+        :param from_date: obtain issues updated since this date\n+\n+        :returns: a generator of issues\n+        \"\"\"\n+        payload = {\n+            'status': 'all',\n+            'per_page': self.max_items,\n+            'order': 'asc'\n+        }\n+\n+        if from_date:\n+            payload['since'] = from_date\n+\n+        path = urijoin(\"issues\")\n+        return self.fetch_items(path, payload)\n+\n+    def fetch(self, url, payload=None, headers=None):\n+        \"\"\"Fetch the data from a given URL.\n+\n+        :param url: link to the resource\n+        :param payload: payload of the request\n+        :param headers: headers of the request\n+\n+        :returns a response object\n+        \"\"\"\n+        try:\n+            response = super().fetch(url, payload, headers)\n+        except requests.exceptions.HTTPError as error:\n+            if error.response.status_code == 404 and error.response.reason == 'NOT FOUND':\n+                logger.warning(\"The issue tracker is disabled please enable the feature for the repository\")\n+                return None\n+            else:\n+                raise error\n+\n+        return response\n+\n+    def fetch_items(self, path, payload):\n+        \"\"\"Return the items from Pagure API using links pagination\n+\n+        :param path: Path from which the item is to be fetched\n+        :param payload: Payload to be added to the request\n+\n+        :returns: a generator of items\n+        \"\"\"\n+        page = 0  # current page\n+        last_page = None  # last page\n+        url_next = self.__get_url_item(path)\n+        logger.debug(\"Get Pagure paginated items from \" + url_next)\n+\n+        response = self.fetch(url_next, payload=payload)\n+        if not response:\n+            return []\n+\n+        items = response.text\n+        page += 1\n+\n+        if 'last' in response.links:\n+            last_url = response.links['last']['url']\n+            last_page = last_url.split('&page=')[1].split('&')[0]\n+            last_page = int(last_page)\n+            logger.debug(\"Page: %i/%i\" % (page, last_page))\n+\n+        while items:\n+            yield items\n+\n+            items = None\n+\n+            if 'next' in response.links:\n+                url_next = response.links['next']['url']\n+                response = self.fetch(url_next, payload=payload)\n+                page += 1\n+\n+                items = response.text\n+                logger.debug(\"Page: %i/%i\" % (page, last_page))\n+\n+    def _set_extra_headers(self):\n+        \"\"\"Set extra headers for session\"\"\"\n+\n+        headers = {}\n+        if self.token:\n+            headers = {'Authorization': \"token %s\" % self.token}\n+\n+        return headers\n+\n+    def __get_url_item(self, path):\n+        \"\"\"Returns the url from which the item is to be fetched\"\"\"\n+\n+        if self.namespace:  # if project is under a namespace\n+            url = self.__get_url_namespace_repository()\n+        else:  # if project is created without a namespace\n+            url = self.__get_url_repository()\n+\n+        return urijoin(url, path)\n+\n+    def __get_url_namespace_repository(self):\n+        \"\"\"Build URL for a repository within a namespace\"\"\"\n+\n+        return urijoin(self.base_url, self.namespace, self.repository)\n+\n+    def __get_url_repository(self):\n+        \"\"\"Build URL for a repository\"\"\"\n+\n+        return urijoin(self.base_url, self.repository)\n+\n+\n+class PagureCommand(BackendCommand):\n+    \"\"\"Class to run Pagure backend from the command line.\"\"\"\n+\n+    BACKEND = Pagure\n+\n+    @classmethod\n+    def setup_cmd_parser(cls):\n+        \"\"\"Returns the Pagure argument parser.\"\"\"\n+\n+        parser = BackendCommandArgumentParser(cls.BACKEND,\n+                                              from_date=True,\n+                                              to_date=True,\n+                                              token_auth=True,\n+                                              archive=True,\n+                                              ssl_verify=True)\n+\n+        # Pagure authorisation token",
        "path": "perceval/backends/core/pagure.py",
        "position": null,
        "original_position": 394,
        "commit_id": "70a89aa1dccc5152ed4a52cb4c5e4e327ba3595a",
        "original_commit_id": "bc85386c68f52f62fcf7b392a494aca072b940d2",
        "user": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "This comment can be removed",
        "created_at": "2020-03-08T14:40:27Z",
        "updated_at": "2020-03-08T18:21:42Z",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r389375385",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621",
        "author_association": "MEMBER",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389375385"
          },
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r389375385"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389375385/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "user_data": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false,
          "name": "valerio",
          "company": "@Bitergia ",
          "blog": "http://valeriocos.github.io/",
          "location": "Madrid, Spain",
          "email": "valcos@bitergia.com",
          "hireable": true,
          "bio": null,
          "public_repos": 57,
          "public_gists": 28,
          "followers": 34,
          "following": 5,
          "created_at": "2014-01-27T14:30:30Z",
          "updated_at": "2020-03-17T10:02:44Z",
          "organizations": [
            {
              "login": "Bitergia",
              "id": 1918070,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=",
              "url": "https://api.github.com/orgs/Bitergia",
              "repos_url": "https://api.github.com/orgs/Bitergia/repos",
              "events_url": "https://api.github.com/orgs/Bitergia/events",
              "hooks_url": "https://api.github.com/orgs/Bitergia/hooks",
              "issues_url": "https://api.github.com/orgs/Bitergia/issues",
              "members_url": "https://api.github.com/orgs/Bitergia/members{/member}",
              "public_members_url": "https://api.github.com/orgs/Bitergia/public_members{/member}",
              "avatar_url": "https://avatars3.githubusercontent.com/u/1918070?v=4",
              "description": null
            },
            {
              "login": "grimoirelab",
              "id": 16151805,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1",
              "url": "https://api.github.com/orgs/grimoirelab",
              "repos_url": "https://api.github.com/orgs/grimoirelab/repos",
              "events_url": "https://api.github.com/orgs/grimoirelab/events",
              "hooks_url": "https://api.github.com/orgs/grimoirelab/hooks",
              "issues_url": "https://api.github.com/orgs/grimoirelab/issues",
              "members_url": "https://api.github.com/orgs/grimoirelab/members{/member}",
              "public_members_url": "https://api.github.com/orgs/grimoirelab/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/16151805?v=4",
              "description": ""
            },
            {
              "login": "chaoss",
              "id": 29740296,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
              "url": "https://api.github.com/orgs/chaoss",
              "repos_url": "https://api.github.com/orgs/chaoss/repos",
              "events_url": "https://api.github.com/orgs/chaoss/events",
              "hooks_url": "https://api.github.com/orgs/chaoss/hooks",
              "issues_url": "https://api.github.com/orgs/chaoss/issues",
              "members_url": "https://api.github.com/orgs/chaoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/chaoss/public_members{/member}",
              "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
              "description": ""
            }
          ]
        },
        "reactions_data": []
      },
      {
        "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389375459",
        "pull_request_review_id": 370834781,
        "id": 389375459,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM3NTQ1OQ==",
        "diff_hunk": "@@ -0,0 +1,418 @@\n+# -*- coding: utf-8 -*-\n+#\n+# Copyright (C) 2015-2020 Bitergia\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program. If not, see <http://www.gnu.org/licenses/>.\n+#\n+# Authors:\n+#     Animesh Kumar <animuz111@gmail.com>\n+#\n+\n+import json\n+import logging\n+import requests\n+from grimoirelab_toolkit.datetime import (str_to_datetime)\n+from grimoirelab_toolkit.uris import urijoin\n+\n+from ...backend import (Backend,\n+                        BackendCommand,\n+                        BackendCommandArgumentParser,\n+                        DEFAULT_SEARCH_FIELD)\n+from ...client import HttpClient\n+from ...utils import DEFAULT_DATETIME, DEFAULT_LAST_DATETIME\n+from datetime import datetime\n+\n+CATEGORY_ISSUE = \"issue\"\n+\n+PAGURE_URL = \"https://pagure.io/\"\n+PAGURE_API_URL = \"https://pagure.io/api/0\"\n+\n+MAX_CATEGORY_ITEMS_PER_PAGE = 100\n+PER_PAGE = 100\n+\n+# Default sleep time and retries to deal with connection/server problems\n+DEFAULT_SLEEP_TIME = 1\n+MAX_RETRIES = 5\n+\n+logger = logging.getLogger(__name__)\n+\n+\n+class Pagure(Backend):\n+    \"\"\"Pagure backend for Perceval.\n+\n+    This class allows the fetch the issues stored in a Pagure\n+    repository. Note that api token is needed to perform\n+    certain API calls\n+\n+    :param namespace: Pagure namespace\n+    :param repository: Pagure repository; in case the repository is within a namespace\n+    :param api_token: Pagure API token to access the API\n+    :param tag: label used to mark the data\n+    :param archive: archive to store/retrieve items\n+    :param max_retries: number of max retries to a data source\n+        before raising a RetryError exception\n+    :param max_items: max number of category items (e.g., issues,\n+        pull requests) per query\n+    :param sleep_time: time to sleep in case\n+        of connection problems\n+    :param ssl_verify: enable/disable SSL verification\n+    \"\"\"\n+    version = '0.1.0'\n+\n+    CATEGORIES = [CATEGORY_ISSUE]\n+\n+    def __init__(self, namespace=None, repository=None,\n+                 api_token=None,\n+                 tag=None, archive=None,\n+                 max_retries=MAX_RETRIES, sleep_time=DEFAULT_SLEEP_TIME,\n+                 max_items=MAX_CATEGORY_ITEMS_PER_PAGE, ssl_verify=True):\n+        origin = PAGURE_URL\n+\n+        # In case the repository is under a namespace add the namespace as well to the origin\n+        origin = urijoin(origin, namespace, repository) if namespace else urijoin(origin, repository)\n+\n+        super().__init__(origin, tag=tag, archive=archive, ssl_verify=ssl_verify)\n+\n+        self.namespace = namespace\n+        self.repository = repository\n+        self.api_token = api_token\n+        self.max_retries = max_retries\n+        self.sleep_time = sleep_time\n+        self.max_items = max_items\n+\n+        self.client = None\n+\n+    def search_fields(self, item):\n+        \"\"\"Add search fields to an item.\n+\n+        It adds the values of `metadata_id` plus the `namespace` and `repo`.\n+\n+        :param item: the item to extract the search fields values\n+\n+        :returns: a dict of search fields\n+        \"\"\"\n+        search_fields = {\n+            DEFAULT_SEARCH_FIELD: self.metadata_id(item),\n+            'namespace': self.namespace,\n+            'repo': self.repository\n+        }\n+\n+        return search_fields\n+\n+    def fetch(self, category=CATEGORY_ISSUE, from_date=DEFAULT_DATETIME, to_date=DEFAULT_LAST_DATETIME,\n+              filter_classified=False):\n+        \"\"\"Fetch the issues from the repository.\n+\n+        The method retrieves, from a Pagure repository,\n+        the issues updated since/until the given date.\n+\n+        :param category: the category of items to fetch\n+        :param from_date: obtain issues updated since this date\n+        :param to_date: obtain issues until a until a specific date (included)\n+        :param filter_classified: remove classified fields from the resulting items\n+\n+        :returns: a generator of issues\n+        \"\"\"\n+        if not from_date:\n+            from_date = DEFAULT_DATETIME\n+\n+        if not to_date:\n+            to_date = DEFAULT_LAST_DATETIME\n+\n+        from_date = from_date.strftime('%Y-%m-%d')\n+        to_date = to_date.strftime('%Y-%m-%d')\n+        kwargs = {\n+            'from_date': from_date,\n+            'to_date': to_date\n+        }\n+        items = super().fetch(category,\n+                              filter_classified=filter_classified,\n+                              **kwargs)\n+\n+        return items\n+\n+    def fetch_items(self, category, **kwargs):\n+        \"\"\"Fetch the items (issues)\n+\n+        :param category: the category of items to fetch\n+        :param kwargs: backend arguments\n+\n+        :returns: a generator of items\n+        \"\"\"\n+        from_date = kwargs['from_date']\n+        to_date = kwargs['to_date']\n+        items = self.__fetch_issues(from_date, to_date)\n+        return items\n+\n+    @classmethod\n+    def has_archiving(cls):\n+        \"\"\"Returns whether it supports archiving items on the fetch process.\n+\n+        :returns: this backend supports items archive\n+        \"\"\"\n+        return True\n+\n+    @classmethod\n+    def has_resuming(cls):\n+        \"\"\"Returns whether it supports to resume the fetch process.\n+\n+        :returns: this backend supports items resuming\n+        \"\"\"\n+        return True\n+\n+    @staticmethod\n+    def metadata_id(item):\n+        \"\"\"Extracts the identifier from a Pagure item.\"\"\"\n+\n+        return str(item['id'])\n+\n+    @staticmethod\n+    def metadata_updated_on(item):\n+        \"\"\"Extracts the update time from a Pagure item.\n+\n+        The timestamp used is extracted from 'last_updated' field.\n+        This date is converted to UNIX timestamp format. As Pagure\n+        dates are in timestamp format the conversion is straightforward.\n+\n+        :param item: item generated by the backend\n+\n+        :returns: a UNIX timestamp\n+        \"\"\"\n+        ts = int(item['last_updated'])\n+        ts = datetime.fromtimestamp(ts).timestamp()\n+\n+        return ts\n+\n+    @staticmethod\n+    def metadata_category(item):\n+        \"\"\"Extracts the category from a Pagure item.\n+\n+        This backend generates one type of item which is\n+        'issue'.\n+        \"\"\"\n+        category = CATEGORY_ISSUE\n+\n+        return category\n+\n+    def _init_client(self, from_archive=False):\n+        \"\"\"Init client\"\"\"\n+\n+        return PagureClient(self.namespace, self.repository, self.api_token,\n+                            self.sleep_time, self.max_retries, self.max_items,\n+                            self.archive, from_archive, self.ssl_verify)\n+\n+    def __fetch_issues(self, from_date, to_date):\n+        \"\"\"Fetch the issues\n+        :param from_date: starting date from which issues are fetched\n+        :param to_date: ending date till which issues are fetched\n+\n+        :returns: an issue object\n+        \"\"\"\n+        issues_groups = self.client.issues(from_date=from_date)\n+\n+        for raw_issues in issues_groups:\n+            issues = json.loads(raw_issues)\n+            issues = issues['issues']\n+            for issue in issues:\n+\n+                if int(issue['last_updated']) > str_to_datetime(to_date).timestamp():\n+                    return\n+\n+                yield issue\n+\n+\n+class PagureClient(HttpClient):\n+    \"\"\"Client for retrieving information from Pagure API\n+\n+    :param namespace: Pagure namespace\n+    :param repository: Pagure repository; in case the repository is within a namespace\n+    :param token: Pagure API token to access the API\n+    :param sleep_time: time to sleep in case\n+        of connection problems\n+    :param max_retries: number of max retries to a data source\n+        before raising a RetryError exception\n+    :param max_items: max number of category items (e.g., issues,\n+        pull requests) per query\n+    :param archive: collect issues already retrieved from an archive\n+    :param from_archive: it tells whether to write/read the archive\n+    :param ssl_verify: enable/disable SSL verification\n+    \"\"\"\n+\n+    def __init__(self, namespace, repository, token,\n+                 sleep_time=DEFAULT_SLEEP_TIME, max_retries=MAX_RETRIES,\n+                 max_items=MAX_CATEGORY_ITEMS_PER_PAGE, archive=None, from_archive=False, ssl_verify=True):\n+        self.namespace = namespace\n+        self.repository = repository\n+        self.token = token\n+        self.max_items = max_items\n+\n+        # URL to fetch the data from\n+        base_url = PAGURE_API_URL\n+\n+        super().__init__(base_url, sleep_time=sleep_time, max_retries=max_retries,\n+                         extra_headers=self._set_extra_headers(),\n+                         archive=archive, from_archive=from_archive, ssl_verify=ssl_verify)\n+\n+    def issues(self, from_date=None):\n+        \"\"\"Fetch the issues from the repository.\n+\n+        The method retrieves, from a Pagure repository, the issues\n+        updated since the given date.\n+\n+        :param from_date: obtain issues updated since this date\n+\n+        :returns: a generator of issues\n+        \"\"\"\n+        payload = {\n+            'status': 'all',\n+            'per_page': self.max_items,\n+            'order': 'asc'\n+        }\n+\n+        if from_date:\n+            payload['since'] = from_date\n+\n+        path = urijoin(\"issues\")\n+        return self.fetch_items(path, payload)\n+\n+    def fetch(self, url, payload=None, headers=None):\n+        \"\"\"Fetch the data from a given URL.\n+\n+        :param url: link to the resource\n+        :param payload: payload of the request\n+        :param headers: headers of the request\n+\n+        :returns a response object\n+        \"\"\"\n+        try:\n+            response = super().fetch(url, payload, headers)\n+        except requests.exceptions.HTTPError as error:\n+            if error.response.status_code == 404 and error.response.reason == 'NOT FOUND':\n+                logger.warning(\"The issue tracker is disabled please enable the feature for the repository\")\n+                return None\n+            else:\n+                raise error\n+\n+        return response\n+\n+    def fetch_items(self, path, payload):\n+        \"\"\"Return the items from Pagure API using links pagination\n+\n+        :param path: Path from which the item is to be fetched\n+        :param payload: Payload to be added to the request\n+\n+        :returns: a generator of items\n+        \"\"\"\n+        page = 0  # current page\n+        last_page = None  # last page\n+        url_next = self.__get_url_item(path)\n+        logger.debug(\"Get Pagure paginated items from \" + url_next)\n+\n+        response = self.fetch(url_next, payload=payload)\n+        if not response:\n+            return []\n+\n+        items = response.text\n+        page += 1\n+\n+        if 'last' in response.links:\n+            last_url = response.links['last']['url']\n+            last_page = last_url.split('&page=')[1].split('&')[0]\n+            last_page = int(last_page)\n+            logger.debug(\"Page: %i/%i\" % (page, last_page))\n+\n+        while items:\n+            yield items\n+\n+            items = None\n+\n+            if 'next' in response.links:\n+                url_next = response.links['next']['url']\n+                response = self.fetch(url_next, payload=payload)\n+                page += 1\n+\n+                items = response.text\n+                logger.debug(\"Page: %i/%i\" % (page, last_page))\n+\n+    def _set_extra_headers(self):\n+        \"\"\"Set extra headers for session\"\"\"\n+\n+        headers = {}\n+        if self.token:\n+            headers = {'Authorization': \"token %s\" % self.token}\n+\n+        return headers\n+\n+    def __get_url_item(self, path):\n+        \"\"\"Returns the url from which the item is to be fetched\"\"\"\n+\n+        if self.namespace:  # if project is under a namespace\n+            url = self.__get_url_namespace_repository()\n+        else:  # if project is created without a namespace\n+            url = self.__get_url_repository()\n+\n+        return urijoin(url, path)\n+\n+    def __get_url_namespace_repository(self):\n+        \"\"\"Build URL for a repository within a namespace\"\"\"\n+\n+        return urijoin(self.base_url, self.namespace, self.repository)\n+\n+    def __get_url_repository(self):\n+        \"\"\"Build URL for a repository\"\"\"\n+\n+        return urijoin(self.base_url, self.repository)\n+\n+\n+class PagureCommand(BackendCommand):\n+    \"\"\"Class to run Pagure backend from the command line.\"\"\"\n+\n+    BACKEND = Pagure\n+\n+    @classmethod\n+    def setup_cmd_parser(cls):\n+        \"\"\"Returns the Pagure argument parser.\"\"\"\n+\n+        parser = BackendCommandArgumentParser(cls.BACKEND,\n+                                              from_date=True,\n+                                              to_date=True,\n+                                              token_auth=True,\n+                                              archive=True,\n+                                              ssl_verify=True)\n+\n+        # Pagure authorisation token\n+        group = parser.parser.add_argument_group('Pagure arguments')\n+\n+        # Generic client options\n+        group.add_argument('--max-items', dest='max_items',\n+                           default=MAX_CATEGORY_ITEMS_PER_PAGE, type=int,\n+                           help=\"Max number of category items per query.\")\n+        group.add_argument('--max-retries', dest='max_retries',\n+                           default=MAX_RETRIES, type=int,\n+                           help=\"number of API call retries\")\n+        group.add_argument('--sleep-time', dest='sleep_time',\n+                           default=DEFAULT_SLEEP_TIME, type=int,\n+                           help=\"sleeping time between API call retries\")\n+\n+        # Positional arguments\n+\n+        # A project be created directly or within a namespace\n+        # hence API call supports the access based on usecase. e.g.\n+        # GET /api/0/<repo>/issues\n+        # GET /api/0/<namespace>/<repo>/issues\n+        parser.parser.add_argument('namespace', nargs='?',\n+                                   help=\"Pagure namespace\")\n+        parser.parser.add_argument('repository',\n+                                   help=\"Pagure repository; in case the repository is within a namespace\")",
        "path": "perceval/backends/core/pagure.py",
        "position": null,
        "original_position": 417,
        "commit_id": "70a89aa1dccc5152ed4a52cb4c5e4e327ba3595a",
        "original_commit_id": "bc85386c68f52f62fcf7b392a494aca072b940d2",
        "user": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "Can we remove what is after `;`?",
        "created_at": "2020-03-08T14:41:24Z",
        "updated_at": "2020-03-08T18:21:42Z",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r389375459",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621",
        "author_association": "MEMBER",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389375459"
          },
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r389375459"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389375459/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "user_data": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false,
          "name": "valerio",
          "company": "@Bitergia ",
          "blog": "http://valeriocos.github.io/",
          "location": "Madrid, Spain",
          "email": "valcos@bitergia.com",
          "hireable": true,
          "bio": null,
          "public_repos": 57,
          "public_gists": 28,
          "followers": 34,
          "following": 5,
          "created_at": "2014-01-27T14:30:30Z",
          "updated_at": "2020-03-17T10:02:44Z",
          "organizations": [
            {
              "login": "Bitergia",
              "id": 1918070,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=",
              "url": "https://api.github.com/orgs/Bitergia",
              "repos_url": "https://api.github.com/orgs/Bitergia/repos",
              "events_url": "https://api.github.com/orgs/Bitergia/events",
              "hooks_url": "https://api.github.com/orgs/Bitergia/hooks",
              "issues_url": "https://api.github.com/orgs/Bitergia/issues",
              "members_url": "https://api.github.com/orgs/Bitergia/members{/member}",
              "public_members_url": "https://api.github.com/orgs/Bitergia/public_members{/member}",
              "avatar_url": "https://avatars3.githubusercontent.com/u/1918070?v=4",
              "description": null
            },
            {
              "login": "grimoirelab",
              "id": 16151805,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1",
              "url": "https://api.github.com/orgs/grimoirelab",
              "repos_url": "https://api.github.com/orgs/grimoirelab/repos",
              "events_url": "https://api.github.com/orgs/grimoirelab/events",
              "hooks_url": "https://api.github.com/orgs/grimoirelab/hooks",
              "issues_url": "https://api.github.com/orgs/grimoirelab/issues",
              "members_url": "https://api.github.com/orgs/grimoirelab/members{/member}",
              "public_members_url": "https://api.github.com/orgs/grimoirelab/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/16151805?v=4",
              "description": ""
            },
            {
              "login": "chaoss",
              "id": 29740296,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
              "url": "https://api.github.com/orgs/chaoss",
              "repos_url": "https://api.github.com/orgs/chaoss/repos",
              "events_url": "https://api.github.com/orgs/chaoss/events",
              "hooks_url": "https://api.github.com/orgs/chaoss/hooks",
              "issues_url": "https://api.github.com/orgs/chaoss/issues",
              "members_url": "https://api.github.com/orgs/chaoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/chaoss/public_members{/member}",
              "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
              "description": ""
            }
          ]
        },
        "reactions_data": []
      },
      {
        "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389375738",
        "pull_request_review_id": 370834781,
        "id": 389375738,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM3NTczOA==",
        "diff_hunk": "@@ -0,0 +1,701 @@\n+#!/usr/bin/env python3\n+# -*- coding: utf-8 -*-\n+#\n+# Copyright (C) 2015-2020 Bitergia\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program. If not, see <http://www.gnu.org/licenses/>.\n+#\n+# Authors:\n+#     Animesh Kumar<animuz111@gmail.com>\n+#\n+\n+import datetime\n+import os\n+import unittest.mock\n+import httpretty\n+import pkg_resources\n+import requests\n+\n+pkg_resources.declare_namespace('perceval.backends')\n+\n+from perceval.backend import BackendCommandArgumentParser\n+from perceval.utils import (DEFAULT_DATETIME, DEFAULT_LAST_DATETIME)\n+from perceval.backends.core.pagure import (Pagure,\n+                                           PagureCommand,\n+                                           PagureClient,\n+                                           CATEGORY_ISSUE,\n+                                           MAX_CATEGORY_ITEMS_PER_PAGE)\n+from base import TestCaseBackendArchive\n+\n+PAGURE_API_URL = \"https://pagure.io/api/0\"\n+PAGURE_REPO_URL = PAGURE_API_URL + \"/Project-example\"\n+PAGURE_ISSUES_URL = PAGURE_REPO_URL + \"/issues\"\n+\n+# Repository with issue tracker disabled\n+PAGURE_REPO_URL_DISABLED_URL = PAGURE_API_URL + \"/Project-test-example\"\n+PAGURE_ISSUES_DISABLED_URL = PAGURE_REPO_URL_DISABLED_URL + \"/issues\"\n+\n+PAGURE_NAMESPACE_REPO_URL = PAGURE_API_URL + \"Test-group/Project-namespace-example\"\n+PAGURE_NAMESPACE_ISSUES_URL = PAGURE_NAMESPACE_REPO_URL + \"/issues\"\n+\n+\n+def read_file(filename, mode='r'):\n+    with open(os.path.join(os.path.dirname(os.path.abspath(__file__)), filename), mode) as f:\n+        content = f.read()\n+    return content\n+\n+\n+class TestPagureBackend(unittest.TestCase):\n+    \"\"\"Pagure backend tests\"\"\"\n+\n+    @httpretty.activate\n+    def test_initialization(self):\n+        \"\"\"Test whether attributes are initialized\"\"\"\n+\n+        pagure = Pagure(namespace=None, repository='Project-example', api_token='aaa', tag='test')\n+\n+        # Testing initialization when repository is not within a namespace\n+        self.assertEqual(pagure.repository, 'Project-example')\n+        self.assertIsNone(pagure.namespace)\n+        self.assertEqual(pagure.origin, 'https://pagure.io/Project-example')\n+        self.assertEqual(pagure.tag, 'test')\n+        self.assertEqual(pagure.max_items, MAX_CATEGORY_ITEMS_PER_PAGE)\n+        self.assertEqual(pagure.categories, [CATEGORY_ISSUE])\n+        self.assertEqual(pagure.api_token, 'aaa')\n+        self.assertTrue(pagure.ssl_verify)\n+\n+        # When tag is empty or None it will be set to the value in origin\n+        pagure = Pagure(namespace=None, repository='Project-example', api_token='aaa', ssl_verify=False)\n+        self.assertEqual(pagure.repository, 'Project-example')\n+        self.assertIsNone(pagure.namespace)\n+        self.assertEqual(pagure.origin, 'https://pagure.io/Project-example')\n+        self.assertEqual(pagure.tag, 'https://pagure.io/Project-example')\n+        self.assertFalse(pagure.ssl_verify)\n+        self.assertEqual(pagure.api_token, 'aaa')\n+\n+        pagure = Pagure(namespace=None, repository='Project-example', api_token='aaa', tag='')\n+        self.assertEqual(pagure.repository, 'Project-example')\n+        self.assertIsNone(pagure.namespace)\n+        self.assertEqual(pagure.origin, 'https://pagure.io/Project-example')\n+        self.assertEqual(pagure.tag, 'https://pagure.io/Project-example')\n+        self.assertEqual(pagure.api_token, 'aaa')\n+\n+        # Empty value generates a None API token\n+        pagure = Pagure(repository='Project-example', tag='test')\n+        self.assertEqual(pagure.repository, 'Project-example')\n+        self.assertIsNone(pagure.namespace)\n+        self.assertEqual(pagure.origin, 'https://pagure.io/Project-example')\n+        self.assertEqual(pagure.tag, 'test')\n+        self.assertIsNone(pagure.api_token)\n+\n+        # Testing initialization when repository is within a namespace\n+        pagure = Pagure(namespace='Test-group', repository='Project-example-namespace', api_token='aaa', tag='testing')\n+        self.assertEqual(pagure.repository, 'Project-example-namespace')\n+        self.assertEqual(pagure.namespace, 'Test-group')\n+        self.assertEqual(pagure.origin, 'https://pagure.io/Test-group/Project-example-namespace')\n+        self.assertEqual(pagure.tag, 'testing')\n+        self.assertEqual(pagure.max_items, MAX_CATEGORY_ITEMS_PER_PAGE)\n+        self.assertEqual(pagure.categories, [CATEGORY_ISSUE])\n+        self.assertEqual(pagure.api_token, 'aaa')\n+        self.assertTrue(pagure.ssl_verify)\n+\n+    def test_has_resuming(self):\n+        \"\"\"Test if it returns True when has_resuming is called\"\"\"\n+\n+        self.assertEqual(Pagure.has_resuming(), True)\n+\n+    def test_has_archiving(self):\n+        \"\"\"Test if it returns True when has_archiving is called\"\"\"\n+\n+        self.assertEqual(Pagure.has_archiving(), True)\n+\n+    @httpretty.activate\n+    def test_fetch_issues(self):\n+        \"\"\"Test whether a list of issues is returned\"\"\"\n+\n+        body = read_file('data/pagure/pagure_repo_issue_1')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=body,\n+                               status=200,\n+                               )\n+        pagure = Pagure(repository='Project-example', api_token='aaa')\n+        issues = [issues for issues in pagure.fetch(from_date=None, to_date=None)]\n+\n+        self.assertEqual(len(issues), 1)\n+\n+        issue = issues[0]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['uuid'], '41071b08dd75f34ca92c6d5ecb844e7a3e5939c6')\n+        self.assertEqual(issue['updated_on'], 1583508642.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Project-example')\n+        self.assertEqual(len(issue['data']['comments']), 1)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+        self.assertEqual(len(issue['data']['comments'][0]['reactions']), 0)\n+\n+    @httpretty.activate\n+    def test_fetch_issues_disabled(self):\n+        \"\"\"Test whether an empty response is returned in case a repository",
        "path": "tests/test_pagure.py",
        "position": null,
        "original_position": 151,
        "commit_id": "70a89aa1dccc5152ed4a52cb4c5e4e327ba3595a",
        "original_commit_id": "bc85386c68f52f62fcf7b392a494aca072b940d2",
        "user": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "Probably this test could be completed to check the text of the warning message (see ref: https://github.com/chaoss/grimoirelab-perceval/blob/28d4b13fdeddaa43c89fd69a530242b1396208d6/tests/test_jenkins.py#L257). \r\n\r\nI would change the description with something like: `Test whether a warning message is logged when the issue tracker is disabled`. ",
        "created_at": "2020-03-08T14:45:15Z",
        "updated_at": "2020-03-08T18:21:42Z",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r389375738",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621",
        "author_association": "MEMBER",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389375738"
          },
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r389375738"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389375738/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "user_data": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false,
          "name": "valerio",
          "company": "@Bitergia ",
          "blog": "http://valeriocos.github.io/",
          "location": "Madrid, Spain",
          "email": "valcos@bitergia.com",
          "hireable": true,
          "bio": null,
          "public_repos": 57,
          "public_gists": 28,
          "followers": 34,
          "following": 5,
          "created_at": "2014-01-27T14:30:30Z",
          "updated_at": "2020-03-17T10:02:44Z",
          "organizations": [
            {
              "login": "Bitergia",
              "id": 1918070,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=",
              "url": "https://api.github.com/orgs/Bitergia",
              "repos_url": "https://api.github.com/orgs/Bitergia/repos",
              "events_url": "https://api.github.com/orgs/Bitergia/events",
              "hooks_url": "https://api.github.com/orgs/Bitergia/hooks",
              "issues_url": "https://api.github.com/orgs/Bitergia/issues",
              "members_url": "https://api.github.com/orgs/Bitergia/members{/member}",
              "public_members_url": "https://api.github.com/orgs/Bitergia/public_members{/member}",
              "avatar_url": "https://avatars3.githubusercontent.com/u/1918070?v=4",
              "description": null
            },
            {
              "login": "grimoirelab",
              "id": 16151805,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1",
              "url": "https://api.github.com/orgs/grimoirelab",
              "repos_url": "https://api.github.com/orgs/grimoirelab/repos",
              "events_url": "https://api.github.com/orgs/grimoirelab/events",
              "hooks_url": "https://api.github.com/orgs/grimoirelab/hooks",
              "issues_url": "https://api.github.com/orgs/grimoirelab/issues",
              "members_url": "https://api.github.com/orgs/grimoirelab/members{/member}",
              "public_members_url": "https://api.github.com/orgs/grimoirelab/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/16151805?v=4",
              "description": ""
            },
            {
              "login": "chaoss",
              "id": 29740296,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
              "url": "https://api.github.com/orgs/chaoss",
              "repos_url": "https://api.github.com/orgs/chaoss/repos",
              "events_url": "https://api.github.com/orgs/chaoss/events",
              "hooks_url": "https://api.github.com/orgs/chaoss/hooks",
              "issues_url": "https://api.github.com/orgs/chaoss/issues",
              "members_url": "https://api.github.com/orgs/chaoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/chaoss/public_members{/member}",
              "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
              "description": ""
            }
          ]
        },
        "reactions_data": []
      },
      {
        "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389375826",
        "pull_request_review_id": 370834781,
        "id": 389375826,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM3NTgyNg==",
        "diff_hunk": "@@ -0,0 +1,701 @@\n+#!/usr/bin/env python3\n+# -*- coding: utf-8 -*-\n+#\n+# Copyright (C) 2015-2020 Bitergia\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program. If not, see <http://www.gnu.org/licenses/>.\n+#\n+# Authors:\n+#     Animesh Kumar<animuz111@gmail.com>\n+#\n+\n+import datetime\n+import os\n+import unittest.mock\n+import httpretty\n+import pkg_resources\n+import requests\n+\n+pkg_resources.declare_namespace('perceval.backends')\n+\n+from perceval.backend import BackendCommandArgumentParser\n+from perceval.utils import (DEFAULT_DATETIME, DEFAULT_LAST_DATETIME)\n+from perceval.backends.core.pagure import (Pagure,\n+                                           PagureCommand,\n+                                           PagureClient,\n+                                           CATEGORY_ISSUE,\n+                                           MAX_CATEGORY_ITEMS_PER_PAGE)\n+from base import TestCaseBackendArchive\n+\n+PAGURE_API_URL = \"https://pagure.io/api/0\"\n+PAGURE_REPO_URL = PAGURE_API_URL + \"/Project-example\"\n+PAGURE_ISSUES_URL = PAGURE_REPO_URL + \"/issues\"\n+\n+# Repository with issue tracker disabled\n+PAGURE_REPO_URL_DISABLED_URL = PAGURE_API_URL + \"/Project-test-example\"\n+PAGURE_ISSUES_DISABLED_URL = PAGURE_REPO_URL_DISABLED_URL + \"/issues\"\n+\n+PAGURE_NAMESPACE_REPO_URL = PAGURE_API_URL + \"Test-group/Project-namespace-example\"\n+PAGURE_NAMESPACE_ISSUES_URL = PAGURE_NAMESPACE_REPO_URL + \"/issues\"\n+\n+\n+def read_file(filename, mode='r'):\n+    with open(os.path.join(os.path.dirname(os.path.abspath(__file__)), filename), mode) as f:\n+        content = f.read()\n+    return content\n+\n+\n+class TestPagureBackend(unittest.TestCase):\n+    \"\"\"Pagure backend tests\"\"\"\n+\n+    @httpretty.activate\n+    def test_initialization(self):\n+        \"\"\"Test whether attributes are initialized\"\"\"\n+\n+        pagure = Pagure(namespace=None, repository='Project-example', api_token='aaa', tag='test')\n+\n+        # Testing initialization when repository is not within a namespace\n+        self.assertEqual(pagure.repository, 'Project-example')\n+        self.assertIsNone(pagure.namespace)\n+        self.assertEqual(pagure.origin, 'https://pagure.io/Project-example')\n+        self.assertEqual(pagure.tag, 'test')\n+        self.assertEqual(pagure.max_items, MAX_CATEGORY_ITEMS_PER_PAGE)\n+        self.assertEqual(pagure.categories, [CATEGORY_ISSUE])\n+        self.assertEqual(pagure.api_token, 'aaa')\n+        self.assertTrue(pagure.ssl_verify)\n+\n+        # When tag is empty or None it will be set to the value in origin\n+        pagure = Pagure(namespace=None, repository='Project-example', api_token='aaa', ssl_verify=False)\n+        self.assertEqual(pagure.repository, 'Project-example')\n+        self.assertIsNone(pagure.namespace)\n+        self.assertEqual(pagure.origin, 'https://pagure.io/Project-example')\n+        self.assertEqual(pagure.tag, 'https://pagure.io/Project-example')\n+        self.assertFalse(pagure.ssl_verify)\n+        self.assertEqual(pagure.api_token, 'aaa')\n+\n+        pagure = Pagure(namespace=None, repository='Project-example', api_token='aaa', tag='')\n+        self.assertEqual(pagure.repository, 'Project-example')\n+        self.assertIsNone(pagure.namespace)\n+        self.assertEqual(pagure.origin, 'https://pagure.io/Project-example')\n+        self.assertEqual(pagure.tag, 'https://pagure.io/Project-example')\n+        self.assertEqual(pagure.api_token, 'aaa')\n+\n+        # Empty value generates a None API token\n+        pagure = Pagure(repository='Project-example', tag='test')\n+        self.assertEqual(pagure.repository, 'Project-example')\n+        self.assertIsNone(pagure.namespace)\n+        self.assertEqual(pagure.origin, 'https://pagure.io/Project-example')\n+        self.assertEqual(pagure.tag, 'test')\n+        self.assertIsNone(pagure.api_token)\n+\n+        # Testing initialization when repository is within a namespace\n+        pagure = Pagure(namespace='Test-group', repository='Project-example-namespace', api_token='aaa', tag='testing')\n+        self.assertEqual(pagure.repository, 'Project-example-namespace')\n+        self.assertEqual(pagure.namespace, 'Test-group')\n+        self.assertEqual(pagure.origin, 'https://pagure.io/Test-group/Project-example-namespace')\n+        self.assertEqual(pagure.tag, 'testing')\n+        self.assertEqual(pagure.max_items, MAX_CATEGORY_ITEMS_PER_PAGE)\n+        self.assertEqual(pagure.categories, [CATEGORY_ISSUE])\n+        self.assertEqual(pagure.api_token, 'aaa')\n+        self.assertTrue(pagure.ssl_verify)\n+\n+    def test_has_resuming(self):\n+        \"\"\"Test if it returns True when has_resuming is called\"\"\"\n+\n+        self.assertEqual(Pagure.has_resuming(), True)\n+\n+    def test_has_archiving(self):\n+        \"\"\"Test if it returns True when has_archiving is called\"\"\"\n+\n+        self.assertEqual(Pagure.has_archiving(), True)\n+\n+    @httpretty.activate\n+    def test_fetch_issues(self):\n+        \"\"\"Test whether a list of issues is returned\"\"\"\n+\n+        body = read_file('data/pagure/pagure_repo_issue_1')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=body,\n+                               status=200,\n+                               )\n+        pagure = Pagure(repository='Project-example', api_token='aaa')\n+        issues = [issues for issues in pagure.fetch(from_date=None, to_date=None)]\n+\n+        self.assertEqual(len(issues), 1)\n+\n+        issue = issues[0]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['uuid'], '41071b08dd75f34ca92c6d5ecb844e7a3e5939c6')\n+        self.assertEqual(issue['updated_on'], 1583508642.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Project-example')\n+        self.assertEqual(len(issue['data']['comments']), 1)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+        self.assertEqual(len(issue['data']['comments'][0]['reactions']), 0)\n+\n+    @httpretty.activate\n+    def test_fetch_issues_disabled(self):\n+        \"\"\"Test whether an empty response is returned in case a repository\n+           has disabled issue tracker\n+        \"\"\"\n+        body = read_file('data/pagure/pagure_empty_request')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=body,\n+                               status=404,\n+                               )\n+        pagure = Pagure(repository='Project-test-example')\n+        issues = [issues for issues in pagure.fetch(from_date=None, to_date=None)]\n+        self.assertEqual(len(issues), 0)\n+        self.assertListEqual(issues, [])\n+\n+    @httpretty.activate\n+    def test_search_fields_issues(self):\n+        \"\"\"Test whether the search_fields is properly set\"\"\"\n+\n+        body = read_file('data/pagure/pagure_repo_issue_1')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=body,\n+                               status=200,\n+                               )\n+\n+        pagure = Pagure(repository='Project-example', api_token='aaa')\n+        issues = [issues for issues in pagure.fetch(from_date=None, to_date=None)]\n+\n+        issue = issues[0]\n+        self.assertEqual(pagure.metadata_id(issue['data']), issue['search_fields']['item_id'])\n+        self.assertIsNone(issue['search_fields']['namespace'])\n+        self.assertEqual(issue['search_fields']['repo'], 'Project-example')\n+\n+    @httpretty.activate\n+    def test_fetch_more_issues(self):\n+        \"\"\"Test when return two issues\"\"\"\n+\n+        issue_1 = read_file('data/pagure/pagure_repo_issue_1')\n+        issue_2 = read_file('data/pagure/pagure_repo_only_issue_2')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=issue_1,\n+                               status=200,\n+                               forcing_headers={\n+                                   'Link': '<' + PAGURE_ISSUES_URL + '/?&page=2>; rel=\"next\", <' +\n+                                           PAGURE_ISSUES_URL + '/?&page=3>; rel=\"last\"'\n+                               }\n+                               )\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL + '/?&page=2',\n+                               body=issue_2,\n+                               status=200,\n+                               )\n+\n+        pagure = Pagure(repository='Project-example')\n+        issues = [issues for issues in pagure.fetch()]\n+\n+        self.assertEqual(len(issues), 2)\n+\n+        issue = issues[0]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['uuid'], '41071b08dd75f34ca92c6d5ecb844e7a3e5939c6')\n+        self.assertEqual(issue['updated_on'], 1583508642.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Project-example')\n+        self.assertEqual(len(issue['data']['comments']), 1)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk08')\n+        self.assertEqual(len(issue['data']['comments'][0]['reactions']), 0)\n+\n+        issue = issues[1]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['uuid'], '7dd3642664c8a7e475814b9037277df775657850')\n+        self.assertEqual(issue['updated_on'], 1583558174.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk0806')\n+        self.assertEqual(len(issue['data']['comments']), 2)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+        self.assertEqual(len(issue['data']['comments'][0]['reactions']), 0)\n+        self.assertEqual(len(issue['data']['comments'][1]['reactions']), 1)\n+        self.assertListEqual(issue['data']['comments'][1]['reactions']['Thumbs up'], ['animeshk0806'])\n+\n+    @httpretty.activate\n+    def test_fetch_issues_until_date(self):\n+        \"\"\"Test when return issue till a particular date\"\"\"",
        "path": "tests/test_pagure.py",
        "position": null,
        "original_position": 240,
        "commit_id": "70a89aa1dccc5152ed4a52cb4c5e4e327ba3595a",
        "original_commit_id": "bc85386c68f52f62fcf7b392a494aca072b940d2",
        "user": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "small typo: `issue` or `issues`?",
        "created_at": "2020-03-08T14:45:58Z",
        "updated_at": "2020-03-08T18:21:42Z",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r389375826",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621",
        "author_association": "MEMBER",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389375826"
          },
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r389375826"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389375826/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "user_data": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false,
          "name": "valerio",
          "company": "@Bitergia ",
          "blog": "http://valeriocos.github.io/",
          "location": "Madrid, Spain",
          "email": "valcos@bitergia.com",
          "hireable": true,
          "bio": null,
          "public_repos": 57,
          "public_gists": 28,
          "followers": 34,
          "following": 5,
          "created_at": "2014-01-27T14:30:30Z",
          "updated_at": "2020-03-17T10:02:44Z",
          "organizations": [
            {
              "login": "Bitergia",
              "id": 1918070,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=",
              "url": "https://api.github.com/orgs/Bitergia",
              "repos_url": "https://api.github.com/orgs/Bitergia/repos",
              "events_url": "https://api.github.com/orgs/Bitergia/events",
              "hooks_url": "https://api.github.com/orgs/Bitergia/hooks",
              "issues_url": "https://api.github.com/orgs/Bitergia/issues",
              "members_url": "https://api.github.com/orgs/Bitergia/members{/member}",
              "public_members_url": "https://api.github.com/orgs/Bitergia/public_members{/member}",
              "avatar_url": "https://avatars3.githubusercontent.com/u/1918070?v=4",
              "description": null
            },
            {
              "login": "grimoirelab",
              "id": 16151805,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1",
              "url": "https://api.github.com/orgs/grimoirelab",
              "repos_url": "https://api.github.com/orgs/grimoirelab/repos",
              "events_url": "https://api.github.com/orgs/grimoirelab/events",
              "hooks_url": "https://api.github.com/orgs/grimoirelab/hooks",
              "issues_url": "https://api.github.com/orgs/grimoirelab/issues",
              "members_url": "https://api.github.com/orgs/grimoirelab/members{/member}",
              "public_members_url": "https://api.github.com/orgs/grimoirelab/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/16151805?v=4",
              "description": ""
            },
            {
              "login": "chaoss",
              "id": 29740296,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
              "url": "https://api.github.com/orgs/chaoss",
              "repos_url": "https://api.github.com/orgs/chaoss/repos",
              "events_url": "https://api.github.com/orgs/chaoss/events",
              "hooks_url": "https://api.github.com/orgs/chaoss/hooks",
              "issues_url": "https://api.github.com/orgs/chaoss/issues",
              "members_url": "https://api.github.com/orgs/chaoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/chaoss/public_members{/member}",
              "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
              "description": ""
            }
          ]
        },
        "reactions_data": []
      },
      {
        "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389375934",
        "pull_request_review_id": 370834781,
        "id": 389375934,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM3NTkzNA==",
        "diff_hunk": "@@ -0,0 +1,701 @@\n+#!/usr/bin/env python3\n+# -*- coding: utf-8 -*-\n+#\n+# Copyright (C) 2015-2020 Bitergia\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program. If not, see <http://www.gnu.org/licenses/>.\n+#\n+# Authors:\n+#     Animesh Kumar<animuz111@gmail.com>\n+#\n+\n+import datetime\n+import os\n+import unittest.mock\n+import httpretty\n+import pkg_resources\n+import requests\n+\n+pkg_resources.declare_namespace('perceval.backends')\n+\n+from perceval.backend import BackendCommandArgumentParser\n+from perceval.utils import (DEFAULT_DATETIME, DEFAULT_LAST_DATETIME)\n+from perceval.backends.core.pagure import (Pagure,\n+                                           PagureCommand,\n+                                           PagureClient,\n+                                           CATEGORY_ISSUE,\n+                                           MAX_CATEGORY_ITEMS_PER_PAGE)\n+from base import TestCaseBackendArchive\n+\n+PAGURE_API_URL = \"https://pagure.io/api/0\"\n+PAGURE_REPO_URL = PAGURE_API_URL + \"/Project-example\"\n+PAGURE_ISSUES_URL = PAGURE_REPO_URL + \"/issues\"\n+\n+# Repository with issue tracker disabled\n+PAGURE_REPO_URL_DISABLED_URL = PAGURE_API_URL + \"/Project-test-example\"\n+PAGURE_ISSUES_DISABLED_URL = PAGURE_REPO_URL_DISABLED_URL + \"/issues\"\n+\n+PAGURE_NAMESPACE_REPO_URL = PAGURE_API_URL + \"Test-group/Project-namespace-example\"\n+PAGURE_NAMESPACE_ISSUES_URL = PAGURE_NAMESPACE_REPO_URL + \"/issues\"\n+\n+\n+def read_file(filename, mode='r'):\n+    with open(os.path.join(os.path.dirname(os.path.abspath(__file__)), filename), mode) as f:\n+        content = f.read()\n+    return content\n+\n+\n+class TestPagureBackend(unittest.TestCase):\n+    \"\"\"Pagure backend tests\"\"\"\n+\n+    @httpretty.activate\n+    def test_initialization(self):\n+        \"\"\"Test whether attributes are initialized\"\"\"\n+\n+        pagure = Pagure(namespace=None, repository='Project-example', api_token='aaa', tag='test')\n+\n+        # Testing initialization when repository is not within a namespace\n+        self.assertEqual(pagure.repository, 'Project-example')\n+        self.assertIsNone(pagure.namespace)\n+        self.assertEqual(pagure.origin, 'https://pagure.io/Project-example')\n+        self.assertEqual(pagure.tag, 'test')\n+        self.assertEqual(pagure.max_items, MAX_CATEGORY_ITEMS_PER_PAGE)\n+        self.assertEqual(pagure.categories, [CATEGORY_ISSUE])\n+        self.assertEqual(pagure.api_token, 'aaa')\n+        self.assertTrue(pagure.ssl_verify)\n+\n+        # When tag is empty or None it will be set to the value in origin\n+        pagure = Pagure(namespace=None, repository='Project-example', api_token='aaa', ssl_verify=False)\n+        self.assertEqual(pagure.repository, 'Project-example')\n+        self.assertIsNone(pagure.namespace)\n+        self.assertEqual(pagure.origin, 'https://pagure.io/Project-example')\n+        self.assertEqual(pagure.tag, 'https://pagure.io/Project-example')\n+        self.assertFalse(pagure.ssl_verify)\n+        self.assertEqual(pagure.api_token, 'aaa')\n+\n+        pagure = Pagure(namespace=None, repository='Project-example', api_token='aaa', tag='')\n+        self.assertEqual(pagure.repository, 'Project-example')\n+        self.assertIsNone(pagure.namespace)\n+        self.assertEqual(pagure.origin, 'https://pagure.io/Project-example')\n+        self.assertEqual(pagure.tag, 'https://pagure.io/Project-example')\n+        self.assertEqual(pagure.api_token, 'aaa')\n+\n+        # Empty value generates a None API token\n+        pagure = Pagure(repository='Project-example', tag='test')\n+        self.assertEqual(pagure.repository, 'Project-example')\n+        self.assertIsNone(pagure.namespace)\n+        self.assertEqual(pagure.origin, 'https://pagure.io/Project-example')\n+        self.assertEqual(pagure.tag, 'test')\n+        self.assertIsNone(pagure.api_token)\n+\n+        # Testing initialization when repository is within a namespace\n+        pagure = Pagure(namespace='Test-group', repository='Project-example-namespace', api_token='aaa', tag='testing')\n+        self.assertEqual(pagure.repository, 'Project-example-namespace')\n+        self.assertEqual(pagure.namespace, 'Test-group')\n+        self.assertEqual(pagure.origin, 'https://pagure.io/Test-group/Project-example-namespace')\n+        self.assertEqual(pagure.tag, 'testing')\n+        self.assertEqual(pagure.max_items, MAX_CATEGORY_ITEMS_PER_PAGE)\n+        self.assertEqual(pagure.categories, [CATEGORY_ISSUE])\n+        self.assertEqual(pagure.api_token, 'aaa')\n+        self.assertTrue(pagure.ssl_verify)\n+\n+    def test_has_resuming(self):\n+        \"\"\"Test if it returns True when has_resuming is called\"\"\"\n+\n+        self.assertEqual(Pagure.has_resuming(), True)\n+\n+    def test_has_archiving(self):\n+        \"\"\"Test if it returns True when has_archiving is called\"\"\"\n+\n+        self.assertEqual(Pagure.has_archiving(), True)\n+\n+    @httpretty.activate\n+    def test_fetch_issues(self):\n+        \"\"\"Test whether a list of issues is returned\"\"\"\n+\n+        body = read_file('data/pagure/pagure_repo_issue_1')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=body,\n+                               status=200,\n+                               )\n+        pagure = Pagure(repository='Project-example', api_token='aaa')\n+        issues = [issues for issues in pagure.fetch(from_date=None, to_date=None)]\n+\n+        self.assertEqual(len(issues), 1)\n+\n+        issue = issues[0]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['uuid'], '41071b08dd75f34ca92c6d5ecb844e7a3e5939c6')\n+        self.assertEqual(issue['updated_on'], 1583508642.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Project-example')\n+        self.assertEqual(len(issue['data']['comments']), 1)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+        self.assertEqual(len(issue['data']['comments'][0]['reactions']), 0)\n+\n+    @httpretty.activate\n+    def test_fetch_issues_disabled(self):\n+        \"\"\"Test whether an empty response is returned in case a repository\n+           has disabled issue tracker\n+        \"\"\"\n+        body = read_file('data/pagure/pagure_empty_request')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=body,\n+                               status=404,\n+                               )\n+        pagure = Pagure(repository='Project-test-example')\n+        issues = [issues for issues in pagure.fetch(from_date=None, to_date=None)]\n+        self.assertEqual(len(issues), 0)\n+        self.assertListEqual(issues, [])\n+\n+    @httpretty.activate\n+    def test_search_fields_issues(self):\n+        \"\"\"Test whether the search_fields is properly set\"\"\"\n+\n+        body = read_file('data/pagure/pagure_repo_issue_1')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=body,\n+                               status=200,\n+                               )\n+\n+        pagure = Pagure(repository='Project-example', api_token='aaa')\n+        issues = [issues for issues in pagure.fetch(from_date=None, to_date=None)]\n+\n+        issue = issues[0]\n+        self.assertEqual(pagure.metadata_id(issue['data']), issue['search_fields']['item_id'])\n+        self.assertIsNone(issue['search_fields']['namespace'])\n+        self.assertEqual(issue['search_fields']['repo'], 'Project-example')\n+\n+    @httpretty.activate\n+    def test_fetch_more_issues(self):\n+        \"\"\"Test when return two issues\"\"\"\n+\n+        issue_1 = read_file('data/pagure/pagure_repo_issue_1')\n+        issue_2 = read_file('data/pagure/pagure_repo_only_issue_2')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=issue_1,\n+                               status=200,\n+                               forcing_headers={\n+                                   'Link': '<' + PAGURE_ISSUES_URL + '/?&page=2>; rel=\"next\", <' +\n+                                           PAGURE_ISSUES_URL + '/?&page=3>; rel=\"last\"'\n+                               }\n+                               )\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL + '/?&page=2',\n+                               body=issue_2,\n+                               status=200,\n+                               )\n+\n+        pagure = Pagure(repository='Project-example')\n+        issues = [issues for issues in pagure.fetch()]\n+\n+        self.assertEqual(len(issues), 2)\n+\n+        issue = issues[0]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['uuid'], '41071b08dd75f34ca92c6d5ecb844e7a3e5939c6')\n+        self.assertEqual(issue['updated_on'], 1583508642.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Project-example')\n+        self.assertEqual(len(issue['data']['comments']), 1)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk08')\n+        self.assertEqual(len(issue['data']['comments'][0]['reactions']), 0)\n+\n+        issue = issues[1]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['uuid'], '7dd3642664c8a7e475814b9037277df775657850')\n+        self.assertEqual(issue['updated_on'], 1583558174.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk0806')\n+        self.assertEqual(len(issue['data']['comments']), 2)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+        self.assertEqual(len(issue['data']['comments'][0]['reactions']), 0)\n+        self.assertEqual(len(issue['data']['comments'][1]['reactions']), 1)\n+        self.assertListEqual(issue['data']['comments'][1]['reactions']['Thumbs up'], ['animeshk0806'])\n+\n+    @httpretty.activate\n+    def test_fetch_issues_until_date(self):\n+        \"\"\"Test when return issue till a particular date\"\"\"\n+\n+        issue_1 = read_file('data/pagure/pagure_repo_issue_1')\n+        issue_2 = read_file('data/pagure/pagure_repo_only_issue_2')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=issue_1,\n+                               status=200,\n+                               forcing_headers={\n+                                   'Link': '<' + PAGURE_ISSUES_URL + '/?&page=2>; rel=\"next\", <' +\n+                                           PAGURE_ISSUES_URL + '/?&page=3>; rel=\"last\"'\n+                               }\n+                               )\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL + '/?&page=2',\n+                               body=issue_2,\n+                               status=200,\n+                               )\n+\n+        to_date = datetime.datetime(2020, 3, 7)\n+        pagure = Pagure(repository='Project-example')\n+        issues = [issues for issues in pagure.fetch(to_date=to_date)]\n+\n+        self.assertEqual(len(issues), 1)\n+\n+        issue = issues[0]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['uuid'], '41071b08dd75f34ca92c6d5ecb844e7a3e5939c6')\n+        self.assertEqual(issue['updated_on'], 1583508642.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk08')\n+        self.assertEqual(len(issue['data']['comments']), 1)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+\n+    @httpretty.activate\n+    def test_fetch_from_date(self):\n+        \"\"\"Test when return from date\"\"\"",
        "path": "tests/test_pagure.py",
        "position": null,
        "original_position": 279,
        "commit_id": "70a89aa1dccc5152ed4a52cb4c5e4e327ba3595a",
        "original_commit_id": "bc85386c68f52f62fcf7b392a494aca072b940d2",
        "user": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "small typo: `Test when fetching issues from a given date`?",
        "created_at": "2020-03-08T14:47:17Z",
        "updated_at": "2020-03-08T18:21:42Z",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r389375934",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621",
        "author_association": "MEMBER",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389375934"
          },
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r389375934"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389375934/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "user_data": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false,
          "name": "valerio",
          "company": "@Bitergia ",
          "blog": "http://valeriocos.github.io/",
          "location": "Madrid, Spain",
          "email": "valcos@bitergia.com",
          "hireable": true,
          "bio": null,
          "public_repos": 57,
          "public_gists": 28,
          "followers": 34,
          "following": 5,
          "created_at": "2014-01-27T14:30:30Z",
          "updated_at": "2020-03-17T10:02:44Z",
          "organizations": [
            {
              "login": "Bitergia",
              "id": 1918070,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=",
              "url": "https://api.github.com/orgs/Bitergia",
              "repos_url": "https://api.github.com/orgs/Bitergia/repos",
              "events_url": "https://api.github.com/orgs/Bitergia/events",
              "hooks_url": "https://api.github.com/orgs/Bitergia/hooks",
              "issues_url": "https://api.github.com/orgs/Bitergia/issues",
              "members_url": "https://api.github.com/orgs/Bitergia/members{/member}",
              "public_members_url": "https://api.github.com/orgs/Bitergia/public_members{/member}",
              "avatar_url": "https://avatars3.githubusercontent.com/u/1918070?v=4",
              "description": null
            },
            {
              "login": "grimoirelab",
              "id": 16151805,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1",
              "url": "https://api.github.com/orgs/grimoirelab",
              "repos_url": "https://api.github.com/orgs/grimoirelab/repos",
              "events_url": "https://api.github.com/orgs/grimoirelab/events",
              "hooks_url": "https://api.github.com/orgs/grimoirelab/hooks",
              "issues_url": "https://api.github.com/orgs/grimoirelab/issues",
              "members_url": "https://api.github.com/orgs/grimoirelab/members{/member}",
              "public_members_url": "https://api.github.com/orgs/grimoirelab/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/16151805?v=4",
              "description": ""
            },
            {
              "login": "chaoss",
              "id": 29740296,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
              "url": "https://api.github.com/orgs/chaoss",
              "repos_url": "https://api.github.com/orgs/chaoss/repos",
              "events_url": "https://api.github.com/orgs/chaoss/events",
              "hooks_url": "https://api.github.com/orgs/chaoss/hooks",
              "issues_url": "https://api.github.com/orgs/chaoss/issues",
              "members_url": "https://api.github.com/orgs/chaoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/chaoss/public_members{/member}",
              "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
              "description": ""
            }
          ]
        },
        "reactions_data": []
      },
      {
        "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389376636",
        "pull_request_review_id": 370834781,
        "id": 389376636,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM3NjYzNg==",
        "diff_hunk": "@@ -0,0 +1,701 @@\n+#!/usr/bin/env python3\n+# -*- coding: utf-8 -*-\n+#\n+# Copyright (C) 2015-2020 Bitergia\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program. If not, see <http://www.gnu.org/licenses/>.\n+#\n+# Authors:\n+#     Animesh Kumar<animuz111@gmail.com>\n+#\n+\n+import datetime\n+import os\n+import unittest.mock\n+import httpretty\n+import pkg_resources\n+import requests\n+\n+pkg_resources.declare_namespace('perceval.backends')\n+\n+from perceval.backend import BackendCommandArgumentParser\n+from perceval.utils import (DEFAULT_DATETIME, DEFAULT_LAST_DATETIME)\n+from perceval.backends.core.pagure import (Pagure,\n+                                           PagureCommand,\n+                                           PagureClient,\n+                                           CATEGORY_ISSUE,\n+                                           MAX_CATEGORY_ITEMS_PER_PAGE)\n+from base import TestCaseBackendArchive\n+\n+PAGURE_API_URL = \"https://pagure.io/api/0\"\n+PAGURE_REPO_URL = PAGURE_API_URL + \"/Project-example\"\n+PAGURE_ISSUES_URL = PAGURE_REPO_URL + \"/issues\"\n+\n+# Repository with issue tracker disabled\n+PAGURE_REPO_URL_DISABLED_URL = PAGURE_API_URL + \"/Project-test-example\"\n+PAGURE_ISSUES_DISABLED_URL = PAGURE_REPO_URL_DISABLED_URL + \"/issues\"\n+\n+PAGURE_NAMESPACE_REPO_URL = PAGURE_API_URL + \"Test-group/Project-namespace-example\"\n+PAGURE_NAMESPACE_ISSUES_URL = PAGURE_NAMESPACE_REPO_URL + \"/issues\"\n+\n+\n+def read_file(filename, mode='r'):\n+    with open(os.path.join(os.path.dirname(os.path.abspath(__file__)), filename), mode) as f:\n+        content = f.read()\n+    return content\n+\n+\n+class TestPagureBackend(unittest.TestCase):\n+    \"\"\"Pagure backend tests\"\"\"\n+\n+    @httpretty.activate\n+    def test_initialization(self):\n+        \"\"\"Test whether attributes are initialized\"\"\"\n+\n+        pagure = Pagure(namespace=None, repository='Project-example', api_token='aaa', tag='test')\n+\n+        # Testing initialization when repository is not within a namespace\n+        self.assertEqual(pagure.repository, 'Project-example')\n+        self.assertIsNone(pagure.namespace)\n+        self.assertEqual(pagure.origin, 'https://pagure.io/Project-example')\n+        self.assertEqual(pagure.tag, 'test')\n+        self.assertEqual(pagure.max_items, MAX_CATEGORY_ITEMS_PER_PAGE)\n+        self.assertEqual(pagure.categories, [CATEGORY_ISSUE])\n+        self.assertEqual(pagure.api_token, 'aaa')\n+        self.assertTrue(pagure.ssl_verify)\n+\n+        # When tag is empty or None it will be set to the value in origin\n+        pagure = Pagure(namespace=None, repository='Project-example', api_token='aaa', ssl_verify=False)\n+        self.assertEqual(pagure.repository, 'Project-example')\n+        self.assertIsNone(pagure.namespace)\n+        self.assertEqual(pagure.origin, 'https://pagure.io/Project-example')\n+        self.assertEqual(pagure.tag, 'https://pagure.io/Project-example')\n+        self.assertFalse(pagure.ssl_verify)\n+        self.assertEqual(pagure.api_token, 'aaa')\n+\n+        pagure = Pagure(namespace=None, repository='Project-example', api_token='aaa', tag='')\n+        self.assertEqual(pagure.repository, 'Project-example')\n+        self.assertIsNone(pagure.namespace)\n+        self.assertEqual(pagure.origin, 'https://pagure.io/Project-example')\n+        self.assertEqual(pagure.tag, 'https://pagure.io/Project-example')\n+        self.assertEqual(pagure.api_token, 'aaa')\n+\n+        # Empty value generates a None API token\n+        pagure = Pagure(repository='Project-example', tag='test')\n+        self.assertEqual(pagure.repository, 'Project-example')\n+        self.assertIsNone(pagure.namespace)\n+        self.assertEqual(pagure.origin, 'https://pagure.io/Project-example')\n+        self.assertEqual(pagure.tag, 'test')\n+        self.assertIsNone(pagure.api_token)\n+\n+        # Testing initialization when repository is within a namespace\n+        pagure = Pagure(namespace='Test-group', repository='Project-example-namespace', api_token='aaa', tag='testing')\n+        self.assertEqual(pagure.repository, 'Project-example-namespace')\n+        self.assertEqual(pagure.namespace, 'Test-group')\n+        self.assertEqual(pagure.origin, 'https://pagure.io/Test-group/Project-example-namespace')\n+        self.assertEqual(pagure.tag, 'testing')\n+        self.assertEqual(pagure.max_items, MAX_CATEGORY_ITEMS_PER_PAGE)\n+        self.assertEqual(pagure.categories, [CATEGORY_ISSUE])\n+        self.assertEqual(pagure.api_token, 'aaa')\n+        self.assertTrue(pagure.ssl_verify)\n+\n+    def test_has_resuming(self):\n+        \"\"\"Test if it returns True when has_resuming is called\"\"\"\n+\n+        self.assertEqual(Pagure.has_resuming(), True)\n+\n+    def test_has_archiving(self):\n+        \"\"\"Test if it returns True when has_archiving is called\"\"\"\n+\n+        self.assertEqual(Pagure.has_archiving(), True)\n+\n+    @httpretty.activate\n+    def test_fetch_issues(self):\n+        \"\"\"Test whether a list of issues is returned\"\"\"\n+\n+        body = read_file('data/pagure/pagure_repo_issue_1')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=body,\n+                               status=200,\n+                               )\n+        pagure = Pagure(repository='Project-example', api_token='aaa')\n+        issues = [issues for issues in pagure.fetch(from_date=None, to_date=None)]\n+\n+        self.assertEqual(len(issues), 1)\n+\n+        issue = issues[0]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['uuid'], '41071b08dd75f34ca92c6d5ecb844e7a3e5939c6')\n+        self.assertEqual(issue['updated_on'], 1583508642.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Project-example')\n+        self.assertEqual(len(issue['data']['comments']), 1)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+        self.assertEqual(len(issue['data']['comments'][0]['reactions']), 0)\n+\n+    @httpretty.activate\n+    def test_fetch_issues_disabled(self):\n+        \"\"\"Test whether an empty response is returned in case a repository\n+           has disabled issue tracker\n+        \"\"\"\n+        body = read_file('data/pagure/pagure_empty_request')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=body,\n+                               status=404,\n+                               )\n+        pagure = Pagure(repository='Project-test-example')\n+        issues = [issues for issues in pagure.fetch(from_date=None, to_date=None)]\n+        self.assertEqual(len(issues), 0)\n+        self.assertListEqual(issues, [])\n+\n+    @httpretty.activate\n+    def test_search_fields_issues(self):\n+        \"\"\"Test whether the search_fields is properly set\"\"\"\n+\n+        body = read_file('data/pagure/pagure_repo_issue_1')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=body,\n+                               status=200,\n+                               )\n+\n+        pagure = Pagure(repository='Project-example', api_token='aaa')\n+        issues = [issues for issues in pagure.fetch(from_date=None, to_date=None)]\n+\n+        issue = issues[0]\n+        self.assertEqual(pagure.metadata_id(issue['data']), issue['search_fields']['item_id'])\n+        self.assertIsNone(issue['search_fields']['namespace'])\n+        self.assertEqual(issue['search_fields']['repo'], 'Project-example')\n+\n+    @httpretty.activate\n+    def test_fetch_more_issues(self):\n+        \"\"\"Test when return two issues\"\"\"\n+\n+        issue_1 = read_file('data/pagure/pagure_repo_issue_1')\n+        issue_2 = read_file('data/pagure/pagure_repo_only_issue_2')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=issue_1,\n+                               status=200,\n+                               forcing_headers={\n+                                   'Link': '<' + PAGURE_ISSUES_URL + '/?&page=2>; rel=\"next\", <' +\n+                                           PAGURE_ISSUES_URL + '/?&page=3>; rel=\"last\"'\n+                               }\n+                               )\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL + '/?&page=2',\n+                               body=issue_2,\n+                               status=200,\n+                               )\n+\n+        pagure = Pagure(repository='Project-example')\n+        issues = [issues for issues in pagure.fetch()]\n+\n+        self.assertEqual(len(issues), 2)\n+\n+        issue = issues[0]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['uuid'], '41071b08dd75f34ca92c6d5ecb844e7a3e5939c6')\n+        self.assertEqual(issue['updated_on'], 1583508642.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Project-example')\n+        self.assertEqual(len(issue['data']['comments']), 1)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk08')\n+        self.assertEqual(len(issue['data']['comments'][0]['reactions']), 0)\n+\n+        issue = issues[1]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['uuid'], '7dd3642664c8a7e475814b9037277df775657850')\n+        self.assertEqual(issue['updated_on'], 1583558174.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk0806')\n+        self.assertEqual(len(issue['data']['comments']), 2)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+        self.assertEqual(len(issue['data']['comments'][0]['reactions']), 0)\n+        self.assertEqual(len(issue['data']['comments'][1]['reactions']), 1)\n+        self.assertListEqual(issue['data']['comments'][1]['reactions']['Thumbs up'], ['animeshk0806'])\n+\n+    @httpretty.activate\n+    def test_fetch_issues_until_date(self):\n+        \"\"\"Test when return issue till a particular date\"\"\"\n+\n+        issue_1 = read_file('data/pagure/pagure_repo_issue_1')\n+        issue_2 = read_file('data/pagure/pagure_repo_only_issue_2')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=issue_1,\n+                               status=200,\n+                               forcing_headers={\n+                                   'Link': '<' + PAGURE_ISSUES_URL + '/?&page=2>; rel=\"next\", <' +\n+                                           PAGURE_ISSUES_URL + '/?&page=3>; rel=\"last\"'\n+                               }\n+                               )\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL + '/?&page=2',\n+                               body=issue_2,\n+                               status=200,\n+                               )\n+\n+        to_date = datetime.datetime(2020, 3, 7)\n+        pagure = Pagure(repository='Project-example')\n+        issues = [issues for issues in pagure.fetch(to_date=to_date)]\n+\n+        self.assertEqual(len(issues), 1)\n+\n+        issue = issues[0]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['uuid'], '41071b08dd75f34ca92c6d5ecb844e7a3e5939c6')\n+        self.assertEqual(issue['updated_on'], 1583508642.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk08')\n+        self.assertEqual(len(issue['data']['comments']), 1)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+\n+    @httpretty.activate\n+    def test_fetch_from_date(self):\n+        \"\"\"Test when return from date\"\"\"\n+\n+        body = read_file('data/pagure/pagure_repo_issue_from_2020_03_07')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=body,\n+                               status=200,\n+                               )\n+\n+        from_date = datetime.datetime(2020, 3, 7)\n+        pagure = Pagure(repository='Project-example')\n+        issues = [issues for issues in pagure.fetch(from_date=from_date)]\n+\n+        self.assertEqual(len(issues), 1)\n+        issue = issues[0]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['uuid'], '7dd3642664c8a7e475814b9037277df775657850')\n+        self.assertEqual(issue['updated_on'], 1583558174.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk0806')\n+        self.assertEqual(len(issue['data']['comments']), 2)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+\n+    @httpretty.activate\n+    def test_fetch_issues_namespace(self):\n+        \"\"\"Test issues fetch from a repository within a namespace\"\"\"\n+\n+        issue_1 = read_file('data/pagure/pagure_namespace_issue_2')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_NAMESPACE_ISSUES_URL,\n+                               body=issue_1, status=200,\n+                               )\n+\n+        pagure = Pagure(namespace='Test-group', repository='Project-namespace-example')\n+        issues = [issues for issues in pagure.fetch()]\n+\n+        self.assertEqual(len(issues), 2)\n+\n+        issue = issues[0]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Test-group/Project-namespace-example')\n+        self.assertEqual(issue['uuid'], 'bdf90e94bf3b17ed2f75f5e5187e21a62512ca5a')\n+        self.assertEqual(issue['updated_on'], 1583509042.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Test-group/Project-namespace-example')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk08')\n+        self.assertEqual(len(issue['data']['comments']), 1)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+        self.assertEqual(len(issue['data']['comments'][0]['reactions']), 0)\n+\n+        issue = issues[1]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Test-group/Project-namespace-example')\n+        self.assertEqual(issue['uuid'], 'eec4d7bf5c3ca405e39f39a8c6faf616fd4fa425')\n+        self.assertEqual(issue['updated_on'], 1583562831.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Test-group/Project-namespace-example')\n+        self.assertEqual(issue['data']['assignee']['name'], 'animeshk0806')\n+        self.assertEqual(len(issue['data']['comments']), 2)\n+        self.assertEqual(issue['data']['comments'][1]['user']['name'], 'animeshk08')\n+        self.assertEqual(len(issue['data']['comments'][0]['reactions']), 1)\n+        self.assertListEqual(issue['data']['comments'][0]['reactions']['Heart'], ['animeshk0806'])\n+\n+    @httpretty.activate\n+    def test_fetch_empty(self):\n+        \"\"\"Test when return empty\"\"\"\n+\n+        body = \"\"\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=body, status=200,\n+                               )\n+        from_date = datetime.datetime(2016, 1, 1)\n+        pagure = Pagure(repository='Project-example', api_token='aaa')\n+\n+        issues = [issues for issues in pagure.fetch(from_date=from_date)]\n+\n+        self.assertEqual(len(issues), 0)\n+\n+\n+class TestPagureBackendArchive(TestCaseBackendArchive):\n+    \"\"\"Pagure backend tests using an archive\"\"\"\n+\n+    def setUp(self):\n+        super().setUp()\n+        self.backend_write_archive = Pagure(repository='Project-example', api_token='aaa', archive=self.archive)\n+        self.backend_read_archive = Pagure(repository='Project-example', api_token='aaa', archive=self.archive)\n+\n+    @httpretty.activate\n+    def test_fetch_issues_from_archive(self):\n+        \"\"\"Test whether a list of issues is returned from archive\"\"\"\n+\n+        issue_2 = read_file('data/pagure/pagure_repo_issue_1')\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=issue_2,\n+                               status=200,\n+                               )\n+\n+        self._test_fetch_from_archive(from_date=None)\n+\n+    @httpretty.activate\n+    def test_fetch_from_date_from_archive(self):\n+        \"\"\"Test whether a list of issues is returned from archive after a given date\"\"\"\n+\n+        body = read_file('data/pagure/pagure_repo_issue_from_2020_03_07')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=body,\n+                               status=200,\n+                               )\n+        from_date = datetime.datetime(2020, 3, 7)\n+        self._test_fetch_from_archive(from_date=from_date)\n+\n+    @httpretty.activate\n+    def test_fetch_from_empty_archive(self):\n+        \"\"\"Test whether no issues are returned when the archive is empty\"\"\"\n+\n+        body = \"\"\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=body, status=200,\n+                               )\n+\n+        self._test_fetch_from_archive()\n+\n+\n+class TestPagureClient(unittest.TestCase):\n+    \"\"\"Pagure API client tests\"\"\"\n+\n+    @httpretty.activate\n+    def test_init(self):\n+        \"\"\"Test initialization of client\"\"\"\n+\n+        client = PagureClient(namespace=None, repository=\"Project-example\", token=\"aaa\")\n+\n+        self.assertIsNone(client.namespace)\n+        self.assertEqual(client.repository, \"Project-example\")\n+        self.assertEqual(client.sleep_time, PagureClient.DEFAULT_SLEEP_TIME)\n+        self.assertEqual(client.max_retries, PagureClient.MAX_RETRIES)\n+        self.assertEqual(client.base_url, PAGURE_API_URL)\n+        self.assertTrue(client.ssl_verify)\n+\n+        client = PagureClient(None, \"Project-test-example\", token='aaa',\n+                              sleep_time=20, max_retries=2, max_items=1,\n+                              archive=None, from_archive=False)\n+        self.assertIsNone(client.namespace)\n+        self.assertEqual(client.repository, \"Project-test-example\")\n+        self.assertEqual(client.token, 'aaa')\n+        self.assertEqual(client.sleep_time, 20)\n+        self.assertEqual(client.max_retries, 2)\n+        self.assertEqual(client.max_items, 1)\n+        self.assertIsNone(client.archive)\n+        self.assertFalse(client.from_archive)\n+\n+        client = PagureClient(None, repository='Project-test-example', token=None)\n+        self.assertIsNone(client.token)\n+\n+        # When the repository is within a namespace\n+        client = PagureClient(namespace='Test-group', repository=\"Project-namespace-example\", token=\"aaa\")\n+\n+        self.assertEqual(client.namespace, 'Test-group')\n+        self.assertEqual(client.repository, \"Project-namespace-example\")\n+        self.assertEqual(client.sleep_time, PagureClient.DEFAULT_SLEEP_TIME)\n+        self.assertEqual(client.max_retries, PagureClient.MAX_RETRIES)\n+        self.assertEqual(client.base_url, PAGURE_API_URL)\n+        self.assertTrue(client.ssl_verify)\n+\n+    @httpretty.activate\n+    def test_issues(self):\n+        \"\"\"Test issues API call\"\"\"\n+\n+        issues = read_file('data/pagure/pagure_repo_issue_1')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=issues, status=200,\n+                               )\n+\n+        client = PagureClient(namespace=None, repository='Project-example', token='aaa')\n+        raw_issues = [issues for issues in client.issues()]\n+        self.assertEqual(raw_issues[0], issues)\n+\n+        # Check requests\n+        expected = {\n+            'status': ['all'],\n+            'per_page': ['100'],\n+            'order': ['asc']\n+        }\n+\n+        self.assertDictEqual(httpretty.last_request().querystring, expected)\n+        self.assertEqual(httpretty.last_request().headers[\"Authorization\"], 'token aaa')  # check\n+\n+    @httpretty.activate\n+    def test_namespace_issues(self):\n+        \"\"\"Test fetching issues from a repository within a namespace\"\"\"\n+\n+        issue = read_file('data/pagure/pagure_namespace_issue_2')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_NAMESPACE_ISSUES_URL,\n+                               body=issue, status=200)\n+\n+        client = PagureClient(namespace='Test-group', repository='Project-namespace-example', token=None)\n+\n+        raw_issues = [issues for issues in client.issues()]\n+        self.assertEqual(raw_issues[0], issue)\n+\n+        # Check requests\n+        expected = {\n+            'status': ['all'],\n+            'per_page': ['100'],\n+            'order': ['asc']\n+        }\n+\n+        self.assertDictEqual(httpretty.last_request().querystring, expected)\n+        self.assertIsNone(httpretty.last_request().headers[\"Authorization\"])\n+\n+    @httpretty.activate\n+    def test_get_from_date_issues(self):\n+        \"\"\"Test issues from date API call\"\"\"\n+\n+        issues = read_file('data/pagure/pagure_repo_issue_from_2020_03_07')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=issues,\n+                               status=200,\n+                               )\n+\n+        from_date = datetime.datetime(2020, 3, 7)\n+        client = PagureClient(namespace=None, repository='Project-example', token='aaa')\n+\n+        raw_issues = [issues for issues in client.issues(from_date=from_date)]\n+        self.assertEqual(raw_issues[0], issues)\n+\n+        # Check requests\n+        expected = {\n+            'status': ['all'],\n+            'per_page': ['100'],\n+            'order': ['asc'],\n+            'since': ['2020-03-07 00:00:00']\n+        }\n+        self.assertDictEqual(httpretty.last_request().querystring, expected)\n+        self.assertEqual(httpretty.last_request().headers[\"Authorization\"], \"token aaa\")\n+\n+    @httpretty.activate\n+    def test_get_empty_issues(self):\n+        \"\"\"Test when issue is empty API call\"\"\"\n+\n+        issue = read_file('data/pagure/pagure_empty_request')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=issue, status=200,\n+                               )\n+\n+        client = PagureClient(namespace=None, repository=\"Project-example\", token=\"aaa\")\n+\n+        raw_issues = [issues for issues in client.issues()]\n+        self.assertEqual(raw_issues[0], issue)\n+\n+        # Check requests\n+        expected = {\n+            'status': ['all'],\n+            'per_page': ['100'],\n+            'order': ['asc']\n+        }\n+\n+        self.assertDictEqual(httpretty.last_request().querystring, expected)\n+        self.assertEqual(httpretty.last_request().headers[\"Authorization\"], \"token aaa\")\n+\n+    @httpretty.activate\n+    def test_http_wrong_status(self):\n+        \"\"\"Test if an error is raised when the http status was not 200\"\"\"\n+\n+        issue = \"\"\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=issue,\n+                               status=501,\n+                               )\n+\n+        client = PagureClient(namespace=None, repository=\"Project-example\", token=\"aaa\", sleep_time=1, max_retries=1)\n+\n+        with self.assertRaises(requests.exceptions.HTTPError):\n+            _ = [issues for issues in client.issues()]\n+\n+        # Check requests\n+        expected = {\n+            'status': ['all'],\n+            'per_page': ['100'],\n+            'order': ['asc']\n+        }\n+\n+        self.assertDictEqual(httpretty.last_request().querystring, expected)\n+        self.assertEqual(httpretty.last_request().headers[\"Authorization\"], \"token aaa\")\n+\n+    @httpretty.activate\n+    def test_get_page_issues(self):\n+        \"\"\"Test issues pagination API call\"\"\"\n+\n+        issue_1 = read_file('data/pagure/pagure_repo_issue_1')\n+        issue_2 = read_file('data/pagure/pagure_repo_only_issue_2')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=issue_1,\n+                               status=200,\n+                               forcing_headers={\n+                                   'Link': '<' + PAGURE_ISSUES_URL + '/?&page=2>; rel=\"next\", <' +\n+                                           PAGURE_ISSUES_URL + '/?&page=3>; rel=\"last\"'\n+                               })\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL + '/?&page=2',\n+                               body=issue_2,\n+                               status=200,\n+                               )\n+\n+        client = PagureClient(namespace=None, repository=\"Project-example\", token=\"aaa\")\n+\n+        issues = [issues for issues in client.issues()]\n+\n+        self.assertEqual(len(issues), 2)\n+        self.assertEqual(issues[0], issue_1)\n+        self.assertEqual(issues[1], issue_2)\n+\n+        # Check requests\n+        expected = {\n+            'status': ['all'],\n+            'page': ['2'],\n+            'per_page': ['100'],\n+            'order': ['asc']\n+        }\n+\n+        self.assertDictEqual(httpretty.last_request().querystring, expected)\n+        self.assertEqual(httpretty.last_request().headers[\"Authorization\"], \"token aaa\")\n+\n+\n+class TestPagureCommand(unittest.TestCase):\n+    \"\"\"PagureCommand unit tests\"\"\"\n+\n+    def test_backend_class(self):\n+        \"\"\"Test if the backend class is Pagure\"\"\"\n+\n+        self.assertIs(PagureCommand.BACKEND, Pagure)\n+\n+    def test_setup_cmd_parser(self):\n+        \"\"\"Test if the parser object is correctly initialized\"\"\"\n+\n+        parser = PagureCommand.setup_cmd_parser()\n+        self.assertIsInstance(parser, BackendCommandArgumentParser)\n+        self.assertEqual(parser._backend, Pagure)\n+\n+        # Testing initialization when a repository is within a namespace\n+        args = ['Test-group', 'Project-namespace-example',\n+                '--max-retries', '5',\n+                '--max-items', '10',\n+                '--tag', 'test', '--no-archive',\n+                '--api-token', 'abcdefgh',\n+                '--from-date', '1970-01-01',\n+                '--to-date', '2100-01-01',\n+                ]\n+\n+        parsed_args = parser.parse(*args)\n+        self.assertEqual(parsed_args.namespace, 'Test-group')\n+        self.assertEqual(parsed_args.repository, 'Project-namespace-example')\n+        self.assertEqual(parsed_args.max_retries, 5)\n+        self.assertEqual(parsed_args.max_items, 10)\n+        self.assertEqual(parsed_args.tag, 'test')\n+        self.assertEqual(parsed_args.from_date, DEFAULT_DATETIME)\n+        self.assertEqual(parsed_args.to_date, DEFAULT_LAST_DATETIME)\n+        self.assertTrue(parsed_args.no_archive)\n+        self.assertTrue(parsed_args.ssl_verify)\n+        self.assertEqual(parsed_args.api_token, 'abcdefgh')\n+\n+        # Testing initialization when a repository is not within a namespace\n+        args = ['Project-example',\n+                '--max-retries', '4',\n+                '--max-items', '20',\n+                '--no-archive',\n+                '--api-token', 'abcdefgh',\n+                '--from-date', '1970-01-01',",
        "path": "tests/test_pagure.py",
        "position": null,
        "original_position": 666,
        "commit_id": "70a89aa1dccc5152ed4a52cb4c5e4e327ba3595a",
        "original_commit_id": "bc85386c68f52f62fcf7b392a494aca072b940d2",
        "user": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "Can you set a different from-date and to-date in this test? thanks",
        "created_at": "2020-03-08T14:54:17Z",
        "updated_at": "2020-03-08T18:21:42Z",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r389376636",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621",
        "author_association": "MEMBER",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389376636"
          },
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r389376636"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389376636/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "user_data": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false,
          "name": "valerio",
          "company": "@Bitergia ",
          "blog": "http://valeriocos.github.io/",
          "location": "Madrid, Spain",
          "email": "valcos@bitergia.com",
          "hireable": true,
          "bio": null,
          "public_repos": 57,
          "public_gists": 28,
          "followers": 34,
          "following": 5,
          "created_at": "2014-01-27T14:30:30Z",
          "updated_at": "2020-03-17T10:02:44Z",
          "organizations": [
            {
              "login": "Bitergia",
              "id": 1918070,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=",
              "url": "https://api.github.com/orgs/Bitergia",
              "repos_url": "https://api.github.com/orgs/Bitergia/repos",
              "events_url": "https://api.github.com/orgs/Bitergia/events",
              "hooks_url": "https://api.github.com/orgs/Bitergia/hooks",
              "issues_url": "https://api.github.com/orgs/Bitergia/issues",
              "members_url": "https://api.github.com/orgs/Bitergia/members{/member}",
              "public_members_url": "https://api.github.com/orgs/Bitergia/public_members{/member}",
              "avatar_url": "https://avatars3.githubusercontent.com/u/1918070?v=4",
              "description": null
            },
            {
              "login": "grimoirelab",
              "id": 16151805,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1",
              "url": "https://api.github.com/orgs/grimoirelab",
              "repos_url": "https://api.github.com/orgs/grimoirelab/repos",
              "events_url": "https://api.github.com/orgs/grimoirelab/events",
              "hooks_url": "https://api.github.com/orgs/grimoirelab/hooks",
              "issues_url": "https://api.github.com/orgs/grimoirelab/issues",
              "members_url": "https://api.github.com/orgs/grimoirelab/members{/member}",
              "public_members_url": "https://api.github.com/orgs/grimoirelab/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/16151805?v=4",
              "description": ""
            },
            {
              "login": "chaoss",
              "id": 29740296,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
              "url": "https://api.github.com/orgs/chaoss",
              "repos_url": "https://api.github.com/orgs/chaoss/repos",
              "events_url": "https://api.github.com/orgs/chaoss/events",
              "hooks_url": "https://api.github.com/orgs/chaoss/hooks",
              "issues_url": "https://api.github.com/orgs/chaoss/issues",
              "members_url": "https://api.github.com/orgs/chaoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/chaoss/public_members{/member}",
              "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
              "description": ""
            }
          ]
        },
        "reactions_data": []
      },
      {
        "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389386941",
        "pull_request_review_id": 370843964,
        "id": 389386941,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM4Njk0MQ==",
        "diff_hunk": "@@ -0,0 +1,418 @@\n+# -*- coding: utf-8 -*-\n+#\n+# Copyright (C) 2015-2020 Bitergia\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program. If not, see <http://www.gnu.org/licenses/>.\n+#\n+# Authors:\n+#     Animesh Kumar <animuz111@gmail.com>\n+#\n+\n+import json\n+import logging\n+import requests\n+from grimoirelab_toolkit.datetime import (str_to_datetime)\n+from grimoirelab_toolkit.uris import urijoin\n+\n+from ...backend import (Backend,\n+                        BackendCommand,\n+                        BackendCommandArgumentParser,\n+                        DEFAULT_SEARCH_FIELD)\n+from ...client import HttpClient\n+from ...utils import DEFAULT_DATETIME, DEFAULT_LAST_DATETIME\n+from datetime import datetime\n+\n+CATEGORY_ISSUE = \"issue\"\n+\n+PAGURE_URL = \"https://pagure.io/\"\n+PAGURE_API_URL = \"https://pagure.io/api/0\"\n+\n+MAX_CATEGORY_ITEMS_PER_PAGE = 100\n+PER_PAGE = 100\n+\n+# Default sleep time and retries to deal with connection/server problems\n+DEFAULT_SLEEP_TIME = 1\n+MAX_RETRIES = 5\n+\n+logger = logging.getLogger(__name__)\n+\n+\n+class Pagure(Backend):\n+    \"\"\"Pagure backend for Perceval.\n+\n+    This class allows the fetch the issues stored in a Pagure\n+    repository. Note that api token is needed to perform",
        "path": "perceval/backends/core/pagure.py",
        "position": null,
        "original_position": 55,
        "commit_id": "70a89aa1dccc5152ed4a52cb4c5e4e327ba3595a",
        "original_commit_id": "bc85386c68f52f62fcf7b392a494aca072b940d2",
        "user": {
          "login": "animeshk08",
          "id": 32506591,
          "node_id": "MDQ6VXNlcjMyNTA2NTkx",
          "avatar_url": "https://avatars1.githubusercontent.com/u/32506591?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/animeshk08",
          "html_url": "https://github.com/animeshk08",
          "followers_url": "https://api.github.com/users/animeshk08/followers",
          "following_url": "https://api.github.com/users/animeshk08/following{/other_user}",
          "gists_url": "https://api.github.com/users/animeshk08/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/animeshk08/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/animeshk08/subscriptions",
          "organizations_url": "https://api.github.com/users/animeshk08/orgs",
          "repos_url": "https://api.github.com/users/animeshk08/repos",
          "events_url": "https://api.github.com/users/animeshk08/events{/privacy}",
          "received_events_url": "https://api.github.com/users/animeshk08/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "In the current implementation, none of the APIs really require a token. However, since the APIs did accept a token as a header I had included it. I have removed this statement from the doc.",
        "created_at": "2020-03-08T16:57:54Z",
        "updated_at": "2020-03-08T18:21:42Z",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r389386941",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621",
        "author_association": "CONTRIBUTOR",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389386941"
          },
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r389386941"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389386941/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "in_reply_to_id": 389375151,
        "user_data": {
          "login": "animeshk08",
          "id": 32506591,
          "node_id": "MDQ6VXNlcjMyNTA2NTkx",
          "avatar_url": "https://avatars1.githubusercontent.com/u/32506591?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/animeshk08",
          "html_url": "https://github.com/animeshk08",
          "followers_url": "https://api.github.com/users/animeshk08/followers",
          "following_url": "https://api.github.com/users/animeshk08/following{/other_user}",
          "gists_url": "https://api.github.com/users/animeshk08/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/animeshk08/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/animeshk08/subscriptions",
          "organizations_url": "https://api.github.com/users/animeshk08/orgs",
          "repos_url": "https://api.github.com/users/animeshk08/repos",
          "events_url": "https://api.github.com/users/animeshk08/events{/privacy}",
          "received_events_url": "https://api.github.com/users/animeshk08/received_events",
          "type": "User",
          "site_admin": false,
          "name": "Animesh Kumar",
          "company": null,
          "blog": "",
          "location": null,
          "email": null,
          "hireable": null,
          "bio": "Android| Data Science| Open Source",
          "public_repos": 48,
          "public_gists": 0,
          "followers": 5,
          "following": 2,
          "created_at": "2017-10-04T06:38:11Z",
          "updated_at": "2020-03-17T15:31:35Z",
          "organizations": []
        },
        "reactions_data": []
      },
      {
        "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389387038",
        "pull_request_review_id": 370843964,
        "id": 389387038,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM4NzAzOA==",
        "diff_hunk": "@@ -0,0 +1,418 @@\n+# -*- coding: utf-8 -*-\n+#\n+# Copyright (C) 2015-2020 Bitergia\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program. If not, see <http://www.gnu.org/licenses/>.\n+#\n+# Authors:\n+#     Animesh Kumar <animuz111@gmail.com>\n+#\n+\n+import json\n+import logging\n+import requests\n+from grimoirelab_toolkit.datetime import (str_to_datetime)\n+from grimoirelab_toolkit.uris import urijoin\n+\n+from ...backend import (Backend,\n+                        BackendCommand,\n+                        BackendCommandArgumentParser,\n+                        DEFAULT_SEARCH_FIELD)\n+from ...client import HttpClient\n+from ...utils import DEFAULT_DATETIME, DEFAULT_LAST_DATETIME\n+from datetime import datetime\n+\n+CATEGORY_ISSUE = \"issue\"\n+\n+PAGURE_URL = \"https://pagure.io/\"\n+PAGURE_API_URL = \"https://pagure.io/api/0\"\n+\n+MAX_CATEGORY_ITEMS_PER_PAGE = 100\n+PER_PAGE = 100\n+\n+# Default sleep time and retries to deal with connection/server problems\n+DEFAULT_SLEEP_TIME = 1\n+MAX_RETRIES = 5\n+\n+logger = logging.getLogger(__name__)\n+\n+\n+class Pagure(Backend):\n+    \"\"\"Pagure backend for Perceval.\n+\n+    This class allows the fetch the issues stored in a Pagure\n+    repository. Note that api token is needed to perform\n+    certain API calls\n+\n+    :param namespace: Pagure namespace\n+    :param repository: Pagure repository; in case the repository is within a namespace",
        "path": "perceval/backends/core/pagure.py",
        "position": null,
        "original_position": 59,
        "commit_id": "70a89aa1dccc5152ed4a52cb4c5e4e327ba3595a",
        "original_commit_id": "bc85386c68f52f62fcf7b392a494aca072b940d2",
        "user": {
          "login": "animeshk08",
          "id": 32506591,
          "node_id": "MDQ6VXNlcjMyNTA2NTkx",
          "avatar_url": "https://avatars1.githubusercontent.com/u/32506591?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/animeshk08",
          "html_url": "https://github.com/animeshk08",
          "followers_url": "https://api.github.com/users/animeshk08/followers",
          "following_url": "https://api.github.com/users/animeshk08/following{/other_user}",
          "gists_url": "https://api.github.com/users/animeshk08/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/animeshk08/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/animeshk08/subscriptions",
          "organizations_url": "https://api.github.com/users/animeshk08/orgs",
          "repos_url": "https://api.github.com/users/animeshk08/repos",
          "events_url": "https://api.github.com/users/animeshk08/events{/privacy}",
          "received_events_url": "https://api.github.com/users/animeshk08/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "Sorry, I thought it would help with a better understanding of the parameter. I have removed it ;)",
        "created_at": "2020-03-08T16:59:09Z",
        "updated_at": "2020-03-08T18:21:42Z",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r389387038",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621",
        "author_association": "CONTRIBUTOR",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389387038"
          },
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r389387038"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389387038/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "in_reply_to_id": 389375174,
        "user_data": {
          "login": "animeshk08",
          "id": 32506591,
          "node_id": "MDQ6VXNlcjMyNTA2NTkx",
          "avatar_url": "https://avatars1.githubusercontent.com/u/32506591?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/animeshk08",
          "html_url": "https://github.com/animeshk08",
          "followers_url": "https://api.github.com/users/animeshk08/followers",
          "following_url": "https://api.github.com/users/animeshk08/following{/other_user}",
          "gists_url": "https://api.github.com/users/animeshk08/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/animeshk08/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/animeshk08/subscriptions",
          "organizations_url": "https://api.github.com/users/animeshk08/orgs",
          "repos_url": "https://api.github.com/users/animeshk08/repos",
          "events_url": "https://api.github.com/users/animeshk08/events{/privacy}",
          "received_events_url": "https://api.github.com/users/animeshk08/received_events",
          "type": "User",
          "site_admin": false,
          "name": "Animesh Kumar",
          "company": null,
          "blog": "",
          "location": null,
          "email": null,
          "hireable": null,
          "bio": "Android| Data Science| Open Source",
          "public_repos": 48,
          "public_gists": 0,
          "followers": 5,
          "following": 2,
          "created_at": "2017-10-04T06:38:11Z",
          "updated_at": "2020-03-17T15:31:35Z",
          "organizations": []
        },
        "reactions_data": []
      },
      {
        "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389392063",
        "pull_request_review_id": 370847888,
        "id": 389392063,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM5MjA2Mw==",
        "diff_hunk": "@@ -0,0 +1,415 @@\n+# -*- coding: utf-8 -*-\n+#\n+# Copyright (C) 2015-2020 Bitergia\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program. If not, see <http://www.gnu.org/licenses/>.\n+#\n+# Authors:\n+#     Animesh Kumar <animuz111@gmail.com>\n+#\n+\n+import json\n+import logging\n+import requests\n+from grimoirelab_toolkit.datetime import (str_to_datetime)\n+from grimoirelab_toolkit.uris import urijoin\n+\n+from ...backend import (Backend,\n+                        BackendCommand,\n+                        BackendCommandArgumentParser,\n+                        DEFAULT_SEARCH_FIELD)\n+from ...client import HttpClient\n+from ...utils import DEFAULT_DATETIME, DEFAULT_LAST_DATETIME\n+from datetime import datetime\n+\n+CATEGORY_ISSUE = \"issue\"\n+\n+PAGURE_URL = \"https://pagure.io/\"\n+PAGURE_API_URL = \"https://pagure.io/api/0\"\n+\n+MAX_CATEGORY_ITEMS_PER_PAGE = 100\n+PER_PAGE = 100\n+\n+# Default sleep time and retries to deal with connection/server problems\n+DEFAULT_SLEEP_TIME = 1\n+MAX_RETRIES = 5\n+\n+logger = logging.getLogger(__name__)\n+\n+\n+class Pagure(Backend):\n+    \"\"\"Pagure backend for Perceval.\n+\n+    This class allows the fetch the issues stored in a Pagure\n+    repository.\n+\n+    :param namespace: Pagure namespace\n+    :param repository: Pagure repository\n+    :param api_token: Pagure API token to access the API\n+    :param tag: label used to mark the data\n+    :param archive: archive to store/retrieve items\n+    :param max_retries: number of max retries to a data source\n+        before raising a RetryError exception\n+    :param max_items: max number of category items (e.g., issues,\n+        pull requests) per query\n+    :param sleep_time: time to sleep in case\n+        of connection problems\n+    :param ssl_verify: enable/disable SSL verification\n+    \"\"\"\n+    version = '0.1.0'\n+\n+    CATEGORIES = [CATEGORY_ISSUE]\n+\n+    def __init__(self, namespace=None, repository=None,\n+                 api_token=None,\n+                 tag=None, archive=None,\n+                 max_retries=MAX_RETRIES, sleep_time=DEFAULT_SLEEP_TIME,\n+                 max_items=MAX_CATEGORY_ITEMS_PER_PAGE, ssl_verify=True):\n+        origin = PAGURE_URL\n+\n+        # In case the repository is under a namespace add the namespace as well to the origin\n+        origin = urijoin(origin, namespace, repository) if namespace else urijoin(origin, repository)\n+\n+        super().__init__(origin, tag=tag, archive=archive, ssl_verify=ssl_verify)\n+\n+        self.namespace = namespace\n+        self.repository = repository\n+        self.api_token = api_token\n+        self.max_retries = max_retries\n+        self.sleep_time = sleep_time\n+        self.max_items = max_items\n+\n+        self.client = None\n+\n+    def search_fields(self, item):\n+        \"\"\"Add search fields to an item.\n+\n+        It adds the values of `metadata_id` plus the `namespace` and `repo`.\n+\n+        :param item: the item to extract the search fields values\n+\n+        :returns: a dict of search fields\n+        \"\"\"\n+        search_fields = {\n+            DEFAULT_SEARCH_FIELD: self.metadata_id(item),\n+            'namespace': self.namespace,\n+            'repo': self.repository\n+        }\n+\n+        return search_fields\n+\n+    def fetch(self, category=CATEGORY_ISSUE, from_date=DEFAULT_DATETIME, to_date=DEFAULT_LAST_DATETIME,\n+              filter_classified=False):\n+        \"\"\"Fetch the issues from the repository.\n+\n+        The method retrieves, from a Pagure repository,\n+        the issues updated since/until the given date.\n+\n+        :param category: the category of items to fetch\n+        :param from_date: obtain issues updated since this date\n+        :param to_date: obtain issues until a until a specific date (included)\n+        :param filter_classified: remove classified fields from the resulting items\n+\n+        :returns: a generator of issues\n+        \"\"\"\n+        if not from_date:\n+            from_date = DEFAULT_DATETIME\n+\n+        if not to_date:\n+            to_date = DEFAULT_LAST_DATETIME\n+\n+        from_date = from_date.strftime('%Y-%m-%d')\n+        to_date = to_date.strftime('%Y-%m-%d')\n+        kwargs = {\n+            'from_date': from_date,\n+            'to_date': to_date\n+        }\n+        items = super().fetch(category,\n+                              filter_classified=filter_classified,\n+                              **kwargs)\n+\n+        return items\n+\n+    def fetch_items(self, category, **kwargs):\n+        \"\"\"Fetch the items (issues)\n+\n+        :param category: the category of items to fetch\n+        :param kwargs: backend arguments\n+\n+        :returns: a generator of items\n+        \"\"\"\n+        from_date = kwargs['from_date']\n+        to_date = kwargs['to_date']\n+        items = self.__fetch_issues(from_date, to_date)\n+        return items\n+\n+    @classmethod\n+    def has_archiving(cls):\n+        \"\"\"Returns whether it supports archiving items on the fetch process.\n+\n+        :returns: this backend supports items archive\n+        \"\"\"\n+        return True\n+\n+    @classmethod\n+    def has_resuming(cls):\n+        \"\"\"Returns whether it supports to resume the fetch process.\n+\n+        :returns: this backend supports items resuming\n+        \"\"\"\n+        return True\n+\n+    @staticmethod\n+    def metadata_id(item):\n+        \"\"\"Extracts the identifier from a Pagure item.\"\"\"\n+\n+        return str(item['id'])\n+\n+    @staticmethod\n+    def metadata_updated_on(item):\n+        \"\"\"Extracts the update time from a Pagure item.\n+\n+        The timestamp used is extracted from 'last_updated' field.\n+        This date is converted to UNIX timestamp format. As Pagure\n+        dates are in timestamp format the conversion is straightforward.\n+\n+        :param item: item generated by the backend\n+\n+        :returns: a UNIX timestamp\n+        \"\"\"\n+        ts = int(item['last_updated'])\n+        ts = datetime.fromtimestamp(ts).timestamp()\n+\n+        return ts\n+\n+    @staticmethod\n+    def metadata_category(item):\n+        \"\"\"Extracts the category from a Pagure item.\n+\n+        This backend generates one type of item which is\n+        'issue'.\n+        \"\"\"\n+        category = CATEGORY_ISSUE\n+\n+        return category\n+\n+    def _init_client(self, from_archive=False):\n+        \"\"\"Init client\"\"\"\n+\n+        return PagureClient(self.namespace, self.repository, self.api_token,\n+                            self.sleep_time, self.max_retries, self.max_items,\n+                            self.archive, from_archive, self.ssl_verify)\n+\n+    def __fetch_issues(self, from_date, to_date):\n+        \"\"\"Fetch the issues\n+        :param from_date: starting date from which issues are fetched\n+        :param to_date: ending date till which issues are fetched\n+\n+        :returns: an issue object\n+        \"\"\"\n+        issues_groups = self.client.issues(from_date=from_date)\n+\n+        for raw_issues in issues_groups:\n+            issues = json.loads(raw_issues)\n+            issues = issues['issues']\n+            for issue in issues:\n+\n+                if int(issue['last_updated']) > str_to_datetime(to_date).timestamp():\n+                    return\n+\n+                yield issue\n+\n+\n+class PagureClient(HttpClient):\n+    \"\"\"Client for retrieving information from Pagure API\n+\n+    :param namespace: Pagure namespace\n+    :param repository: Pagure repository\n+    :param token: Pagure API token to access the API\n+    :param sleep_time: time to sleep in case\n+        of connection problems\n+    :param max_retries: number of max retries to a data source\n+        before raising a RetryError exception\n+    :param max_items: max number of category items per query\n+    :param archive: collect issues already retrieved from an archive\n+    :param from_archive: it tells whether to write/read the archive\n+    :param ssl_verify: enable/disable SSL verification\n+    \"\"\"\n+",
        "path": "perceval/backends/core/pagure.py",
        "position": null,
        "original_position": 249,
        "commit_id": "70a89aa1dccc5152ed4a52cb4c5e4e327ba3595a",
        "original_commit_id": "88e5f4f4a5846dd98e9434c011ffbbf83eb74092",
        "user": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "please remote this empty line",
        "created_at": "2020-03-08T18:05:22Z",
        "updated_at": "2020-03-08T18:21:42Z",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r389392063",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621",
        "author_association": "MEMBER",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389392063"
          },
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r389392063"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389392063/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "user_data": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false,
          "name": "valerio",
          "company": "@Bitergia ",
          "blog": "http://valeriocos.github.io/",
          "location": "Madrid, Spain",
          "email": "valcos@bitergia.com",
          "hireable": true,
          "bio": null,
          "public_repos": 57,
          "public_gists": 28,
          "followers": 34,
          "following": 5,
          "created_at": "2014-01-27T14:30:30Z",
          "updated_at": "2020-03-17T10:02:44Z",
          "organizations": [
            {
              "login": "Bitergia",
              "id": 1918070,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=",
              "url": "https://api.github.com/orgs/Bitergia",
              "repos_url": "https://api.github.com/orgs/Bitergia/repos",
              "events_url": "https://api.github.com/orgs/Bitergia/events",
              "hooks_url": "https://api.github.com/orgs/Bitergia/hooks",
              "issues_url": "https://api.github.com/orgs/Bitergia/issues",
              "members_url": "https://api.github.com/orgs/Bitergia/members{/member}",
              "public_members_url": "https://api.github.com/orgs/Bitergia/public_members{/member}",
              "avatar_url": "https://avatars3.githubusercontent.com/u/1918070?v=4",
              "description": null
            },
            {
              "login": "grimoirelab",
              "id": 16151805,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1",
              "url": "https://api.github.com/orgs/grimoirelab",
              "repos_url": "https://api.github.com/orgs/grimoirelab/repos",
              "events_url": "https://api.github.com/orgs/grimoirelab/events",
              "hooks_url": "https://api.github.com/orgs/grimoirelab/hooks",
              "issues_url": "https://api.github.com/orgs/grimoirelab/issues",
              "members_url": "https://api.github.com/orgs/grimoirelab/members{/member}",
              "public_members_url": "https://api.github.com/orgs/grimoirelab/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/16151805?v=4",
              "description": ""
            },
            {
              "login": "chaoss",
              "id": 29740296,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
              "url": "https://api.github.com/orgs/chaoss",
              "repos_url": "https://api.github.com/orgs/chaoss/repos",
              "events_url": "https://api.github.com/orgs/chaoss/events",
              "hooks_url": "https://api.github.com/orgs/chaoss/hooks",
              "issues_url": "https://api.github.com/orgs/chaoss/issues",
              "members_url": "https://api.github.com/orgs/chaoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/chaoss/public_members{/member}",
              "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
              "description": ""
            }
          ]
        },
        "reactions_data": []
      },
      {
        "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389392239",
        "pull_request_review_id": 370847888,
        "id": 389392239,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM5MjIzOQ==",
        "diff_hunk": "@@ -0,0 +1,713 @@\n+#!/usr/bin/env python3\n+# -*- coding: utf-8 -*-\n+#\n+# Copyright (C) 2015-2020 Bitergia\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program. If not, see <http://www.gnu.org/licenses/>.\n+#\n+# Authors:\n+#     Animesh Kumar<animuz111@gmail.com>\n+#\n+\n+import datetime\n+import os\n+import unittest.mock\n+import httpretty\n+import pkg_resources\n+import requests\n+import dateutil.tz\n+\n+pkg_resources.declare_namespace('perceval.backends')\n+\n+from perceval.backend import BackendCommandArgumentParser\n+from perceval.utils import (DEFAULT_DATETIME, DEFAULT_LAST_DATETIME)\n+from perceval.backends.core.pagure import (logger,\n+                                           Pagure,\n+                                           PagureCommand,\n+                                           PagureClient,\n+                                           CATEGORY_ISSUE,\n+                                           MAX_CATEGORY_ITEMS_PER_PAGE)\n+from base import TestCaseBackendArchive\n+\n+PAGURE_API_URL = \"https://pagure.io/api/0\"\n+PAGURE_REPO_URL = PAGURE_API_URL + \"/Project-example\"\n+PAGURE_ISSUES_URL = PAGURE_REPO_URL + \"/issues\"\n+\n+# Repository with issue tracker disabled\n+PAGURE_REPO_URL_DISABLED_URL = PAGURE_API_URL + \"/Project-test-example\"\n+PAGURE_ISSUES_DISABLED_URL = PAGURE_REPO_URL_DISABLED_URL + \"/issues\"\n+\n+PAGURE_NAMESPACE_REPO_URL = PAGURE_API_URL + \"Test-group/Project-namespace-example\"\n+PAGURE_NAMESPACE_ISSUES_URL = PAGURE_NAMESPACE_REPO_URL + \"/issues\"\n+\n+\n+def read_file(filename, mode='r'):\n+    with open(os.path.join(os.path.dirname(os.path.abspath(__file__)), filename), mode) as f:\n+        content = f.read()\n+    return content\n+\n+\n+class TestPagureBackend(unittest.TestCase):\n+    \"\"\"Pagure backend tests\"\"\"\n+\n+    @httpretty.activate\n+    def test_initialization(self):\n+        \"\"\"Test whether attributes are initialized\"\"\"\n+\n+        pagure = Pagure(namespace=None, repository='Project-example', api_token='aaa', tag='test')\n+\n+        # Testing initialization when repository is not within a namespace\n+        self.assertEqual(pagure.repository, 'Project-example')\n+        self.assertIsNone(pagure.namespace)\n+        self.assertEqual(pagure.origin, 'https://pagure.io/Project-example')\n+        self.assertEqual(pagure.tag, 'test')\n+        self.assertEqual(pagure.max_items, MAX_CATEGORY_ITEMS_PER_PAGE)\n+        self.assertEqual(pagure.categories, [CATEGORY_ISSUE])\n+        self.assertEqual(pagure.api_token, 'aaa')\n+        self.assertTrue(pagure.ssl_verify)\n+\n+        # When tag is empty or None it will be set to the value in origin\n+        pagure = Pagure(namespace=None, repository='Project-example', api_token='aaa', ssl_verify=False)\n+        self.assertEqual(pagure.repository, 'Project-example')\n+        self.assertIsNone(pagure.namespace)\n+        self.assertEqual(pagure.origin, 'https://pagure.io/Project-example')\n+        self.assertEqual(pagure.tag, 'https://pagure.io/Project-example')\n+        self.assertFalse(pagure.ssl_verify)\n+        self.assertEqual(pagure.api_token, 'aaa')\n+\n+        pagure = Pagure(namespace=None, repository='Project-example', api_token='aaa', tag='')\n+        self.assertEqual(pagure.repository, 'Project-example')\n+        self.assertIsNone(pagure.namespace)\n+        self.assertEqual(pagure.origin, 'https://pagure.io/Project-example')\n+        self.assertEqual(pagure.tag, 'https://pagure.io/Project-example')\n+        self.assertEqual(pagure.api_token, 'aaa')\n+\n+        # Empty value generates a None API token\n+        pagure = Pagure(repository='Project-example', tag='test')\n+        self.assertEqual(pagure.repository, 'Project-example')\n+        self.assertIsNone(pagure.namespace)\n+        self.assertEqual(pagure.origin, 'https://pagure.io/Project-example')\n+        self.assertEqual(pagure.tag, 'test')\n+        self.assertIsNone(pagure.api_token)\n+\n+        # Testing initialization when repository is within a namespace\n+        pagure = Pagure(namespace='Test-group', repository='Project-example-namespace', api_token='aaa', tag='testing')\n+        self.assertEqual(pagure.repository, 'Project-example-namespace')\n+        self.assertEqual(pagure.namespace, 'Test-group')\n+        self.assertEqual(pagure.origin, 'https://pagure.io/Test-group/Project-example-namespace')\n+        self.assertEqual(pagure.tag, 'testing')\n+        self.assertEqual(pagure.max_items, MAX_CATEGORY_ITEMS_PER_PAGE)\n+        self.assertEqual(pagure.categories, [CATEGORY_ISSUE])\n+        self.assertEqual(pagure.api_token, 'aaa')\n+        self.assertTrue(pagure.ssl_verify)\n+\n+    def test_has_resuming(self):\n+        \"\"\"Test if it returns True when has_resuming is called\"\"\"\n+\n+        self.assertEqual(Pagure.has_resuming(), True)\n+\n+    def test_has_archiving(self):\n+        \"\"\"Test if it returns True when has_archiving is called\"\"\"\n+\n+        self.assertEqual(Pagure.has_archiving(), True)\n+\n+    @httpretty.activate\n+    def test_fetch_issues(self):\n+        \"\"\"Test whether a list of issues is returned\"\"\"\n+\n+        body = read_file('data/pagure/pagure_repo_issue_1')\n+\n+        httpretty.register_uri(httpretty.GET,\n+                               PAGURE_ISSUES_URL,\n+                               body=body,\n+                               status=200,\n+                               )\n+        pagure = Pagure(repository='Project-example', api_token='aaa')\n+        issues = [issues for issues in pagure.fetch(from_date=None, to_date=None)]\n+\n+        self.assertEqual(len(issues), 1)\n+\n+        issue = issues[0]\n+        self.assertEqual(issue['origin'], 'https://pagure.io/Project-example')\n+        self.assertEqual(issue['uuid'], '41071b08dd75f34ca92c6d5ecb844e7a3e5939c6')\n+        self.assertEqual(issue['updated_on'], 1583508642.0)\n+        self.assertEqual(issue['category'], CATEGORY_ISSUE)\n+        self.assertEqual(issue['tag'], 'https://pagure.io/Project-example')\n+        self.assertEqual(len(issue['data']['comments']), 1)\n+        self.assertEqual(issue['data']['comments'][0]['user']['name'], 'animeshk08')\n+        self.assertEqual(len(issue['data']['comments'][0]['reactions']), 0)\n+\n+    @httpretty.activate\n+    def test_fetch_issues_disabled(self):\n+        \"\"\"Test whether a warning message is logged when the issue tracker is disabled\n+        \"\"\"",
        "path": "tests/test_pagure.py",
        "position": null,
        "original_position": 154,
        "commit_id": "70a89aa1dccc5152ed4a52cb4c5e4e327ba3595a",
        "original_commit_id": "88e5f4f4a5846dd98e9434c011ffbbf83eb74092",
        "user": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "can you put this (`\"\"\"`) in line 153?",
        "created_at": "2020-03-08T18:07:27Z",
        "updated_at": "2020-03-08T18:21:42Z",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r389392239",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621",
        "author_association": "MEMBER",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389392239"
          },
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/621#discussion_r389392239"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/comments/389392239/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "user_data": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false,
          "name": "valerio",
          "company": "@Bitergia ",
          "blog": "http://valeriocos.github.io/",
          "location": "Madrid, Spain",
          "email": "valcos@bitergia.com",
          "hireable": true,
          "bio": null,
          "public_repos": 57,
          "public_gists": 28,
          "followers": 34,
          "following": 5,
          "created_at": "2014-01-27T14:30:30Z",
          "updated_at": "2020-03-17T10:02:44Z",
          "organizations": [
            {
              "login": "Bitergia",
              "id": 1918070,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=",
              "url": "https://api.github.com/orgs/Bitergia",
              "repos_url": "https://api.github.com/orgs/Bitergia/repos",
              "events_url": "https://api.github.com/orgs/Bitergia/events",
              "hooks_url": "https://api.github.com/orgs/Bitergia/hooks",
              "issues_url": "https://api.github.com/orgs/Bitergia/issues",
              "members_url": "https://api.github.com/orgs/Bitergia/members{/member}",
              "public_members_url": "https://api.github.com/orgs/Bitergia/public_members{/member}",
              "avatar_url": "https://avatars3.githubusercontent.com/u/1918070?v=4",
              "description": null
            },
            {
              "login": "grimoirelab",
              "id": 16151805,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1",
              "url": "https://api.github.com/orgs/grimoirelab",
              "repos_url": "https://api.github.com/orgs/grimoirelab/repos",
              "events_url": "https://api.github.com/orgs/grimoirelab/events",
              "hooks_url": "https://api.github.com/orgs/grimoirelab/hooks",
              "issues_url": "https://api.github.com/orgs/grimoirelab/issues",
              "members_url": "https://api.github.com/orgs/grimoirelab/members{/member}",
              "public_members_url": "https://api.github.com/orgs/grimoirelab/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/16151805?v=4",
              "description": ""
            },
            {
              "login": "chaoss",
              "id": 29740296,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
              "url": "https://api.github.com/orgs/chaoss",
              "repos_url": "https://api.github.com/orgs/chaoss/repos",
              "events_url": "https://api.github.com/orgs/chaoss/events",
              "hooks_url": "https://api.github.com/orgs/chaoss/hooks",
              "issues_url": "https://api.github.com/orgs/chaoss/issues",
              "members_url": "https://api.github.com/orgs/chaoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/chaoss/public_members{/member}",
              "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
              "description": ""
            }
          ]
        },
        "reactions_data": []
      }
    ],
    "reviews_data": [
      {
        "id": 369439055,
        "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5NDM5MDU1",
        "user": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars1.githubusercontent.com/u/6515067?u=8faaf11c054b78ac20f492bb634757233ccad9c4&v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "Thank you @animeshk08 for the PR and sorry for the delay. Overall the code looks good, there is a first round of comments/questions to address :)",
        "state": "COMMENTED",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/621#pullrequestreview-369439055",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621",
        "author_association": "MEMBER",
        "_links": {
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/621#pullrequestreview-369439055"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621"
          }
        },
        "submitted_at": "2020-03-05T14:03:54Z",
        "commit_id": "4ffb87bbb10fd5eaf6125f39c09c04e803a1c8c7",
        "user_data": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false,
          "name": "valerio",
          "company": "@Bitergia ",
          "blog": "http://valeriocos.github.io/",
          "location": "Madrid, Spain",
          "email": "valcos@bitergia.com",
          "hireable": true,
          "bio": null,
          "public_repos": 57,
          "public_gists": 28,
          "followers": 34,
          "following": 5,
          "created_at": "2014-01-27T14:30:30Z",
          "updated_at": "2020-03-17T10:02:44Z",
          "organizations": [
            {
              "login": "Bitergia",
              "id": 1918070,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=",
              "url": "https://api.github.com/orgs/Bitergia",
              "repos_url": "https://api.github.com/orgs/Bitergia/repos",
              "events_url": "https://api.github.com/orgs/Bitergia/events",
              "hooks_url": "https://api.github.com/orgs/Bitergia/hooks",
              "issues_url": "https://api.github.com/orgs/Bitergia/issues",
              "members_url": "https://api.github.com/orgs/Bitergia/members{/member}",
              "public_members_url": "https://api.github.com/orgs/Bitergia/public_members{/member}",
              "avatar_url": "https://avatars3.githubusercontent.com/u/1918070?v=4",
              "description": null
            },
            {
              "login": "grimoirelab",
              "id": 16151805,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1",
              "url": "https://api.github.com/orgs/grimoirelab",
              "repos_url": "https://api.github.com/orgs/grimoirelab/repos",
              "events_url": "https://api.github.com/orgs/grimoirelab/events",
              "hooks_url": "https://api.github.com/orgs/grimoirelab/hooks",
              "issues_url": "https://api.github.com/orgs/grimoirelab/issues",
              "members_url": "https://api.github.com/orgs/grimoirelab/members{/member}",
              "public_members_url": "https://api.github.com/orgs/grimoirelab/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/16151805?v=4",
              "description": ""
            },
            {
              "login": "chaoss",
              "id": 29740296,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
              "url": "https://api.github.com/orgs/chaoss",
              "repos_url": "https://api.github.com/orgs/chaoss/repos",
              "events_url": "https://api.github.com/orgs/chaoss/events",
              "hooks_url": "https://api.github.com/orgs/chaoss/hooks",
              "issues_url": "https://api.github.com/orgs/chaoss/issues",
              "members_url": "https://api.github.com/orgs/chaoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/chaoss/public_members{/member}",
              "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
              "description": ""
            }
          ]
        }
      },
      {
        "id": 370199029,
        "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwMTk5MDI5",
        "user": {
          "login": "animeshk08",
          "id": 32506591,
          "node_id": "MDQ6VXNlcjMyNTA2NTkx",
          "avatar_url": "https://avatars1.githubusercontent.com/u/32506591?u=9cbcc430031351f43b0c611e7cf19df84a8b488c&v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/animeshk08",
          "html_url": "https://github.com/animeshk08",
          "followers_url": "https://api.github.com/users/animeshk08/followers",
          "following_url": "https://api.github.com/users/animeshk08/following{/other_user}",
          "gists_url": "https://api.github.com/users/animeshk08/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/animeshk08/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/animeshk08/subscriptions",
          "organizations_url": "https://api.github.com/users/animeshk08/orgs",
          "repos_url": "https://api.github.com/users/animeshk08/repos",
          "events_url": "https://api.github.com/users/animeshk08/events{/privacy}",
          "received_events_url": "https://api.github.com/users/animeshk08/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "",
        "state": "COMMENTED",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/621#pullrequestreview-370199029",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621",
        "author_association": "CONTRIBUTOR",
        "_links": {
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/621#pullrequestreview-370199029"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621"
          }
        },
        "submitted_at": "2020-03-06T09:57:24Z",
        "commit_id": "4ffb87bbb10fd5eaf6125f39c09c04e803a1c8c7",
        "user_data": {
          "login": "animeshk08",
          "id": 32506591,
          "node_id": "MDQ6VXNlcjMyNTA2NTkx",
          "avatar_url": "https://avatars1.githubusercontent.com/u/32506591?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/animeshk08",
          "html_url": "https://github.com/animeshk08",
          "followers_url": "https://api.github.com/users/animeshk08/followers",
          "following_url": "https://api.github.com/users/animeshk08/following{/other_user}",
          "gists_url": "https://api.github.com/users/animeshk08/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/animeshk08/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/animeshk08/subscriptions",
          "organizations_url": "https://api.github.com/users/animeshk08/orgs",
          "repos_url": "https://api.github.com/users/animeshk08/repos",
          "events_url": "https://api.github.com/users/animeshk08/events{/privacy}",
          "received_events_url": "https://api.github.com/users/animeshk08/received_events",
          "type": "User",
          "site_admin": false,
          "name": "Animesh Kumar",
          "company": null,
          "blog": "",
          "location": null,
          "email": null,
          "hireable": null,
          "bio": "Android| Data Science| Open Source",
          "public_repos": 48,
          "public_gists": 0,
          "followers": 5,
          "following": 2,
          "created_at": "2017-10-04T06:38:11Z",
          "updated_at": "2020-03-17T15:31:35Z",
          "organizations": []
        }
      },
      {
        "id": 370234599,
        "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwMjM0NTk5",
        "user": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars1.githubusercontent.com/u/6515067?u=8faaf11c054b78ac20f492bb634757233ccad9c4&v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "",
        "state": "COMMENTED",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/621#pullrequestreview-370234599",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621",
        "author_association": "MEMBER",
        "_links": {
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/621#pullrequestreview-370234599"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621"
          }
        },
        "submitted_at": "2020-03-06T10:48:15Z",
        "commit_id": "4ffb87bbb10fd5eaf6125f39c09c04e803a1c8c7",
        "user_data": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false,
          "name": "valerio",
          "company": "@Bitergia ",
          "blog": "http://valeriocos.github.io/",
          "location": "Madrid, Spain",
          "email": "valcos@bitergia.com",
          "hireable": true,
          "bio": null,
          "public_repos": 57,
          "public_gists": 28,
          "followers": 34,
          "following": 5,
          "created_at": "2014-01-27T14:30:30Z",
          "updated_at": "2020-03-17T10:02:44Z",
          "organizations": [
            {
              "login": "Bitergia",
              "id": 1918070,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=",
              "url": "https://api.github.com/orgs/Bitergia",
              "repos_url": "https://api.github.com/orgs/Bitergia/repos",
              "events_url": "https://api.github.com/orgs/Bitergia/events",
              "hooks_url": "https://api.github.com/orgs/Bitergia/hooks",
              "issues_url": "https://api.github.com/orgs/Bitergia/issues",
              "members_url": "https://api.github.com/orgs/Bitergia/members{/member}",
              "public_members_url": "https://api.github.com/orgs/Bitergia/public_members{/member}",
              "avatar_url": "https://avatars3.githubusercontent.com/u/1918070?v=4",
              "description": null
            },
            {
              "login": "grimoirelab",
              "id": 16151805,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1",
              "url": "https://api.github.com/orgs/grimoirelab",
              "repos_url": "https://api.github.com/orgs/grimoirelab/repos",
              "events_url": "https://api.github.com/orgs/grimoirelab/events",
              "hooks_url": "https://api.github.com/orgs/grimoirelab/hooks",
              "issues_url": "https://api.github.com/orgs/grimoirelab/issues",
              "members_url": "https://api.github.com/orgs/grimoirelab/members{/member}",
              "public_members_url": "https://api.github.com/orgs/grimoirelab/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/16151805?v=4",
              "description": ""
            },
            {
              "login": "chaoss",
              "id": 29740296,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
              "url": "https://api.github.com/orgs/chaoss",
              "repos_url": "https://api.github.com/orgs/chaoss/repos",
              "events_url": "https://api.github.com/orgs/chaoss/events",
              "hooks_url": "https://api.github.com/orgs/chaoss/hooks",
              "issues_url": "https://api.github.com/orgs/chaoss/issues",
              "members_url": "https://api.github.com/orgs/chaoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/chaoss/public_members{/member}",
              "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
              "description": ""
            }
          ]
        }
      },
      {
        "id": 370737508,
        "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwNzM3NTA4",
        "user": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars1.githubusercontent.com/u/6515067?u=8faaf11c054b78ac20f492bb634757233ccad9c4&v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "Hi @animeshk08 , the PR is in a really good shape, the backend is almost done, the tests require some work.\r\n\r\nEDIT: please squash the commits in just one.",
        "state": "COMMENTED",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/621#pullrequestreview-370737508",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621",
        "author_association": "MEMBER",
        "_links": {
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/621#pullrequestreview-370737508"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621"
          }
        },
        "submitted_at": "2020-03-07T11:55:59Z",
        "commit_id": "bea6bc459c6829df8be725bc163f944501d55107",
        "user_data": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false,
          "name": "valerio",
          "company": "@Bitergia ",
          "blog": "http://valeriocos.github.io/",
          "location": "Madrid, Spain",
          "email": "valcos@bitergia.com",
          "hireable": true,
          "bio": null,
          "public_repos": 57,
          "public_gists": 28,
          "followers": 34,
          "following": 5,
          "created_at": "2014-01-27T14:30:30Z",
          "updated_at": "2020-03-17T10:02:44Z",
          "organizations": [
            {
              "login": "Bitergia",
              "id": 1918070,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=",
              "url": "https://api.github.com/orgs/Bitergia",
              "repos_url": "https://api.github.com/orgs/Bitergia/repos",
              "events_url": "https://api.github.com/orgs/Bitergia/events",
              "hooks_url": "https://api.github.com/orgs/Bitergia/hooks",
              "issues_url": "https://api.github.com/orgs/Bitergia/issues",
              "members_url": "https://api.github.com/orgs/Bitergia/members{/member}",
              "public_members_url": "https://api.github.com/orgs/Bitergia/public_members{/member}",
              "avatar_url": "https://avatars3.githubusercontent.com/u/1918070?v=4",
              "description": null
            },
            {
              "login": "grimoirelab",
              "id": 16151805,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1",
              "url": "https://api.github.com/orgs/grimoirelab",
              "repos_url": "https://api.github.com/orgs/grimoirelab/repos",
              "events_url": "https://api.github.com/orgs/grimoirelab/events",
              "hooks_url": "https://api.github.com/orgs/grimoirelab/hooks",
              "issues_url": "https://api.github.com/orgs/grimoirelab/issues",
              "members_url": "https://api.github.com/orgs/grimoirelab/members{/member}",
              "public_members_url": "https://api.github.com/orgs/grimoirelab/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/16151805?v=4",
              "description": ""
            },
            {
              "login": "chaoss",
              "id": 29740296,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
              "url": "https://api.github.com/orgs/chaoss",
              "repos_url": "https://api.github.com/orgs/chaoss/repos",
              "events_url": "https://api.github.com/orgs/chaoss/events",
              "hooks_url": "https://api.github.com/orgs/chaoss/hooks",
              "issues_url": "https://api.github.com/orgs/chaoss/issues",
              "members_url": "https://api.github.com/orgs/chaoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/chaoss/public_members{/member}",
              "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
              "description": ""
            }
          ]
        }
      },
      {
        "id": 370834781,
        "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwODM0Nzgx",
        "user": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars1.githubusercontent.com/u/6515067?u=8faaf11c054b78ac20f492bb634757233ccad9c4&v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "@animeshk08 thank you for your time and effort to deliver this PR. I left some minor comments, after addressing them I think the PR is ready to be merged. In any case, good job!\r\n\r\nLet me know if you are interested in extending ELK to store and process the data coming from pagure repositories :) ",
        "state": "COMMENTED",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/621#pullrequestreview-370834781",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621",
        "author_association": "MEMBER",
        "_links": {
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/621#pullrequestreview-370834781"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621"
          }
        },
        "submitted_at": "2020-03-08T14:57:30Z",
        "commit_id": "bc85386c68f52f62fcf7b392a494aca072b940d2",
        "user_data": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false,
          "name": "valerio",
          "company": "@Bitergia ",
          "blog": "http://valeriocos.github.io/",
          "location": "Madrid, Spain",
          "email": "valcos@bitergia.com",
          "hireable": true,
          "bio": null,
          "public_repos": 57,
          "public_gists": 28,
          "followers": 34,
          "following": 5,
          "created_at": "2014-01-27T14:30:30Z",
          "updated_at": "2020-03-17T10:02:44Z",
          "organizations": [
            {
              "login": "Bitergia",
              "id": 1918070,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=",
              "url": "https://api.github.com/orgs/Bitergia",
              "repos_url": "https://api.github.com/orgs/Bitergia/repos",
              "events_url": "https://api.github.com/orgs/Bitergia/events",
              "hooks_url": "https://api.github.com/orgs/Bitergia/hooks",
              "issues_url": "https://api.github.com/orgs/Bitergia/issues",
              "members_url": "https://api.github.com/orgs/Bitergia/members{/member}",
              "public_members_url": "https://api.github.com/orgs/Bitergia/public_members{/member}",
              "avatar_url": "https://avatars3.githubusercontent.com/u/1918070?v=4",
              "description": null
            },
            {
              "login": "grimoirelab",
              "id": 16151805,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1",
              "url": "https://api.github.com/orgs/grimoirelab",
              "repos_url": "https://api.github.com/orgs/grimoirelab/repos",
              "events_url": "https://api.github.com/orgs/grimoirelab/events",
              "hooks_url": "https://api.github.com/orgs/grimoirelab/hooks",
              "issues_url": "https://api.github.com/orgs/grimoirelab/issues",
              "members_url": "https://api.github.com/orgs/grimoirelab/members{/member}",
              "public_members_url": "https://api.github.com/orgs/grimoirelab/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/16151805?v=4",
              "description": ""
            },
            {
              "login": "chaoss",
              "id": 29740296,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
              "url": "https://api.github.com/orgs/chaoss",
              "repos_url": "https://api.github.com/orgs/chaoss/repos",
              "events_url": "https://api.github.com/orgs/chaoss/events",
              "hooks_url": "https://api.github.com/orgs/chaoss/hooks",
              "issues_url": "https://api.github.com/orgs/chaoss/issues",
              "members_url": "https://api.github.com/orgs/chaoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/chaoss/public_members{/member}",
              "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
              "description": ""
            }
          ]
        }
      },
      {
        "id": 370843964,
        "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwODQzOTY0",
        "user": {
          "login": "animeshk08",
          "id": 32506591,
          "node_id": "MDQ6VXNlcjMyNTA2NTkx",
          "avatar_url": "https://avatars1.githubusercontent.com/u/32506591?u=9cbcc430031351f43b0c611e7cf19df84a8b488c&v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/animeshk08",
          "html_url": "https://github.com/animeshk08",
          "followers_url": "https://api.github.com/users/animeshk08/followers",
          "following_url": "https://api.github.com/users/animeshk08/following{/other_user}",
          "gists_url": "https://api.github.com/users/animeshk08/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/animeshk08/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/animeshk08/subscriptions",
          "organizations_url": "https://api.github.com/users/animeshk08/orgs",
          "repos_url": "https://api.github.com/users/animeshk08/repos",
          "events_url": "https://api.github.com/users/animeshk08/events{/privacy}",
          "received_events_url": "https://api.github.com/users/animeshk08/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "",
        "state": "COMMENTED",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/621#pullrequestreview-370843964",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621",
        "author_association": "CONTRIBUTOR",
        "_links": {
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/621#pullrequestreview-370843964"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621"
          }
        },
        "submitted_at": "2020-03-08T16:59:20Z",
        "commit_id": "bc85386c68f52f62fcf7b392a494aca072b940d2",
        "user_data": {
          "login": "animeshk08",
          "id": 32506591,
          "node_id": "MDQ6VXNlcjMyNTA2NTkx",
          "avatar_url": "https://avatars1.githubusercontent.com/u/32506591?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/animeshk08",
          "html_url": "https://github.com/animeshk08",
          "followers_url": "https://api.github.com/users/animeshk08/followers",
          "following_url": "https://api.github.com/users/animeshk08/following{/other_user}",
          "gists_url": "https://api.github.com/users/animeshk08/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/animeshk08/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/animeshk08/subscriptions",
          "organizations_url": "https://api.github.com/users/animeshk08/orgs",
          "repos_url": "https://api.github.com/users/animeshk08/repos",
          "events_url": "https://api.github.com/users/animeshk08/events{/privacy}",
          "received_events_url": "https://api.github.com/users/animeshk08/received_events",
          "type": "User",
          "site_admin": false,
          "name": "Animesh Kumar",
          "company": null,
          "blog": "",
          "location": null,
          "email": null,
          "hireable": null,
          "bio": "Android| Data Science| Open Source",
          "public_repos": 48,
          "public_gists": 0,
          "followers": 5,
          "following": 2,
          "created_at": "2017-10-04T06:38:11Z",
          "updated_at": "2020-03-17T15:31:35Z",
          "organizations": []
        }
      },
      {
        "id": 370847888,
        "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwODQ3ODg4",
        "user": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars1.githubusercontent.com/u/6515067?u=8faaf11c054b78ac20f492bb634757233ccad9c4&v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "> https://github.com/chaoss/grimoirelab-perceval/pull/621#issuecomment-596231287\r\n\r\nYou're welcome and sorry for the different iterations on the PR. Just two small changes and that's it :)",
        "state": "COMMENTED",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/621#pullrequestreview-370847888",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621",
        "author_association": "MEMBER",
        "_links": {
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/621#pullrequestreview-370847888"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621"
          }
        },
        "submitted_at": "2020-03-08T18:15:19Z",
        "commit_id": "88e5f4f4a5846dd98e9434c011ffbbf83eb74092",
        "user_data": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false,
          "name": "valerio",
          "company": "@Bitergia ",
          "blog": "http://valeriocos.github.io/",
          "location": "Madrid, Spain",
          "email": "valcos@bitergia.com",
          "hireable": true,
          "bio": null,
          "public_repos": 57,
          "public_gists": 28,
          "followers": 34,
          "following": 5,
          "created_at": "2014-01-27T14:30:30Z",
          "updated_at": "2020-03-17T10:02:44Z",
          "organizations": [
            {
              "login": "Bitergia",
              "id": 1918070,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=",
              "url": "https://api.github.com/orgs/Bitergia",
              "repos_url": "https://api.github.com/orgs/Bitergia/repos",
              "events_url": "https://api.github.com/orgs/Bitergia/events",
              "hooks_url": "https://api.github.com/orgs/Bitergia/hooks",
              "issues_url": "https://api.github.com/orgs/Bitergia/issues",
              "members_url": "https://api.github.com/orgs/Bitergia/members{/member}",
              "public_members_url": "https://api.github.com/orgs/Bitergia/public_members{/member}",
              "avatar_url": "https://avatars3.githubusercontent.com/u/1918070?v=4",
              "description": null
            },
            {
              "login": "grimoirelab",
              "id": 16151805,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1",
              "url": "https://api.github.com/orgs/grimoirelab",
              "repos_url": "https://api.github.com/orgs/grimoirelab/repos",
              "events_url": "https://api.github.com/orgs/grimoirelab/events",
              "hooks_url": "https://api.github.com/orgs/grimoirelab/hooks",
              "issues_url": "https://api.github.com/orgs/grimoirelab/issues",
              "members_url": "https://api.github.com/orgs/grimoirelab/members{/member}",
              "public_members_url": "https://api.github.com/orgs/grimoirelab/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/16151805?v=4",
              "description": ""
            },
            {
              "login": "chaoss",
              "id": 29740296,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
              "url": "https://api.github.com/orgs/chaoss",
              "repos_url": "https://api.github.com/orgs/chaoss/repos",
              "events_url": "https://api.github.com/orgs/chaoss/events",
              "hooks_url": "https://api.github.com/orgs/chaoss/hooks",
              "issues_url": "https://api.github.com/orgs/chaoss/issues",
              "members_url": "https://api.github.com/orgs/chaoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/chaoss/public_members{/member}",
              "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
              "description": ""
            }
          ]
        }
      },
      {
        "id": 370849452,
        "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwODQ5NDUy",
        "user": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars1.githubusercontent.com/u/6515067?u=8faaf11c054b78ac20f492bb634757233ccad9c4&v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false
        },
        "body": "LGTM, thanks @animeshk08 . Nice job!\r\n\r\nEDIT: I needed to rebase your branch (since today there was another PR that was accepted)",
        "state": "APPROVED",
        "html_url": "https://github.com/chaoss/grimoirelab-perceval/pull/621#pullrequestreview-370849452",
        "pull_request_url": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621",
        "author_association": "MEMBER",
        "_links": {
          "html": {
            "href": "https://github.com/chaoss/grimoirelab-perceval/pull/621#pullrequestreview-370849452"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/chaoss/grimoirelab-perceval/pulls/621"
          }
        },
        "submitted_at": "2020-03-08T18:35:19Z",
        "commit_id": "70a89aa1dccc5152ed4a52cb4c5e4e327ba3595a",
        "user_data": {
          "login": "valeriocos",
          "id": 6515067,
          "node_id": "MDQ6VXNlcjY1MTUwNjc=",
          "avatar_url": "https://avatars2.githubusercontent.com/u/6515067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/valeriocos",
          "html_url": "https://github.com/valeriocos",
          "followers_url": "https://api.github.com/users/valeriocos/followers",
          "following_url": "https://api.github.com/users/valeriocos/following{/other_user}",
          "gists_url": "https://api.github.com/users/valeriocos/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/valeriocos/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/valeriocos/subscriptions",
          "organizations_url": "https://api.github.com/users/valeriocos/orgs",
          "repos_url": "https://api.github.com/users/valeriocos/repos",
          "events_url": "https://api.github.com/users/valeriocos/events{/privacy}",
          "received_events_url": "https://api.github.com/users/valeriocos/received_events",
          "type": "User",
          "site_admin": false,
          "name": "valerio",
          "company": "@Bitergia ",
          "blog": "http://valeriocos.github.io/",
          "location": "Madrid, Spain",
          "email": "valcos@bitergia.com",
          "hireable": true,
          "bio": null,
          "public_repos": 57,
          "public_gists": 28,
          "followers": 34,
          "following": 5,
          "created_at": "2014-01-27T14:30:30Z",
          "updated_at": "2020-03-17T10:02:44Z",
          "organizations": [
            {
              "login": "Bitergia",
              "id": 1918070,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE5MTgwNzA=",
              "url": "https://api.github.com/orgs/Bitergia",
              "repos_url": "https://api.github.com/orgs/Bitergia/repos",
              "events_url": "https://api.github.com/orgs/Bitergia/events",
              "hooks_url": "https://api.github.com/orgs/Bitergia/hooks",
              "issues_url": "https://api.github.com/orgs/Bitergia/issues",
              "members_url": "https://api.github.com/orgs/Bitergia/members{/member}",
              "public_members_url": "https://api.github.com/orgs/Bitergia/public_members{/member}",
              "avatar_url": "https://avatars3.githubusercontent.com/u/1918070?v=4",
              "description": null
            },
            {
              "login": "grimoirelab",
              "id": 16151805,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE2MTUxODA1",
              "url": "https://api.github.com/orgs/grimoirelab",
              "repos_url": "https://api.github.com/orgs/grimoirelab/repos",
              "events_url": "https://api.github.com/orgs/grimoirelab/events",
              "hooks_url": "https://api.github.com/orgs/grimoirelab/hooks",
              "issues_url": "https://api.github.com/orgs/grimoirelab/issues",
              "members_url": "https://api.github.com/orgs/grimoirelab/members{/member}",
              "public_members_url": "https://api.github.com/orgs/grimoirelab/public_members{/member}",
              "avatar_url": "https://avatars0.githubusercontent.com/u/16151805?v=4",
              "description": ""
            },
            {
              "login": "chaoss",
              "id": 29740296,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjI5NzQwMjk2",
              "url": "https://api.github.com/orgs/chaoss",
              "repos_url": "https://api.github.com/orgs/chaoss/repos",
              "events_url": "https://api.github.com/orgs/chaoss/events",
              "hooks_url": "https://api.github.com/orgs/chaoss/hooks",
              "issues_url": "https://api.github.com/orgs/chaoss/issues",
              "members_url": "https://api.github.com/orgs/chaoss/members{/member}",
              "public_members_url": "https://api.github.com/orgs/chaoss/public_members{/member}",
              "avatar_url": "https://avatars2.githubusercontent.com/u/29740296?v=4",
              "description": ""
            }
          ]
        }
      }
    ],
    "requested_reviewers_data": [],
    "merged_by_data": [],
    "commits_data": [
      "70a89aa1dccc5152ed4a52cb4c5e4e327ba3595a"
    ]
  }
}